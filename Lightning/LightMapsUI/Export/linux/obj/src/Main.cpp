// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Camera
#include <Camera.h>
#endif
#ifndef INCLUDED_LightProgram
#include <LightProgram.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MatrixUtils
#include <MatrixUtils.h>
#endif
#ifndef INCLUDED_Program
#include <Program.h>
#endif
#ifndef INCLUDED_SimpleCubeProgram
#include <SimpleCubeProgram.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGL2RenderContext_WebGL2RenderContext_Impl_
#include <lime/graphics/_WebGL2RenderContext/WebGL2RenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_math__Matrix4_Matrix4_Impl_
#include <lime/math/_Matrix4/Matrix4_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_peote_ui_PeoteUIDisplay
#include <peote/ui/PeoteUIDisplay.h>
#endif
#ifndef INCLUDED_peote_ui_config_Space
#include <peote/ui/config/Space.h>
#endif
#ifndef INCLUDED_peote_ui_config__SliderConfig_SliderConfigImpl
#include <peote/ui/config/_SliderConfig/SliderConfigImpl.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_Interactive
#include <peote/ui/interactive/Interactive.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_Pickable
#include <peote/ui/interactive/Pickable.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_UIElement
#include <peote/ui/interactive/UIElement.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_UISlider
#include <peote/ui/interactive/UISlider.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_interfaces_InputText
#include <peote/ui/interactive/interfaces/InputText.h>
#endif
#ifndef INCLUDED_peote_ui_style_RoundBorderStyle
#include <peote/ui/style/RoundBorderStyle.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_Style
#include <peote/ui/style/interfaces/Style.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_StyleElement
#include <peote/ui/style/interfaces/StyleElement.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_StyleID
#include <peote/ui/style/interfaces/StyleID.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_StyleProgram
#include <peote/ui/style/interfaces/StyleProgram.h>
#endif
#ifndef INCLUDED_peote_view_ActiveTexture
#include <peote/view/ActiveTexture.h>
#endif
#ifndef INCLUDED_peote_view_BufferInterface
#include <peote/view/BufferInterface.h>
#endif
#ifndef INCLUDED_peote_view_Buffer_Pickable
#include <peote/view/Buffer_Pickable.h>
#endif
#ifndef INCLUDED_peote_view_Display
#include <peote/view/Display.h>
#endif
#ifndef INCLUDED_peote_view_PeoteView
#include <peote/view/PeoteView.h>
#endif
#ifndef INCLUDED_peote_view_Program
#include <peote/view/Program.h>
#endif
#ifndef INCLUDED_peote_view_Texture
#include <peote/view/Texture.h>
#endif
#ifndef INCLUDED_peote_view_UniformFloat
#include <peote/view/UniformFloat.h>
#endif
#ifndef INCLUDED_peote_view_utils_Background
#include <peote/view/utils/Background.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderListItem_peote_view_ActiveTexture
#include <peote/view/utils/RenderListItem_peote_view_ActiveTexture.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderListItem_peote_view_Display
#include <peote/view/utils/RenderListItem_peote_view_Display.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderListItem_peote_view_Program
#include <peote/view/utils/RenderListItem_peote_view_Program.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderList_peote_view_ActiveTexture
#include <peote/view/utils/RenderList_peote_view_ActiveTexture.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderList_peote_view_Display
#include <peote/view/utils/RenderList_peote_view_Display.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderList_peote_view_Program
#include <peote/view/utils/RenderList_peote_view_Program.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_29_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",29,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_61_onPreloadComplete,"Main","onPreloadComplete",0x32b691ee,"Main.onPreloadComplete","Main.hx",61,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_215_initialize,"Main","initialize",0x8442af45,"Main.initialize","Main.hx",215,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_70_initialize,"Main","initialize",0x8442af45,"Main.initialize","Main.hx",70,0x087e5c05)
static const Float _hx_array_data_332f6459_5[] = {
	-0.5,-0.5,-0.5,0.0,0.0,-1.0,0.0,0.0,0.5,-0.5,-0.5,0.0,0.0,-1.0,1.0,0.0,0.5,0.5,-0.5,0.0,0.0,-1.0,1.0,1.0,0.5,0.5,-0.5,0.0,0.0,-1.0,1.0,1.0,-0.5,0.5,-0.5,0.0,0.0,-1.0,0.0,1.0,-0.5,-0.5,-0.5,0.0,0.0,-1.0,0.0,0.0,-0.5,-0.5,0.5,0.0,0.0,1.0,0.0,0.0,0.5,-0.5,0.5,0.0,0.0,1.0,1.0,0.0,0.5,0.5,0.5,0.0,0.0,1.0,1.0,1.0,0.5,0.5,0.5,0.0,0.0,1.0,1.0,1.0,-0.5,0.5,0.5,0.0,0.0,1.0,0.0,1.0,-0.5,-0.5,0.5,0.0,0.0,1.0,0.0,0.0,-0.5,0.5,0.5,-1.0,0.0,0.0,1.0,0.0,-0.5,0.5,-0.5,-1.0,0.0,0.0,1.0,1.0,-0.5,-0.5,-0.5,-1.0,0.0,0.0,0.0,1.0,-0.5,-0.5,-0.5,-1.0,0.0,0.0,0.0,1.0,-0.5,-0.5,0.5,-1.0,0.0,0.0,0.0,0.0,-0.5,0.5,0.5,-1.0,0.0,0.0,1.0,0.0,0.5,0.5,0.5,1.0,0.0,0.0,1.0,0.0,0.5,0.5,-0.5,1.0,0.0,0.0,1.0,1.0,0.5,-0.5,-0.5,1.0,0.0,0.0,0.0,1.0,0.5,-0.5,-0.5,1.0,0.0,0.0,0.0,1.0,0.5,-0.5,0.5,1.0,0.0,0.0,0.0,0.0,0.5,0.5,0.5,1.0,0.0,0.0,1.0,0.0,-0.5,-0.5,-0.5,0.0,-1.0,0.0,0.0,1.0,0.5,-0.5,-0.5,0.0,-1.0,0.0,1.0,1.0,0.5,-0.5,0.5,0.0,-1.0,0.0,1.0,0.0,0.5,-0.5,0.5,0.0,-1.0,0.0,1.0,0.0,-0.5,-0.5,0.5,0.0,-1.0,0.0,0.0,0.0,-0.5,-0.5,-0.5,0.0,-1.0,0.0,0.0,1.0,-0.5,0.5,-0.5,0.0,1.0,0.0,0.0,1.0,0.5,0.5,-0.5,0.0,1.0,0.0,1.0,1.0,0.5,0.5,0.5,0.0,1.0,0.0,1.0,0.0,0.5,0.5,0.5,0.0,1.0,0.0,1.0,0.0,-0.5,0.5,0.5,0.0,1.0,0.0,0.0,0.0,-0.5,0.5,-0.5,0.0,1.0,0.0,0.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_233_setSliderEvents,"Main","setSliderEvents",0x7b78f4c7,"Main.setSliderEvents","Main.hx",233,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_238_setSliderEvents,"Main","setSliderEvents",0x7b78f4c7,"Main.setSliderEvents","Main.hx",238,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_243_setSliderEvents,"Main","setSliderEvents",0x7b78f4c7,"Main.setSliderEvents","Main.hx",243,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_248_setSliderEvents,"Main","setSliderEvents",0x7b78f4c7,"Main.setSliderEvents","Main.hx",248,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_222_setSliderEvents,"Main","setSliderEvents",0x7b78f4c7,"Main.setSliderEvents","Main.hx",222,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_223_setSliderEvents,"Main","setSliderEvents",0x7b78f4c7,"Main.setSliderEvents","Main.hx",223,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_228_setSliderEvents,"Main","setSliderEvents",0x7b78f4c7,"Main.setSliderEvents","Main.hx",228,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_256_setSliderEvents,"Main","setSliderEvents",0x7b78f4c7,"Main.setSliderEvents","Main.hx",256,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_253_setSliderEvents,"Main","setSliderEvents",0x7b78f4c7,"Main.setSliderEvents","Main.hx",253,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_260_update,"Main","update",0xb7afa57e,"Main.update","Main.hx",260,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_273_onKeyDown,"Main","onKeyDown",0x547b59ed,"Main.onKeyDown","Main.hx",273,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_289_onKeyUp,"Main","onKeyUp",0xd96dbf26,"Main.onKeyUp","Main.hx",289,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_303_onMouseMove,"Main","onMouseMove",0x15ff3722,"Main.onMouseMove","Main.hx",303,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_306_render,"Main","render",0x35d38acb,"Main.render","Main.hx",306,0x087e5c05)
static const Float _hx_array_data_332f6459_34[] = {
	1.0,0.5,0.31,
};
static const Float _hx_array_data_332f6459_35[] = {
	1.0,1.0,1.0,
};
static const Float _hx_array_data_332f6459_36[] = {
	0.5,0.5,0.5,
};
static const Float _hx_array_data_332f6459_37[] = {
	1.0,1.0,1.0,
};
static const Float _hx_array_data_332f6459_38[] = {
	0.2,0.2,0.2,
};
static const Float _hx_array_data_332f6459_39[] = {
	0.5,0.5,0.5,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_55_main,"Main","main",0xed0e206e,"Main.main","Main.hx",55,0x087e5c05)

void Main_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_29_new)
HXLINE(  49)		this->initialized = false;
HXLINE(  29)		super::__construct();
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x431bf104) {
		if (inClassId<=(int)0x07825a7d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x07825a7d;
		} else {
			return inClassId==(int)0x431bf104;
		}
	} else {
		return inClassId==(int)0x7f8386d8;
	}
}

void Main_obj::onPreloadComplete(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_61_onPreloadComplete)
HXDLIN(  61)		::String _hx_switch_0 = this->_hx___window->context->type;
            		if (  (_hx_switch_0==HX_("opengl",6f,64,94,21)) ||  (_hx_switch_0==HX_("opengles",9d,f6,c9,fa)) ||  (_hx_switch_0==HX_("webgl",b9,4b,bc,c7)) ){
HXLINE(  63)			this->gl = this->_hx___window->context->webgl;
HXLINE(  64)			this->initialize(this->gl);
HXLINE(  62)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  66)			::haxe::Log_obj::trace(HX_("needs gl",08,83,de,3d),::hx::SourceInfo(HX_("Source/Main.hx",b1,67,fd,ea),66,HX_("Main",59,64,2f,33),HX_("onPreloadComplete",43,37,5d,5c)));
            		}
            		_hx_goto_1:;
            	}


void Main_obj::initialize( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		void _hx_run( ::peote::ui::interactive::UISlider uiSlider,Float value,Float percent){
            			HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_215_initialize)
HXLINE( 215)			::haxe::Log_obj::trace((((HX_("hSlider value:",40,ba,00,9d) + value) + HX_(", percent:",49,7c,74,b1)) + percent),::hx::SourceInfo(HX_("Source/Main.hx",b1,67,fd,ea),215,HX_("Main",59,64,2f,33),HX_("initialize",50,31,bb,ec)));
            		}
            		HX_END_LOCAL_FUNC3((void))

            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_70_initialize)
HXLINE(  71)		this->deltaTime = ((Float)0.0);
HXLINE(  72)		this->lastFrame = ((Float)0.0);
HXLINE(  74)		::Camera_obj::init();
HXLINE(  79)		this->cube =  ::SimpleCubeProgram_obj::__alloc( HX_CTX ,gl);
HXLINE(  80)		this->lightCube =  ::LightProgram_obj::__alloc( HX_CTX ,gl);
HXLINE(  82)		::Array< Float > vertices = ::Array_obj< Float >::fromData( _hx_array_data_332f6459_5,288);
HXLINE( 126)		 ::Dynamic elements = null();
HXDLIN( 126)		 ::haxe::io::Bytes buffer = null();
HXDLIN( 126)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 126)		 ::Dynamic len = null();
HXDLIN( 126)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 126)		if (::hx::IsNotNull( elements )) {
HXLINE( 126)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            		}
            		else {
HXLINE( 126)			if (::hx::IsNotNull( vertices )) {
HXLINE( 126)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 126)				_this->byteOffset = 0;
HXDLIN( 126)				_this->length = vertices->length;
HXDLIN( 126)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 126)				_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 126)				_this->copyFromArray(vertices,null());
HXDLIN( 126)				this1 = _this;
            			}
            			else {
HXLINE( 126)				if (::hx::IsNotNull( view )) {
HXLINE( 126)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 126)					 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 126)					int srcLength = view->length;
HXDLIN( 126)					int srcByteOffset = view->byteOffset;
HXDLIN( 126)					int srcElementSize = view->bytesPerElement;
HXDLIN( 126)					int elementSize = _this1->bytesPerElement;
HXDLIN( 126)					if ((view->type == _this1->type)) {
HXLINE( 126)						int srcLength1 = srcData->length;
HXDLIN( 126)						int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 126)						_this1->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 126)						_this1->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            					}
            					else {
HXLINE( 126)						HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            					}
HXDLIN( 126)					_this1->byteLength = (_this1->bytesPerElement * srcLength);
HXDLIN( 126)					_this1->byteOffset = 0;
HXDLIN( 126)					_this1->length = srcLength;
HXDLIN( 126)					this1 = _this1;
            				}
            				else {
HXLINE( 126)					if (::hx::IsNotNull( buffer )) {
HXLINE( 126)						 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 126)						int in_byteOffset = 0;
HXDLIN( 126)						if ((in_byteOffset < 0)) {
HXLINE( 126)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 126)						if ((::hx::Mod(in_byteOffset,_this2->bytesPerElement) != 0)) {
HXLINE( 126)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 126)						int bufferByteLength = buffer->length;
HXDLIN( 126)						int elementSize1 = _this2->bytesPerElement;
HXDLIN( 126)						int newByteLength = bufferByteLength;
HXDLIN( 126)						if (::hx::IsNull( len )) {
HXLINE( 126)							newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 126)							if ((::hx::Mod(bufferByteLength,_this2->bytesPerElement) != 0)) {
HXLINE( 126)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN( 126)							if ((newByteLength < 0)) {
HXLINE( 126)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
            						}
            						else {
HXLINE( 126)							newByteLength = (( (int)(len) ) * _this2->bytesPerElement);
HXDLIN( 126)							int newRange = (in_byteOffset + newByteLength);
HXDLIN( 126)							if ((newRange > bufferByteLength)) {
HXLINE( 126)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
            						}
HXDLIN( 126)						_this2->buffer = buffer;
HXDLIN( 126)						_this2->byteOffset = in_byteOffset;
HXDLIN( 126)						_this2->byteLength = newByteLength;
HXDLIN( 126)						_this2->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this2->bytesPerElement) )));
HXDLIN( 126)						this1 = _this2;
            					}
            					else {
HXLINE( 126)						HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            					}
            				}
            			}
            		}
HXDLIN( 126)		 ::lime::utils::ArrayBufferView verticesData = this1;
HXLINE( 128)		gl->enable(gl->DEPTH_TEST);
HXLINE( 131)		this->vbo = gl->createBuffer();
HXLINE( 134)		gl->bindBuffer(gl->ARRAY_BUFFER,this->vbo);
HXLINE( 135)		::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::bufferData(gl,gl->ARRAY_BUFFER,verticesData,gl->STATIC_DRAW);
HXLINE( 136)		{
HXLINE( 136)			 ::lime::graphics::opengl::GLObject buffer1 = null();
HXDLIN( 136)			gl->bindBuffer(gl->ARRAY_BUFFER,buffer1);
            		}
HXLINE( 138)		this->image = ::lime::utils::Assets_obj::getImage(HX_("assets/container2.png",d8,24,a2,89),null());
HXLINE( 141)		this->texture = gl->createTexture();
HXLINE( 142)		gl->bindTexture(gl->TEXTURE_2D,this->texture);
HXLINE( 145)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_S,gl->REPEAT);
HXLINE( 146)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_T,gl->REPEAT);
HXLINE( 148)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->LINEAR_MIPMAP_LINEAR);
HXLINE( 149)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MAG_FILTER,gl->LINEAR);
HXLINE( 150)		{
HXLINE( 150)			int target = gl->TEXTURE_2D;
HXDLIN( 150)			int internalformat = gl->RGB;
HXDLIN( 150)			int width = this->image->width;
HXDLIN( 150)			int height = this->image->height;
HXDLIN( 150)			int format = gl->RGB;
HXDLIN( 150)			int type = gl->UNSIGNED_BYTE;
HXDLIN( 150)			 ::lime::utils::ArrayBufferView srcData1 = ( ( ::lime::utils::ArrayBufferView)(this->image->get_src()) );
HXDLIN( 150)			{
HXLINE( 150)				::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),srcData1,null(),0);
HXDLIN( 150)				gl->texImage2D(target,0,internalformat,width,height,0,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            			}
            		}
HXLINE( 152)		gl->generateMipmap(gl->TEXTURE_2D);
HXLINE( 154)		this->image2 = ::lime::utils::Assets_obj::getImage(HX_("assets/specular.png",ca,0d,c8,ef),null());
HXLINE( 157)		this->texture2 = gl->createTexture();
HXLINE( 158)		gl->bindTexture(gl->TEXTURE_2D,this->texture2);
HXLINE( 161)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_S,gl->REPEAT);
HXLINE( 162)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_T,gl->REPEAT);
HXLINE( 164)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->LINEAR_MIPMAP_LINEAR);
HXLINE( 165)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MAG_FILTER,gl->LINEAR);
HXLINE( 166)		{
HXLINE( 166)			int target1 = gl->TEXTURE_2D;
HXDLIN( 166)			int internalformat1 = gl->RGB;
HXDLIN( 166)			int width1 = this->image->width;
HXDLIN( 166)			int height1 = this->image->height;
HXDLIN( 166)			int format1 = gl->RGB;
HXDLIN( 166)			int type1 = gl->UNSIGNED_BYTE;
HXDLIN( 166)			 ::lime::utils::ArrayBufferView srcData2 = ( ( ::lime::utils::ArrayBufferView)(this->image->get_src()) );
HXDLIN( 166)			{
HXLINE( 166)				::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),srcData2,null(),0);
HXDLIN( 166)				gl->texImage2D(target1,0,internalformat1,width1,height1,0,format1,type1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            			}
            		}
HXLINE( 168)		gl->generateMipmap(gl->TEXTURE_2D);
HXLINE( 170)		this->peoteView =  ::peote::view::PeoteView_obj::__alloc( HX_CTX ,this->_hx___window,null(),false);
HXLINE( 171)		int transparent = 0;
HXLINE( 172)		this->uiDisplay =  ::peote::ui::PeoteUIDisplay_obj::__alloc( HX_CTX ,10,10,(this->_hx___window->_hx___width - 20),(this->_hx___window->_hx___height - 20),transparent,null(),null(),null());
HXLINE( 173)		this->peoteView->addDisplay(this->uiDisplay,null(),null());
HXLINE( 175)		 ::peote::ui::style::RoundBorderStyle roundBorderStyle =  ::peote::ui::style::RoundBorderStyle_obj::__alloc( HX_CTX ,(int)1145324799,(int)-2004317953,((Float)3.0),((Float)20.0));
HXLINE( 182)		 ::peote::ui::config::_SliderConfig::SliderConfigImpl sliderConfig =  ::peote::ui::config::_SliderConfig::SliderConfigImpl_obj::__alloc( HX_CTX ,roundBorderStyle,roundBorderStyle->copy(-65281,null(),null(),null()),null(),null(),null(),null(),20,((Float)0.75),null(),((Float)0.5),null(),((Float)0.3),null(),null(),50,((Float)0.1),null(),null(),null(),40,20);
HXLINE( 208)		 ::peote::ui::interactive::UISlider hSlider =  ::peote::ui::interactive::UISlider_obj::__alloc( HX_CTX ,80,10,500,40,null(),sliderConfig);
HXLINE( 209)		hSlider->valueStart = ( (Float)(-5) );
HXLINE( 210)		hSlider->valueEnd = ( (Float)(10) );
HXLINE( 211)		this->setSliderEvents(hSlider);
HXLINE( 212)		this->uiDisplay->add(hSlider);
HXLINE( 214)		hSlider->onChange =  ::Dynamic(new _hx_Closure_0());
HXLINE( 218)		::peote::ui::PeoteUIDisplay_obj::registerEvents(this->_hx___window);
HXLINE( 219)		this->initialized = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,initialize,(void))

void Main_obj::setSliderEvents( ::peote::ui::interactive::UISlider slider){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(2)
            		void _hx_run( ::peote::ui::interactive::UISlider uiSlider, ::Dynamic e){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_233_setSliderEvents)
HXLINE( 234)			uiSlider->dragger->style->__SetField(HX_("color",63,71,5c,4a),-16776961,::hx::paccDynamic);
HXLINE( 235)			if (::hx::IsNotNull( uiSlider->dragger )) {
HXLINE( 235)				 ::peote::ui::interactive::UIElement _this = uiSlider->dragger;
HXDLIN( 235)				if (::hx::IsNotNull( _this->styleElement )) {
HXLINE( 235)					::peote::ui::style::interfaces::StyleElement_obj::setStyle(_this->styleElement,_this->style);
HXDLIN( 235)					bool _hx_tmp;
HXDLIN( 235)					if (_this->isVisible) {
HXLINE( 235)						_hx_tmp = _this->styleIsVisible;
            					}
            					else {
HXLINE( 235)						_hx_tmp = false;
            					}
HXDLIN( 235)					if (_hx_tmp) {
HXLINE( 235)						::peote::ui::style::interfaces::StyleProgram_obj::update(_this->styleProgram,_this->styleElement);
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(2)
            		void _hx_run( ::peote::ui::interactive::UISlider uiSlider, ::Dynamic e){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_238_setSliderEvents)
HXLINE( 239)			uiSlider->dragger->style->__SetField(HX_("color",63,71,5c,4a),-65281,::hx::paccDynamic);
HXLINE( 240)			if (::hx::IsNotNull( uiSlider->dragger )) {
HXLINE( 240)				 ::peote::ui::interactive::UIElement _this = uiSlider->dragger;
HXDLIN( 240)				if (::hx::IsNotNull( _this->styleElement )) {
HXLINE( 240)					::peote::ui::style::interfaces::StyleElement_obj::setStyle(_this->styleElement,_this->style);
HXDLIN( 240)					bool _hx_tmp;
HXDLIN( 240)					if (_this->isVisible) {
HXLINE( 240)						_hx_tmp = _this->styleIsVisible;
            					}
            					else {
HXLINE( 240)						_hx_tmp = false;
            					}
HXDLIN( 240)					if (_hx_tmp) {
HXLINE( 240)						::peote::ui::style::interfaces::StyleProgram_obj::update(_this->styleProgram,_this->styleElement);
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(2)
            		void _hx_run( ::peote::ui::interactive::UISlider uiSlider, ::Dynamic e){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_243_setSliderEvents)
HXLINE( 244)			uiSlider->dragger->style->__SetField(HX_("borderColor",d7,3c,d5,d6),-65281,::hx::paccDynamic);
HXLINE( 245)			if (::hx::IsNotNull( uiSlider->dragger )) {
HXLINE( 245)				 ::peote::ui::interactive::UIElement _this = uiSlider->dragger;
HXDLIN( 245)				if (::hx::IsNotNull( _this->styleElement )) {
HXLINE( 245)					::peote::ui::style::interfaces::StyleElement_obj::setStyle(_this->styleElement,_this->style);
HXDLIN( 245)					bool _hx_tmp;
HXDLIN( 245)					if (_this->isVisible) {
HXLINE( 245)						_hx_tmp = _this->styleIsVisible;
            					}
            					else {
HXLINE( 245)						_hx_tmp = false;
            					}
HXDLIN( 245)					if (_hx_tmp) {
HXLINE( 245)						::peote::ui::style::interfaces::StyleProgram_obj::update(_this->styleProgram,_this->styleElement);
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(2)
            		void _hx_run( ::peote::ui::interactive::UISlider uiSlider, ::Dynamic e){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_248_setSliderEvents)
HXLINE( 249)			uiSlider->dragger->style->__SetField(HX_("borderColor",d7,3c,d5,d6),(int)-2004317953,::hx::paccDynamic);
HXLINE( 250)			if (::hx::IsNotNull( uiSlider->dragger )) {
HXLINE( 250)				 ::peote::ui::interactive::UIElement _this = uiSlider->dragger;
HXDLIN( 250)				if (::hx::IsNotNull( _this->styleElement )) {
HXLINE( 250)					::peote::ui::style::interfaces::StyleElement_obj::setStyle(_this->styleElement,_this->style);
HXDLIN( 250)					bool _hx_tmp;
HXDLIN( 250)					if (_this->isVisible) {
HXLINE( 250)						_hx_tmp = _this->styleIsVisible;
            					}
            					else {
HXLINE( 250)						_hx_tmp = false;
            					}
HXDLIN( 250)					if (_hx_tmp) {
HXLINE( 250)						::peote::ui::style::interfaces::StyleProgram_obj::update(_this->styleProgram,_this->styleElement);
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_222_setSliderEvents)
HXLINE( 223)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			void _hx_run( ::peote::ui::interactive::UISlider uiSlider, ::Dynamic e){
            				HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_223_setSliderEvents)
HXLINE( 224)				uiSlider->background->style->__SetField(HX_("color",63,71,5c,4a),16711935,::hx::paccDynamic);
HXLINE( 225)				if (::hx::IsNotNull( uiSlider->background )) {
HXLINE( 225)					 ::peote::ui::interactive::UIElement _this = uiSlider->background;
HXDLIN( 225)					if (::hx::IsNotNull( _this->styleElement )) {
HXLINE( 225)						::peote::ui::style::interfaces::StyleElement_obj::setStyle(_this->styleElement,_this->style);
HXDLIN( 225)						bool f;
HXDLIN( 225)						if (_this->isVisible) {
HXLINE( 225)							f = _this->styleIsVisible;
            						}
            						else {
HXLINE( 225)							f = false;
            						}
HXDLIN( 225)						if (f) {
HXLINE( 225)							::peote::ui::style::interfaces::StyleProgram_obj::update(_this->styleProgram,_this->styleElement);
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 223)			 ::Dynamic f =  ::Dynamic(new _hx_Closure_0());
HXDLIN( 223)			if (::hx::IsNotNull( f )) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::peote::ui::interactive::UISlider,a1, ::Dynamic,_g) HXARGC(1)
            				void _hx_run( ::Dynamic a2){
            					HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_223_setSliderEvents)
HXLINE( 223)					_g(a1,a2);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 223)				 ::Dynamic _g = f;
HXDLIN( 223)				 ::peote::ui::interactive::UISlider a1 = slider;
HXDLIN( 223)				slider->pointerOver =  ::Dynamic(new _hx_Closure_1(a1,_g));
HXDLIN( 223)				if ((slider->hasMoveEvent == 0)) {
HXLINE( 223)					slider->addPickableMove();
            				}
HXDLIN( 223)				 ::peote::ui::interactive::UISlider slider1 = slider;
HXDLIN( 223)				slider1->hasMoveEvent = (slider1->hasMoveEvent | 1);
            			}
            			else {
HXLINE( 223)				if (((slider->hasMoveEvent & 1) > 0)) {
HXLINE( 223)					 ::peote::ui::interactive::UISlider slider2 = slider;
HXDLIN( 223)					slider2->hasMoveEvent = (slider2->hasMoveEvent & -2);
HXDLIN( 223)					if ((slider->hasMoveEvent == 0)) {
HXLINE( 223)						slider->removePickableMove();
            					}
HXDLIN( 223)					slider->pointerOver = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
            				}
            			}
            		}
HXLINE( 228)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            			void _hx_run( ::peote::ui::interactive::UISlider uiSlider, ::Dynamic e){
            				HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_228_setSliderEvents)
HXLINE( 229)				uiSlider->background->style->__SetField(HX_("color",63,71,5c,4a),(int)1145324799,::hx::paccDynamic);
HXLINE( 230)				if (::hx::IsNotNull( uiSlider->background )) {
HXLINE( 230)					 ::peote::ui::interactive::UIElement _this = uiSlider->background;
HXDLIN( 230)					if (::hx::IsNotNull( _this->styleElement )) {
HXLINE( 230)						::peote::ui::style::interfaces::StyleElement_obj::setStyle(_this->styleElement,_this->style);
HXDLIN( 230)						bool f;
HXDLIN( 230)						if (_this->isVisible) {
HXLINE( 230)							f = _this->styleIsVisible;
            						}
            						else {
HXLINE( 230)							f = false;
            						}
HXDLIN( 230)						if (f) {
HXLINE( 230)							::peote::ui::style::interfaces::StyleProgram_obj::update(_this->styleProgram,_this->styleElement);
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 228)			 ::Dynamic f1 =  ::Dynamic(new _hx_Closure_2());
HXDLIN( 228)			if (::hx::IsNotNull( f1 )) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::peote::ui::interactive::UISlider,a11, ::Dynamic,_g1) HXARGC(1)
            				void _hx_run( ::Dynamic a2){
            					HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_228_setSliderEvents)
HXLINE( 228)					_g1(a11,a2);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 228)				 ::Dynamic _g1 = f1;
HXDLIN( 228)				 ::peote::ui::interactive::UISlider a11 = slider;
HXDLIN( 228)				slider->pointerOut =  ::Dynamic(new _hx_Closure_3(a11,_g1));
HXDLIN( 228)				if ((slider->hasMoveEvent == 0)) {
HXLINE( 228)					slider->addPickableMove();
            				}
HXDLIN( 228)				 ::peote::ui::interactive::UISlider slider3 = slider;
HXDLIN( 228)				slider3->hasMoveEvent = (slider3->hasMoveEvent | 2);
            			}
            			else {
HXLINE( 228)				if (((slider->hasMoveEvent & 2) > 0)) {
HXLINE( 228)					 ::peote::ui::interactive::UISlider slider4 = slider;
HXDLIN( 228)					slider4->hasMoveEvent = (slider4->hasMoveEvent & -3);
HXDLIN( 228)					if ((slider->hasMoveEvent == 0)) {
HXLINE( 228)						slider->removePickableMove();
            					}
HXDLIN( 228)					slider->pointerOut = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
            				}
            			}
            		}
HXLINE( 233)		slider->onDraggerPointerOver =  ::Dynamic(new _hx_Closure_4());
HXLINE( 238)		slider->onDraggerPointerOut =  ::Dynamic(new _hx_Closure_5());
HXLINE( 243)		slider->onDraggerPointerDown =  ::Dynamic(new _hx_Closure_6());
HXLINE( 248)		slider->onDraggerPointerUp =  ::Dynamic(new _hx_Closure_7());
HXLINE( 253)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(2)
            			void _hx_run( ::peote::ui::interactive::UISlider uiSlider, ::Dynamic e){
            				HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_256_setSliderEvents)
HXLINE( 256)				bool triggerOnChange = true;
HXDLIN( 256)				{
HXLINE( 256)					Float percent;
HXDLIN( 256)					if (uiSlider->reverse) {
HXLINE( 256)						percent = (((Float)1.0) - uiSlider->_percent);
            					}
            					else {
HXLINE( 256)						percent = uiSlider->_percent;
            					}
HXDLIN( 256)					int percent1;
HXDLIN( 256)					if (::hx::IsGreater( e->__Field(HX_("deltaY",61,11,e4,6a),::hx::paccDynamic),0 )) {
HXLINE( 256)						percent1 = 1;
            					}
            					else {
HXLINE( 256)						percent1 = -1;
            					}
HXDLIN( 256)					Float percent2 = (percent - (( (Float)(percent1) ) * ((Float)0.05)));
HXDLIN( 256)					if ((percent2 < ((Float)0.0))) {
HXLINE( 256)						percent2 = ((Float)0.0);
            					}
            					else {
HXLINE( 256)						if ((percent2 > ((Float)1.0))) {
HXLINE( 256)							percent2 = ((Float)1.0);
            						}
            					}
HXDLIN( 256)					uiSlider->_percent = percent2;
HXDLIN( 256)					if (!(uiSlider->dragger->isDragging)) {
HXLINE( 256)						if (uiSlider->isVertical) {
HXLINE( 256)							{
HXLINE( 256)								 ::peote::ui::interactive::UIElement _this = uiSlider->dragger;
HXDLIN( 256)								int w = uiSlider->height;
HXDLIN( 256)								int h;
HXDLIN( 256)								if (!(uiSlider->isVertical)) {
HXLINE( 256)									h = w;
            								}
            								else {
HXLINE( 256)									if (::hx::IsNull( uiSlider->draggerLengthPercent )) {
HXLINE( 256)										if (::hx::IsNotNull( uiSlider->draggerLength )) {
HXLINE( 256)											h = ( (int)(uiSlider->draggerLength) );
            										}
            										else {
HXLINE( 256)											h = uiSlider->width;
            										}
            									}
            									else {
HXLINE( 256)										Float h1;
HXDLIN( 256)										if (::hx::IsNull( uiSlider->draggerLength )) {
HXLINE( 256)											h1 = (( (Float)(((w - uiSlider->draggSpaceStart) - uiSlider->draggSpaceEnd)) ) * ( (Float)(uiSlider->draggerLengthPercent) ));
            										}
            										else {
HXLINE( 256)											h1 = ::Math_obj::max(( (Float)(uiSlider->draggerLength) ),(( (Float)(((w - uiSlider->draggSpaceStart) - uiSlider->draggSpaceEnd)) ) * ( (Float)(uiSlider->draggerLengthPercent) )));
            										}
HXDLIN( 256)										h = ::Std_obj::_hx_int(h1);
            									}
            								}
HXDLIN( 256)								if ((h != _this->height)) {
HXLINE( 256)									if (::hx::IsNotNull( _this->resizeHeight )) {
HXLINE( 256)										int oldHeight = _this->height;
HXDLIN( 256)										_this->resizeHeight((_this->height = h),(h - oldHeight));
            									}
            									else {
HXLINE( 256)										_this->height = h;
            									}
            								}
            							}
HXDLIN( 256)							int pos = uiSlider->y;
HXDLIN( 256)							int f;
HXDLIN( 256)							if (!(uiSlider->isVertical)) {
HXLINE( 256)								f = pos;
            							}
            							else {
HXLINE( 256)								int f1 = (pos + uiSlider->draggSpaceStart);
HXDLIN( 256)								Float f2;
HXDLIN( 256)								if (uiSlider->reverse) {
HXLINE( 256)									f2 = (((Float)1.0) - uiSlider->_percent);
            								}
            								else {
HXLINE( 256)									f2 = uiSlider->_percent;
            								}
HXDLIN( 256)								f = (f1 + ::Std_obj::_hx_int((( (Float)((((uiSlider->height - uiSlider->dragger->height) - uiSlider->draggSpaceStart) - uiSlider->draggSpaceEnd)) ) * f2)));
            							}
HXDLIN( 256)							uiSlider->dragger->y = f;
            						}
            						else {
HXLINE( 256)							{
HXLINE( 256)								 ::peote::ui::interactive::UIElement _this1 = uiSlider->dragger;
HXDLIN( 256)								int w1 = uiSlider->width;
HXDLIN( 256)								int w2;
HXDLIN( 256)								if (uiSlider->isVertical) {
HXLINE( 256)									w2 = w1;
            								}
            								else {
HXLINE( 256)									if (::hx::IsNull( uiSlider->draggerLengthPercent )) {
HXLINE( 256)										if (::hx::IsNotNull( uiSlider->draggerLength )) {
HXLINE( 256)											w2 = ( (int)(uiSlider->draggerLength) );
            										}
            										else {
HXLINE( 256)											w2 = uiSlider->height;
            										}
            									}
            									else {
HXLINE( 256)										Float w3;
HXDLIN( 256)										if (::hx::IsNull( uiSlider->draggerLength )) {
HXLINE( 256)											w3 = (( (Float)(((w1 - uiSlider->draggSpaceStart) - uiSlider->draggSpaceEnd)) ) * ( (Float)(uiSlider->draggerLengthPercent) ));
            										}
            										else {
HXLINE( 256)											w3 = ::Math_obj::max(( (Float)(uiSlider->draggerLength) ),(( (Float)(((w1 - uiSlider->draggSpaceStart) - uiSlider->draggSpaceEnd)) ) * ( (Float)(uiSlider->draggerLengthPercent) )));
            										}
HXDLIN( 256)										w2 = ::Std_obj::_hx_int(w3);
            									}
            								}
HXDLIN( 256)								if ((w2 != _this1->width)) {
HXLINE( 256)									if (::hx::IsNotNull( _this1->resizeWidth )) {
HXLINE( 256)										int oldWidth = _this1->width;
HXDLIN( 256)										_this1->resizeWidth((_this1->width = w2),(w2 - oldWidth));
            									}
            									else {
HXLINE( 256)										_this1->width = w2;
            									}
            								}
            							}
HXDLIN( 256)							int pos1 = uiSlider->x;
HXDLIN( 256)							int f3;
HXDLIN( 256)							if (uiSlider->isVertical) {
HXLINE( 256)								f3 = pos1;
            							}
            							else {
HXLINE( 256)								int f4 = (pos1 + uiSlider->draggSpaceStart);
HXDLIN( 256)								Float f5;
HXDLIN( 256)								if (uiSlider->reverse) {
HXLINE( 256)									f5 = (((Float)1.0) - uiSlider->_percent);
            								}
            								else {
HXLINE( 256)									f5 = uiSlider->_percent;
            								}
HXDLIN( 256)								f3 = (f4 + ::Std_obj::_hx_int((( (Float)((((uiSlider->width - uiSlider->dragger->width) - uiSlider->draggSpaceStart) - uiSlider->draggSpaceEnd)) ) * f5)));
            							}
HXDLIN( 256)							uiSlider->dragger->x = f3;
            						}
HXDLIN( 256)						{
HXLINE( 256)							 ::peote::ui::interactive::UIElement _this2 = uiSlider->dragger;
HXDLIN( 256)							bool f6;
HXDLIN( 256)							f6 = !(_this2->isDragging);
HXDLIN( 256)							if (f6) {
HXLINE( 256)								bool f7;
HXDLIN( 256)								if (uiSlider->masked) {
HXLINE( 256)									int _x = (uiSlider->x + uiSlider->maskX);
HXDLIN( 256)									int _y = (uiSlider->y + uiSlider->maskY);
HXDLIN( 256)									int _width = uiSlider->maskWidth;
HXDLIN( 256)									int _height = uiSlider->maskHeight;
HXDLIN( 256)									bool _isVisible = uiSlider->isVisible;
HXDLIN( 256)									if ((_this2->x < _x)) {
HXLINE( 256)										if (((_this2->x + _this2->width) <= _x)) {
HXLINE( 256)											_this2->maskWidth = 0;
HXDLIN( 256)											bool f8;
HXDLIN( 256)											if (_isVisible) {
HXLINE( 256)												f8 = _this2->isVisible;
            											}
            											else {
HXLINE( 256)												f8 = false;
            											}
HXDLIN( 256)											if (f8) {
HXLINE( 256)												_this2->uiDisplay->remove(_this2);
            											}
HXDLIN( 256)											f7 = false;
            										}
            										else {
HXLINE( 256)											_this2->maskX = (_x - _this2->x);
HXDLIN( 256)											if (((_this2->x + _this2->width) >= (_x + _width))) {
HXLINE( 256)												_this2->maskWidth = _width;
            											}
            											else {
HXLINE( 256)												_this2->maskWidth = (_this2->width - _this2->maskX);
            											}
HXDLIN( 256)											if ((_this2->y < _y)) {
HXLINE( 256)												if (((_this2->y + _this2->height) <= _y)) {
HXLINE( 256)													_this2->maskHeight = 0;
HXDLIN( 256)													bool f9;
HXDLIN( 256)													if (_isVisible) {
HXLINE( 256)														f9 = _this2->isVisible;
            													}
            													else {
HXLINE( 256)														f9 = false;
            													}
HXDLIN( 256)													if (f9) {
HXLINE( 256)														_this2->uiDisplay->remove(_this2);
            													}
HXDLIN( 256)													f7 = false;
            												}
            												else {
HXLINE( 256)													_this2->maskY = (_y - _this2->y);
HXDLIN( 256)													if (((_this2->y + _this2->height) >= (_y + _height))) {
HXLINE( 256)														_this2->maskHeight = _height;
            													}
            													else {
HXLINE( 256)														_this2->maskHeight = (_this2->height - _this2->maskY);
            													}
HXDLIN( 256)													bool f10;
HXDLIN( 256)													if (_isVisible) {
HXLINE( 256)														f10 = !(_this2->isVisible);
            													}
            													else {
HXLINE( 256)														f10 = false;
            													}
HXDLIN( 256)													if (f10) {
HXLINE( 256)														_this2->uiDisplay->add(_this2);
            													}
HXDLIN( 256)													f7 = true;
            												}
            											}
            											else {
HXLINE( 256)												if (((_this2->y + _this2->height) > (_y + _height))) {
HXLINE( 256)													if ((_this2->y >= (_y + _height))) {
HXLINE( 256)														_this2->maskHeight = 0;
HXDLIN( 256)														bool f11;
HXDLIN( 256)														if (_isVisible) {
HXLINE( 256)															f11 = _this2->isVisible;
            														}
            														else {
HXLINE( 256)															f11 = false;
            														}
HXDLIN( 256)														if (f11) {
HXLINE( 256)															_this2->uiDisplay->remove(_this2);
            														}
HXDLIN( 256)														f7 = false;
            													}
            													else {
HXLINE( 256)														_this2->maskY = 0;
HXDLIN( 256)														_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y + _height)));
HXDLIN( 256)														bool f12;
HXDLIN( 256)														if (_isVisible) {
HXLINE( 256)															f12 = !(_this2->isVisible);
            														}
            														else {
HXLINE( 256)															f12 = false;
            														}
HXDLIN( 256)														if (f12) {
HXLINE( 256)															_this2->uiDisplay->add(_this2);
            														}
HXDLIN( 256)														f7 = true;
            													}
            												}
            												else {
HXLINE( 256)													_this2->maskY = 0;
HXDLIN( 256)													_this2->maskHeight = _this2->height;
HXDLIN( 256)													bool f13;
HXDLIN( 256)													if (_isVisible) {
HXLINE( 256)														f13 = !(_this2->isVisible);
            													}
            													else {
HXLINE( 256)														f13 = false;
            													}
HXDLIN( 256)													if (f13) {
HXLINE( 256)														_this2->uiDisplay->add(_this2);
            													}
HXDLIN( 256)													f7 = true;
            												}
            											}
            										}
            									}
            									else {
HXLINE( 256)										if (((_this2->x + _this2->width) > (_x + _width))) {
HXLINE( 256)											if ((_this2->x >= (_x + _width))) {
HXLINE( 256)												_this2->maskWidth = 0;
HXDLIN( 256)												bool f14;
HXDLIN( 256)												if (_isVisible) {
HXLINE( 256)													f14 = _this2->isVisible;
            												}
            												else {
HXLINE( 256)													f14 = false;
            												}
HXDLIN( 256)												if (f14) {
HXLINE( 256)													_this2->uiDisplay->remove(_this2);
            												}
HXDLIN( 256)												f7 = false;
            											}
            											else {
HXLINE( 256)												_this2->maskX = 0;
HXDLIN( 256)												_this2->maskWidth = (_this2->width - ((_this2->x + _this2->width) - (_x + _width)));
HXDLIN( 256)												if ((_this2->y < _y)) {
HXLINE( 256)													if (((_this2->y + _this2->height) <= _y)) {
HXLINE( 256)														_this2->maskHeight = 0;
HXDLIN( 256)														bool f15;
HXDLIN( 256)														if (_isVisible) {
HXLINE( 256)															f15 = _this2->isVisible;
            														}
            														else {
HXLINE( 256)															f15 = false;
            														}
HXDLIN( 256)														if (f15) {
HXLINE( 256)															_this2->uiDisplay->remove(_this2);
            														}
HXDLIN( 256)														f7 = false;
            													}
            													else {
HXLINE( 256)														_this2->maskY = (_y - _this2->y);
HXDLIN( 256)														if (((_this2->y + _this2->height) >= (_y + _height))) {
HXLINE( 256)															_this2->maskHeight = _height;
            														}
            														else {
HXLINE( 256)															_this2->maskHeight = (_this2->height - _this2->maskY);
            														}
HXDLIN( 256)														bool f16;
HXDLIN( 256)														if (_isVisible) {
HXLINE( 256)															f16 = !(_this2->isVisible);
            														}
            														else {
HXLINE( 256)															f16 = false;
            														}
HXDLIN( 256)														if (f16) {
HXLINE( 256)															_this2->uiDisplay->add(_this2);
            														}
HXDLIN( 256)														f7 = true;
            													}
            												}
            												else {
HXLINE( 256)													if (((_this2->y + _this2->height) > (_y + _height))) {
HXLINE( 256)														if ((_this2->y >= (_y + _height))) {
HXLINE( 256)															_this2->maskHeight = 0;
HXDLIN( 256)															bool f17;
HXDLIN( 256)															if (_isVisible) {
HXLINE( 256)																f17 = _this2->isVisible;
            															}
            															else {
HXLINE( 256)																f17 = false;
            															}
HXDLIN( 256)															if (f17) {
HXLINE( 256)																_this2->uiDisplay->remove(_this2);
            															}
HXDLIN( 256)															f7 = false;
            														}
            														else {
HXLINE( 256)															_this2->maskY = 0;
HXDLIN( 256)															_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y + _height)));
HXDLIN( 256)															bool f18;
HXDLIN( 256)															if (_isVisible) {
HXLINE( 256)																f18 = !(_this2->isVisible);
            															}
            															else {
HXLINE( 256)																f18 = false;
            															}
HXDLIN( 256)															if (f18) {
HXLINE( 256)																_this2->uiDisplay->add(_this2);
            															}
HXDLIN( 256)															f7 = true;
            														}
            													}
            													else {
HXLINE( 256)														_this2->maskY = 0;
HXDLIN( 256)														_this2->maskHeight = _this2->height;
HXDLIN( 256)														bool f19;
HXDLIN( 256)														if (_isVisible) {
HXLINE( 256)															f19 = !(_this2->isVisible);
            														}
            														else {
HXLINE( 256)															f19 = false;
            														}
HXDLIN( 256)														if (f19) {
HXLINE( 256)															_this2->uiDisplay->add(_this2);
            														}
HXDLIN( 256)														f7 = true;
            													}
            												}
            											}
            										}
            										else {
HXLINE( 256)											_this2->maskX = 0;
HXDLIN( 256)											_this2->maskWidth = _this2->width;
HXDLIN( 256)											if ((_this2->y < _y)) {
HXLINE( 256)												if (((_this2->y + _this2->height) <= _y)) {
HXLINE( 256)													_this2->maskHeight = 0;
HXDLIN( 256)													bool f20;
HXDLIN( 256)													if (_isVisible) {
HXLINE( 256)														f20 = _this2->isVisible;
            													}
            													else {
HXLINE( 256)														f20 = false;
            													}
HXDLIN( 256)													if (f20) {
HXLINE( 256)														_this2->uiDisplay->remove(_this2);
            													}
HXDLIN( 256)													f7 = false;
            												}
            												else {
HXLINE( 256)													_this2->maskY = (_y - _this2->y);
HXDLIN( 256)													if (((_this2->y + _this2->height) >= (_y + _height))) {
HXLINE( 256)														_this2->maskHeight = _height;
            													}
            													else {
HXLINE( 256)														_this2->maskHeight = (_this2->height - _this2->maskY);
            													}
HXDLIN( 256)													bool f21;
HXDLIN( 256)													if (_isVisible) {
HXLINE( 256)														f21 = !(_this2->isVisible);
            													}
            													else {
HXLINE( 256)														f21 = false;
            													}
HXDLIN( 256)													if (f21) {
HXLINE( 256)														_this2->uiDisplay->add(_this2);
            													}
HXDLIN( 256)													f7 = true;
            												}
            											}
            											else {
HXLINE( 256)												if (((_this2->y + _this2->height) > (_y + _height))) {
HXLINE( 256)													if ((_this2->y >= (_y + _height))) {
HXLINE( 256)														_this2->maskHeight = 0;
HXDLIN( 256)														bool f22;
HXDLIN( 256)														if (_isVisible) {
HXLINE( 256)															f22 = _this2->isVisible;
            														}
            														else {
HXLINE( 256)															f22 = false;
            														}
HXDLIN( 256)														if (f22) {
HXLINE( 256)															_this2->uiDisplay->remove(_this2);
            														}
HXDLIN( 256)														f7 = false;
            													}
            													else {
HXLINE( 256)														_this2->maskY = 0;
HXDLIN( 256)														_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y + _height)));
HXDLIN( 256)														bool f23;
HXDLIN( 256)														if (_isVisible) {
HXLINE( 256)															f23 = !(_this2->isVisible);
            														}
            														else {
HXLINE( 256)															f23 = false;
            														}
HXDLIN( 256)														if (f23) {
HXLINE( 256)															_this2->uiDisplay->add(_this2);
            														}
HXDLIN( 256)														f7 = true;
            													}
            												}
            												else {
HXLINE( 256)													_this2->maskY = 0;
HXDLIN( 256)													_this2->maskHeight = _this2->height;
HXDLIN( 256)													bool f24;
HXDLIN( 256)													if (_isVisible) {
HXLINE( 256)														f24 = !(_this2->isVisible);
            													}
            													else {
HXLINE( 256)														f24 = false;
            													}
HXDLIN( 256)													if (f24) {
HXLINE( 256)														_this2->uiDisplay->add(_this2);
            													}
HXDLIN( 256)													f7 = false;
            												}
            											}
            										}
            									}
            								}
            								else {
HXLINE( 256)									int _x1 = uiSlider->x;
HXDLIN( 256)									int _y1 = uiSlider->y;
HXDLIN( 256)									int _width1 = uiSlider->width;
HXDLIN( 256)									int _height1 = uiSlider->height;
HXDLIN( 256)									bool _isVisible1 = uiSlider->isVisible;
HXDLIN( 256)									if ((_this2->x < _x1)) {
HXLINE( 256)										if (((_this2->x + _this2->width) <= _x1)) {
HXLINE( 256)											_this2->maskWidth = 0;
HXDLIN( 256)											bool f25;
HXDLIN( 256)											if (_isVisible1) {
HXLINE( 256)												f25 = _this2->isVisible;
            											}
            											else {
HXLINE( 256)												f25 = false;
            											}
HXDLIN( 256)											if (f25) {
HXLINE( 256)												_this2->uiDisplay->remove(_this2);
            											}
HXDLIN( 256)											f7 = false;
            										}
            										else {
HXLINE( 256)											_this2->maskX = (_x1 - _this2->x);
HXDLIN( 256)											if (((_this2->x + _this2->width) >= (_x1 + _width1))) {
HXLINE( 256)												_this2->maskWidth = _width1;
            											}
            											else {
HXLINE( 256)												_this2->maskWidth = (_this2->width - _this2->maskX);
            											}
HXDLIN( 256)											if ((_this2->y < _y1)) {
HXLINE( 256)												if (((_this2->y + _this2->height) <= _y1)) {
HXLINE( 256)													_this2->maskHeight = 0;
HXDLIN( 256)													bool f26;
HXDLIN( 256)													if (_isVisible1) {
HXLINE( 256)														f26 = _this2->isVisible;
            													}
            													else {
HXLINE( 256)														f26 = false;
            													}
HXDLIN( 256)													if (f26) {
HXLINE( 256)														_this2->uiDisplay->remove(_this2);
            													}
HXDLIN( 256)													f7 = false;
            												}
            												else {
HXLINE( 256)													_this2->maskY = (_y1 - _this2->y);
HXDLIN( 256)													if (((_this2->y + _this2->height) >= (_y1 + _height1))) {
HXLINE( 256)														_this2->maskHeight = _height1;
            													}
            													else {
HXLINE( 256)														_this2->maskHeight = (_this2->height - _this2->maskY);
            													}
HXDLIN( 256)													bool f27;
HXDLIN( 256)													if (_isVisible1) {
HXLINE( 256)														f27 = !(_this2->isVisible);
            													}
            													else {
HXLINE( 256)														f27 = false;
            													}
HXDLIN( 256)													if (f27) {
HXLINE( 256)														_this2->uiDisplay->add(_this2);
            													}
HXDLIN( 256)													f7 = true;
            												}
            											}
            											else {
HXLINE( 256)												if (((_this2->y + _this2->height) > (_y1 + _height1))) {
HXLINE( 256)													if ((_this2->y >= (_y1 + _height1))) {
HXLINE( 256)														_this2->maskHeight = 0;
HXDLIN( 256)														bool f28;
HXDLIN( 256)														if (_isVisible1) {
HXLINE( 256)															f28 = _this2->isVisible;
            														}
            														else {
HXLINE( 256)															f28 = false;
            														}
HXDLIN( 256)														if (f28) {
HXLINE( 256)															_this2->uiDisplay->remove(_this2);
            														}
HXDLIN( 256)														f7 = false;
            													}
            													else {
HXLINE( 256)														_this2->maskY = 0;
HXDLIN( 256)														_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y1 + _height1)));
HXDLIN( 256)														bool f29;
HXDLIN( 256)														if (_isVisible1) {
HXLINE( 256)															f29 = !(_this2->isVisible);
            														}
            														else {
HXLINE( 256)															f29 = false;
            														}
HXDLIN( 256)														if (f29) {
HXLINE( 256)															_this2->uiDisplay->add(_this2);
            														}
HXDLIN( 256)														f7 = true;
            													}
            												}
            												else {
HXLINE( 256)													_this2->maskY = 0;
HXDLIN( 256)													_this2->maskHeight = _this2->height;
HXDLIN( 256)													bool f30;
HXDLIN( 256)													if (_isVisible1) {
HXLINE( 256)														f30 = !(_this2->isVisible);
            													}
            													else {
HXLINE( 256)														f30 = false;
            													}
HXDLIN( 256)													if (f30) {
HXLINE( 256)														_this2->uiDisplay->add(_this2);
            													}
HXDLIN( 256)													f7 = true;
            												}
            											}
            										}
            									}
            									else {
HXLINE( 256)										if (((_this2->x + _this2->width) > (_x1 + _width1))) {
HXLINE( 256)											if ((_this2->x >= (_x1 + _width1))) {
HXLINE( 256)												_this2->maskWidth = 0;
HXDLIN( 256)												bool f31;
HXDLIN( 256)												if (_isVisible1) {
HXLINE( 256)													f31 = _this2->isVisible;
            												}
            												else {
HXLINE( 256)													f31 = false;
            												}
HXDLIN( 256)												if (f31) {
HXLINE( 256)													_this2->uiDisplay->remove(_this2);
            												}
HXDLIN( 256)												f7 = false;
            											}
            											else {
HXLINE( 256)												_this2->maskX = 0;
HXDLIN( 256)												_this2->maskWidth = (_this2->width - ((_this2->x + _this2->width) - (_x1 + _width1)));
HXDLIN( 256)												if ((_this2->y < _y1)) {
HXLINE( 256)													if (((_this2->y + _this2->height) <= _y1)) {
HXLINE( 256)														_this2->maskHeight = 0;
HXDLIN( 256)														bool f32;
HXDLIN( 256)														if (_isVisible1) {
HXLINE( 256)															f32 = _this2->isVisible;
            														}
            														else {
HXLINE( 256)															f32 = false;
            														}
HXDLIN( 256)														if (f32) {
HXLINE( 256)															_this2->uiDisplay->remove(_this2);
            														}
HXDLIN( 256)														f7 = false;
            													}
            													else {
HXLINE( 256)														_this2->maskY = (_y1 - _this2->y);
HXDLIN( 256)														if (((_this2->y + _this2->height) >= (_y1 + _height1))) {
HXLINE( 256)															_this2->maskHeight = _height1;
            														}
            														else {
HXLINE( 256)															_this2->maskHeight = (_this2->height - _this2->maskY);
            														}
HXDLIN( 256)														bool f33;
HXDLIN( 256)														if (_isVisible1) {
HXLINE( 256)															f33 = !(_this2->isVisible);
            														}
            														else {
HXLINE( 256)															f33 = false;
            														}
HXDLIN( 256)														if (f33) {
HXLINE( 256)															_this2->uiDisplay->add(_this2);
            														}
HXDLIN( 256)														f7 = true;
            													}
            												}
            												else {
HXLINE( 256)													if (((_this2->y + _this2->height) > (_y1 + _height1))) {
HXLINE( 256)														if ((_this2->y >= (_y1 + _height1))) {
HXLINE( 256)															_this2->maskHeight = 0;
HXDLIN( 256)															bool f34;
HXDLIN( 256)															if (_isVisible1) {
HXLINE( 256)																f34 = _this2->isVisible;
            															}
            															else {
HXLINE( 256)																f34 = false;
            															}
HXDLIN( 256)															if (f34) {
HXLINE( 256)																_this2->uiDisplay->remove(_this2);
            															}
HXDLIN( 256)															f7 = false;
            														}
            														else {
HXLINE( 256)															_this2->maskY = 0;
HXDLIN( 256)															_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y1 + _height1)));
HXDLIN( 256)															bool f35;
HXDLIN( 256)															if (_isVisible1) {
HXLINE( 256)																f35 = !(_this2->isVisible);
            															}
            															else {
HXLINE( 256)																f35 = false;
            															}
HXDLIN( 256)															if (f35) {
HXLINE( 256)																_this2->uiDisplay->add(_this2);
            															}
HXDLIN( 256)															f7 = true;
            														}
            													}
            													else {
HXLINE( 256)														_this2->maskY = 0;
HXDLIN( 256)														_this2->maskHeight = _this2->height;
HXDLIN( 256)														bool f36;
HXDLIN( 256)														if (_isVisible1) {
HXLINE( 256)															f36 = !(_this2->isVisible);
            														}
            														else {
HXLINE( 256)															f36 = false;
            														}
HXDLIN( 256)														if (f36) {
HXLINE( 256)															_this2->uiDisplay->add(_this2);
            														}
HXDLIN( 256)														f7 = true;
            													}
            												}
            											}
            										}
            										else {
HXLINE( 256)											_this2->maskX = 0;
HXDLIN( 256)											_this2->maskWidth = _this2->width;
HXDLIN( 256)											if ((_this2->y < _y1)) {
HXLINE( 256)												if (((_this2->y + _this2->height) <= _y1)) {
HXLINE( 256)													_this2->maskHeight = 0;
HXDLIN( 256)													bool f37;
HXDLIN( 256)													if (_isVisible1) {
HXLINE( 256)														f37 = _this2->isVisible;
            													}
            													else {
HXLINE( 256)														f37 = false;
            													}
HXDLIN( 256)													if (f37) {
HXLINE( 256)														_this2->uiDisplay->remove(_this2);
            													}
HXDLIN( 256)													f7 = false;
            												}
            												else {
HXLINE( 256)													_this2->maskY = (_y1 - _this2->y);
HXDLIN( 256)													if (((_this2->y + _this2->height) >= (_y1 + _height1))) {
HXLINE( 256)														_this2->maskHeight = _height1;
            													}
            													else {
HXLINE( 256)														_this2->maskHeight = (_this2->height - _this2->maskY);
            													}
HXDLIN( 256)													bool f38;
HXDLIN( 256)													if (_isVisible1) {
HXLINE( 256)														f38 = !(_this2->isVisible);
            													}
            													else {
HXLINE( 256)														f38 = false;
            													}
HXDLIN( 256)													if (f38) {
HXLINE( 256)														_this2->uiDisplay->add(_this2);
            													}
HXDLIN( 256)													f7 = true;
            												}
            											}
            											else {
HXLINE( 256)												if (((_this2->y + _this2->height) > (_y1 + _height1))) {
HXLINE( 256)													if ((_this2->y >= (_y1 + _height1))) {
HXLINE( 256)														_this2->maskHeight = 0;
HXDLIN( 256)														bool f39;
HXDLIN( 256)														if (_isVisible1) {
HXLINE( 256)															f39 = _this2->isVisible;
            														}
            														else {
HXLINE( 256)															f39 = false;
            														}
HXDLIN( 256)														if (f39) {
HXLINE( 256)															_this2->uiDisplay->remove(_this2);
            														}
HXDLIN( 256)														f7 = false;
            													}
            													else {
HXLINE( 256)														_this2->maskY = 0;
HXDLIN( 256)														_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y1 + _height1)));
HXDLIN( 256)														bool f40;
HXDLIN( 256)														if (_isVisible1) {
HXLINE( 256)															f40 = !(_this2->isVisible);
            														}
            														else {
HXLINE( 256)															f40 = false;
            														}
HXDLIN( 256)														if (f40) {
HXLINE( 256)															_this2->uiDisplay->add(_this2);
            														}
HXDLIN( 256)														f7 = true;
            													}
            												}
            												else {
HXLINE( 256)													_this2->maskY = 0;
HXDLIN( 256)													_this2->maskHeight = _this2->height;
HXDLIN( 256)													bool f41;
HXDLIN( 256)													if (_isVisible1) {
HXLINE( 256)														f41 = !(_this2->isVisible);
            													}
            													else {
HXLINE( 256)														f41 = false;
            													}
HXDLIN( 256)													if (f41) {
HXLINE( 256)														_this2->uiDisplay->add(_this2);
            													}
HXDLIN( 256)													f7 = false;
            												}
            											}
            										}
            									}
            								}
HXDLIN( 256)								_this2->masked = f7;
            							}
            						}
HXDLIN( 256)						uiSlider->dragger->updateLayout();
HXDLIN( 256)						bool f42;
HXDLIN( 256)						if (uiSlider->isVisible) {
HXLINE( 256)							f42 = true;
            						}
            						else {
HXLINE( 256)							f42 = false;
            						}
HXDLIN( 256)						if (f42) {
HXLINE( 256)							 ::peote::ui::PeoteUIDisplay _this3 = uiSlider->uiDisplay;
HXDLIN( 256)							bool f43;
HXDLIN( 256)							bool f44;
HXDLIN( 256)							if (!(_this3->isTriggerMouse)) {
HXLINE( 256)								f44 = (uiSlider->hasMoveEvent != 0);
            							}
            							else {
HXLINE( 256)								f44 = false;
            							}
HXDLIN( 256)							if (f44) {
HXLINE( 256)								Float globalX = _this3->lastMouseX;
HXDLIN( 256)								 ::peote::view::PeoteView peoteView = null();
HXDLIN( 256)								if (::hx::IsNull( peoteView )) {
HXLINE( 256)									peoteView = _this3->peoteView;
            								}
HXDLIN( 256)								Float x;
HXDLIN( 256)								if (::hx::IsNotNull( peoteView )) {
HXLINE( 256)									x = (((((globalX / peoteView->xz) - peoteView->xOffset) - _this3->xOffset) - ( (Float)(_this3->x) )) / _this3->xz);
            								}
            								else {
HXLINE( 256)									x = (((globalX - _this3->xOffset) - ( (Float)(_this3->x) )) / _this3->xz);
            								}
HXDLIN( 256)								Float globalY = _this3->lastMouseY;
HXDLIN( 256)								 ::peote::view::PeoteView peoteView1 = null();
HXDLIN( 256)								if (::hx::IsNull( peoteView1 )) {
HXLINE( 256)									peoteView1 = _this3->peoteView;
            								}
HXDLIN( 256)								Float y;
HXDLIN( 256)								if (::hx::IsNotNull( peoteView1 )) {
HXLINE( 256)									y = (((((globalY / peoteView1->yz) - peoteView1->yOffset) - _this3->yOffset) - ( (Float)(_this3->y) )) / _this3->yz);
            								}
            								else {
HXLINE( 256)									y = (((globalY - _this3->yOffset) - ( (Float)(_this3->y) )) / _this3->yz);
            								}
HXDLIN( 256)								bool f45;
HXDLIN( 256)								if ((uiSlider->x <= x)) {
HXLINE( 256)									f45 = (x < (uiSlider->x + uiSlider->width));
            								}
            								else {
HXLINE( 256)									f45 = false;
            								}
HXDLIN( 256)								if (f45) {
HXLINE( 256)									if ((uiSlider->y <= y)) {
HXLINE( 256)										f43 = (y < (uiSlider->y + uiSlider->height));
            									}
            									else {
HXLINE( 256)										f43 = false;
            									}
            								}
            								else {
HXLINE( 256)									f43 = false;
            								}
            							}
            							else {
HXLINE( 256)								f43 = false;
            							}
HXDLIN( 256)							if (f43) {
HXLINE( 256)								_this3->isTriggerMouse = true;
HXDLIN( 256)								{
HXLINE( 256)									Float mouseX = _this3->lastMouseX;
HXDLIN( 256)									Float mouseY = _this3->lastMouseY;
HXDLIN( 256)									int checkForEvent = 3;
HXDLIN( 256)									bool f46;
HXDLIN( 256)									if (_this3->mouseEnabled) {
HXLINE( 256)										f46 = ::hx::IsNotNull( _this3->peoteView );
            									}
            									else {
HXLINE( 256)										f46 = false;
            									}
HXDLIN( 256)									if (f46) {
HXLINE( 256)										int x1 = ::Std_obj::_hx_int((_this3->lastMouseX = mouseX));
HXDLIN( 256)										int y1 = ::Std_obj::_hx_int((_this3->lastMouseY = mouseY));
HXDLIN( 256)										bool isInside = false;
HXDLIN( 256)										int pickedIndex = -1;
HXDLIN( 256)										bool f47;
HXDLIN( 256)										if ((checkForEvent > 0)) {
HXLINE( 256)											int px = x1;
HXDLIN( 256)											int py = y1;
HXDLIN( 256)											px = ::Std_obj::_hx_int(((( (Float)(px) ) / _this3->peoteView->xz) - _this3->peoteView->xOffset));
HXDLIN( 256)											py = ::Std_obj::_hx_int(((( (Float)(py) ) / _this3->peoteView->yz) - _this3->peoteView->yOffset));
HXDLIN( 256)											bool f48;
HXDLIN( 256)											bool f49;
HXDLIN( 256)											if ((px >= _this3->x)) {
HXLINE( 256)												f49 = (px < (_this3->x + _this3->width));
            											}
            											else {
HXLINE( 256)												f49 = false;
            											}
HXDLIN( 256)											if (f49) {
HXLINE( 256)												f48 = (py >= _this3->y);
            											}
            											else {
HXLINE( 256)												f48 = false;
            											}
HXDLIN( 256)											if (f48) {
HXLINE( 256)												f47 = (py < (_this3->y + _this3->height));
            											}
            											else {
HXLINE( 256)												f47 = false;
            											}
            										}
            										else {
HXLINE( 256)											f47 = false;
            										}
HXDLIN( 256)										if (f47) {
HXLINE( 256)											isInside = true;
HXDLIN( 256)											pickedIndex = _this3->peoteView->getElementAt(mouseX,mouseY,_this3,_this3->movePickProgram);
            										}
HXDLIN( 256)										if (::hx::IsNotNull( ::peote::ui::PeoteUIDisplay_obj::intoSelectionTextLine )) {
HXLINE( 256)											::Dynamic f50 = ::peote::ui::PeoteUIDisplay_obj::intoSelectionTextLine;
HXDLIN( 256)											 ::peote::view::PeoteView peoteView2 = null();
HXDLIN( 256)											if (::hx::IsNull( peoteView2 )) {
HXLINE( 256)												peoteView2 = _this3->peoteView;
            											}
HXDLIN( 256)											Float f51;
HXDLIN( 256)											if (::hx::IsNotNull( peoteView2 )) {
HXLINE( 256)												f51 = (((((( (Float)(x1) ) / peoteView2->xz) - peoteView2->xOffset) - _this3->xOffset) - ( (Float)(_this3->x) )) / _this3->xz);
            											}
            											else {
HXLINE( 256)												f51 = (((( (Float)(x1) ) - _this3->xOffset) - ( (Float)(_this3->x) )) / _this3->xz);
            											}
HXDLIN( 256)											int f52 = ::Std_obj::_hx_int(f51);
HXDLIN( 256)											 ::peote::view::PeoteView peoteView3 = null();
HXDLIN( 256)											if (::hx::IsNull( peoteView3 )) {
HXLINE( 256)												peoteView3 = _this3->peoteView;
            											}
HXDLIN( 256)											Float f53;
HXDLIN( 256)											if (::hx::IsNotNull( peoteView3 )) {
HXLINE( 256)												f53 = (((((( (Float)(y1) ) / peoteView3->xz) - peoteView3->xOffset) - _this3->xOffset) - ( (Float)(_this3->x) )) / _this3->xz);
            											}
            											else {
HXLINE( 256)												f53 = (((( (Float)(y1) ) - _this3->xOffset) - ( (Float)(_this3->x) )) / _this3->xz);
            											}
HXDLIN( 256)											::peote::ui::interactive::interfaces::InputText_obj::onSelect(f50, ::Dynamic(::hx::Anon_obj::Create(3)
            												->setFixed(0,HX_("x",78,00,00,00),f52)
            												->setFixed(1,HX_("y",79,00,00,00),::Std_obj::_hx_int(f53))
            												->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            										}
            										else {
HXLINE( 256)											if ((_this3->draggingMouseElements->length > 0)) {
HXLINE( 256)												int _g = 0;
HXDLIN( 256)												::Array< ::Dynamic> _g1 = _this3->draggingMouseElements;
HXDLIN( 256)												while((_g < _g1->length)){
HXLINE( 256)													 ::peote::ui::interactive::Interactive uiElement = _g1->__get(_g).StaticCast<  ::peote::ui::interactive::Interactive >();
HXDLIN( 256)													_g = (_g + 1);
HXDLIN( 256)													{
HXLINE( 256)														int dragToX = x1;
HXDLIN( 256)														int dragToY = y1;
HXDLIN( 256)														dragToX = ::Std_obj::_hx_int(((( (Float)(dragToX) ) / uiElement->uiDisplay->peoteView->xz) / uiElement->uiDisplay->xz));
HXDLIN( 256)														dragToY = ::Std_obj::_hx_int(((( (Float)(dragToY) ) / uiElement->uiDisplay->peoteView->yz) / uiElement->uiDisplay->yz));
HXDLIN( 256)														if ((dragToX >= (uiElement->dragMinX + uiElement->dragOriginX))) {
HXLINE( 256)															if ((dragToX < ((uiElement->dragMaxX - uiElement->width) + uiElement->dragOriginX))) {
HXLINE( 256)																uiElement->x = (dragToX - uiElement->dragOriginX);
            															}
            															else {
HXLINE( 256)																uiElement->x = (uiElement->dragMaxX - uiElement->width);
            															}
            														}
            														else {
HXLINE( 256)															uiElement->x = uiElement->dragMinX;
            														}
HXDLIN( 256)														if ((dragToY >= (uiElement->dragMinY + uiElement->dragOriginY))) {
HXLINE( 256)															if ((dragToY < ((uiElement->dragMaxY - uiElement->height) + uiElement->dragOriginY))) {
HXLINE( 256)																uiElement->y = (dragToY - uiElement->dragOriginY);
            															}
            															else {
HXLINE( 256)																uiElement->y = (uiElement->dragMaxY - uiElement->height);
            															}
            														}
            														else {
HXLINE( 256)															uiElement->y = uiElement->dragMinY;
            														}
HXDLIN( 256)														if (::hx::IsNotNull( uiElement->drag )) {
HXLINE( 256)															int _dx = ((uiElement->dragMaxX - uiElement->dragMinX) - uiElement->width);
HXDLIN( 256)															int _dy = ((uiElement->dragMaxY - uiElement->dragMinY) - uiElement->height);
HXDLIN( 256)															Float f54;
HXDLIN( 256)															if ((_dx != 0)) {
HXLINE( 256)																f54 = (( (Float)((uiElement->x - uiElement->dragMinX)) ) / ( (Float)(_dx) ));
            															}
            															else {
HXLINE( 256)																f54 = ((Float)0.0);
            															}
HXDLIN( 256)															Float f55;
HXDLIN( 256)															if ((_dy != 0)) {
HXLINE( 256)																f55 = (( (Float)((uiElement->y - uiElement->dragMinY)) ) / ( (Float)(_dy) ));
            															}
            															else {
HXLINE( 256)																f55 = ((Float)0.0);
            															}
HXDLIN( 256)															uiElement->drag(f54,f55);
            														}
            													}
HXDLIN( 256)													uiElement->updateLayout();
            												}
            											}
            											else {
HXLINE( 256)												bool hasEventOver = false;
HXDLIN( 256)												bool hasEventOut = false;
HXDLIN( 256)												if ((pickedIndex != _this3->lastMouseOverIndex)) {
HXLINE( 256)													if ((_this3->lastMouseOverIndex >= 0)) {
HXLINE( 256)														 ::peote::ui::interactive::Interactive lastElem = _this3->movePickBuffer->getElement(_this3->lastMouseOverIndex)->uiElement;
HXDLIN( 256)														if ((pickedIndex >= 0)) {
HXLINE( 256)															 ::peote::ui::interactive::Interactive pickedElem = _this3->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN( 256)															if (lastElem->intoOverOutEventBubbleOf(pickedElem)) {
HXLINE( 256)																while(true){
HXLINE( 256)																	bool f56;
HXDLIN( 256)																	if (::hx::IsNotNull( pickedElem )) {
HXLINE( 256)																		f56 = ::hx::IsInstanceNotEq( pickedElem,lastElem );
            																	}
            																	else {
HXLINE( 256)																		f56 = false;
            																	}
HXDLIN( 256)																	if (!(f56)) {
HXLINE( 256)																		goto _hx_goto_7;
            																	}
HXDLIN( 256)																	pickedElem->pointerOver( ::Dynamic(::hx::Anon_obj::Create(3)
            																		->setFixed(0,HX_("x",78,00,00,00),x1)
            																		->setFixed(1,HX_("y",79,00,00,00),y1)
            																		->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 256)																	bool f57;
HXDLIN( 256)																	if (::hx::IsNull( pickedElem->overOutEventsBubbleTo )) {
HXLINE( 256)																		f57 = !(pickedElem->overOutEventsBubbleToDisplay);
            																	}
            																	else {
HXLINE( 256)																		f57 = false;
            																	}
HXDLIN( 256)																	if (f57) {
HXLINE( 256)																		hasEventOut = true;
            																	}
HXDLIN( 256)																	pickedElem = pickedElem->overOutEventsBubbleTo;
            																}
            																_hx_goto_7:;
            															}
            															else {
HXLINE( 256)																while(true){
HXLINE( 256)																	bool f58;
HXDLIN( 256)																	if (::hx::IsNotNull( lastElem )) {
HXLINE( 256)																		f58 = ::hx::IsInstanceNotEq( lastElem,pickedElem );
            																	}
            																	else {
HXLINE( 256)																		f58 = false;
            																	}
HXDLIN( 256)																	if (!(f58)) {
HXLINE( 256)																		goto _hx_goto_8;
            																	}
HXDLIN( 256)																	lastElem->pointerOut( ::Dynamic(::hx::Anon_obj::Create(3)
            																		->setFixed(0,HX_("x",78,00,00,00),x1)
            																		->setFixed(1,HX_("y",79,00,00,00),y1)
            																		->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 256)																	bool f59;
HXDLIN( 256)																	if (::hx::IsNull( lastElem->overOutEventsBubbleTo )) {
HXLINE( 256)																		f59 = !(lastElem->overOutEventsBubbleToDisplay);
            																	}
            																	else {
HXLINE( 256)																		f59 = false;
            																	}
HXDLIN( 256)																	if (f59) {
HXLINE( 256)																		hasEventOver = true;
            																	}
HXDLIN( 256)																	lastElem = lastElem->overOutEventsBubbleTo;
            																}
            																_hx_goto_8:;
HXDLIN( 256)																if (::hx::IsNull( lastElem )) {
HXLINE( 256)																	while(::hx::IsNotNull( pickedElem )){
HXLINE( 256)																		pickedElem->pointerOver( ::Dynamic(::hx::Anon_obj::Create(3)
            																			->setFixed(0,HX_("x",78,00,00,00),x1)
            																			->setFixed(1,HX_("y",79,00,00,00),y1)
            																			->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 256)																		bool f60;
HXDLIN( 256)																		if (::hx::IsNull( pickedElem->overOutEventsBubbleTo )) {
HXLINE( 256)																			f60 = !(pickedElem->overOutEventsBubbleToDisplay);
            																		}
            																		else {
HXLINE( 256)																			f60 = false;
            																		}
HXDLIN( 256)																		if (f60) {
HXLINE( 256)																			hasEventOut = true;
            																		}
HXDLIN( 256)																		pickedElem = pickedElem->overOutEventsBubbleTo;
            																	}
            																}
            															}
            														}
            														else {
HXLINE( 256)															while(::hx::IsNotNull( lastElem )){
HXLINE( 256)																lastElem->pointerOut( ::Dynamic(::hx::Anon_obj::Create(3)
            																	->setFixed(0,HX_("x",78,00,00,00),x1)
            																	->setFixed(1,HX_("y",79,00,00,00),y1)
            																	->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 256)																bool f61;
HXDLIN( 256)																if (::hx::IsNull( lastElem->overOutEventsBubbleTo )) {
HXLINE( 256)																	f61 = !(lastElem->overOutEventsBubbleToDisplay);
            																}
            																else {
HXLINE( 256)																	f61 = false;
            																}
HXDLIN( 256)																if (f61) {
HXLINE( 256)																	hasEventOver = true;
            																}
HXDLIN( 256)																lastElem = lastElem->overOutEventsBubbleTo;
            															}
            														}
            													}
            													else {
HXLINE( 256)														if ((pickedIndex >= 0)) {
HXLINE( 256)															 ::peote::ui::interactive::Interactive pickedElem1 = _this3->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN( 256)															while(::hx::IsNotNull( pickedElem1 )){
HXLINE( 256)																pickedElem1->pointerOver( ::Dynamic(::hx::Anon_obj::Create(3)
            																	->setFixed(0,HX_("x",78,00,00,00),x1)
            																	->setFixed(1,HX_("y",79,00,00,00),y1)
            																	->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 256)																bool f62;
HXDLIN( 256)																if (::hx::IsNull( pickedElem1->overOutEventsBubbleTo )) {
HXLINE( 256)																	f62 = !(pickedElem1->overOutEventsBubbleToDisplay);
            																}
            																else {
HXLINE( 256)																	f62 = false;
            																}
HXDLIN( 256)																if (f62) {
HXLINE( 256)																	hasEventOut = true;
            																}
HXDLIN( 256)																pickedElem1 = pickedElem1->overOutEventsBubbleTo;
            															}
            														}
            													}
HXDLIN( 256)													_this3->lastMouseOverIndex = pickedIndex;
            												}
HXDLIN( 256)												if (((checkForEvent & 2) != 0)) {
HXLINE( 256)													bool hasEventMove = false;
HXDLIN( 256)													if ((pickedIndex >= 0)) {
HXLINE( 256)														 ::peote::ui::interactive::Interactive pickedElem2 = _this3->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN( 256)														while(::hx::IsNotNull( pickedElem2 )){
HXLINE( 256)															pickedElem2->pointerMove( ::Dynamic(::hx::Anon_obj::Create(3)
            																->setFixed(0,HX_("x",78,00,00,00),x1)
            																->setFixed(1,HX_("y",79,00,00,00),y1)
            																->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 256)															bool f63;
HXDLIN( 256)															if (::hx::IsNull( pickedElem2->moveEventsBubbleTo )) {
HXLINE( 256)																f63 = pickedElem2->moveEventsBubbleToDisplay;
            															}
            															else {
HXLINE( 256)																f63 = false;
            															}
HXDLIN( 256)															if (f63) {
HXLINE( 256)																hasEventMove = true;
            															}
HXDLIN( 256)															pickedElem2 = pickedElem2->moveEventsBubbleTo;
            														}
            													}
            													else {
HXLINE( 256)														hasEventMove = true;
            													}
HXDLIN( 256)													if (hasEventMove) {
HXLINE( 256)														if (::hx::IsNotNull( _this3->onPointerMove )) {
HXLINE( 256)															_this3->onPointerMove(_this3, ::Dynamic(::hx::Anon_obj::Create(3)
            																->setFixed(0,HX_("x",78,00,00,00),x1)
            																->setFixed(1,HX_("y",79,00,00,00),y1)
            																->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            														}
HXDLIN( 256)														if (!(_this3->moveEventsBubble)) {
HXLINE( 256)															checkForEvent = (checkForEvent - 2);
            														}
            													}
            													else {
HXLINE( 256)														checkForEvent = (checkForEvent - 2);
            													}
            												}
HXDLIN( 256)												if (((checkForEvent & 1) != 0)) {
HXLINE( 256)													if (isInside) {
HXLINE( 256)														if (!(_this3->isMouseInside)) {
HXLINE( 256)															_this3->isMouseInside = true;
HXDLIN( 256)															hasEventOver = true;
            														}
            													}
            													else {
HXLINE( 256)														if (_this3->isMouseInside) {
HXLINE( 256)															_this3->isMouseInside = false;
HXDLIN( 256)															hasEventOut = true;
            														}
            													}
HXDLIN( 256)													bool f64;
HXDLIN( 256)													if (hasEventOver) {
HXLINE( 256)														f64 = !(hasEventOut);
            													}
            													else {
HXLINE( 256)														f64 = false;
            													}
HXDLIN( 256)													if (f64) {
HXLINE( 256)														if (::hx::IsNotNull( _this3->onPointerOver )) {
HXLINE( 256)															_this3->onPointerOver(_this3, ::Dynamic(::hx::Anon_obj::Create(3)
            																->setFixed(0,HX_("x",78,00,00,00),x1)
            																->setFixed(1,HX_("y",79,00,00,00),y1)
            																->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            														}
HXDLIN( 256)														_this3->isMouseOver = true;
            													}
            													else {
HXLINE( 256)														bool f65;
HXDLIN( 256)														if (hasEventOut) {
HXLINE( 256)															f65 = !(hasEventOver);
            														}
            														else {
HXLINE( 256)															f65 = false;
            														}
HXDLIN( 256)														if (f65) {
HXLINE( 256)															if (::hx::IsNotNull( _this3->onPointerOut )) {
HXLINE( 256)																_this3->onPointerOut(_this3, ::Dynamic(::hx::Anon_obj::Create(3)
            																	->setFixed(0,HX_("x",78,00,00,00),x1)
            																	->setFixed(1,HX_("y",79,00,00,00),y1)
            																	->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            															}
HXDLIN( 256)															_this3->isMouseOver = false;
            														}
            													}
HXDLIN( 256)													if (_this3->isMouseInside) {
HXLINE( 256)														bool f66;
HXDLIN( 256)														if (_this3->isMouseOver) {
HXLINE( 256)															f66 = !(_this3->overOutEventsBubble);
            														}
            														else {
HXLINE( 256)															f66 = true;
            														}
HXDLIN( 256)														if (f66) {
HXLINE( 256)															checkForEvent = (checkForEvent - 1);
            														}
            													}
            												}
            												else {
HXLINE( 256)													if (_this3->isMouseInside) {
HXLINE( 256)														if (::hx::IsNotNull( _this3->onPointerOut )) {
HXLINE( 256)															_this3->onPointerOut(_this3, ::Dynamic(::hx::Anon_obj::Create(3)
            																->setFixed(0,HX_("x",78,00,00,00),x1)
            																->setFixed(1,HX_("y",79,00,00,00),y1)
            																->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            														}
HXDLIN( 256)														_this3->isMouseInside = (_this3->isMouseOver = false);
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 256)								_this3->isTriggerMouse = false;
            							}
            						}
HXDLIN( 256)						if (triggerOnChange) {
HXLINE( 256)							if (::hx::IsNotNull( uiSlider->_onChange )) {
HXLINE( 256)								Float f67;
HXDLIN( 256)								if (uiSlider->reverse) {
HXLINE( 256)									f67 = (((Float)1.0) - uiSlider->_percent);
            								}
            								else {
HXLINE( 256)									f67 = uiSlider->_percent;
            								}
HXDLIN( 256)								Float f68;
HXDLIN( 256)								if (uiSlider->reverse) {
HXLINE( 256)									f68 = (((Float)1.0) - uiSlider->_percent);
            								}
            								else {
HXLINE( 256)									f68 = uiSlider->_percent;
            								}
HXDLIN( 256)								uiSlider->_onChange(uiSlider,(uiSlider->valueStart + (f67 * (uiSlider->valueEnd - uiSlider->valueStart))),f68);
            							}
HXDLIN( 256)							if (::hx::IsNotNull( uiSlider->onChange )) {
HXLINE( 256)								Float f69;
HXDLIN( 256)								if (uiSlider->reverse) {
HXLINE( 256)									f69 = (((Float)1.0) - uiSlider->_percent);
            								}
            								else {
HXLINE( 256)									f69 = uiSlider->_percent;
            								}
HXDLIN( 256)								Float f70;
HXDLIN( 256)								if (uiSlider->reverse) {
HXLINE( 256)									f70 = (((Float)1.0) - uiSlider->_percent);
            								}
            								else {
HXLINE( 256)									f70 = uiSlider->_percent;
            								}
HXDLIN( 256)								uiSlider->onChange(uiSlider,(uiSlider->valueStart + (f69 * (uiSlider->valueEnd - uiSlider->valueStart))),f70);
            							}
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 253)			 ::Dynamic f2 =  ::Dynamic(new _hx_Closure_8());
HXDLIN( 253)			if (::hx::IsNotNull( f2 )) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_9, ::Dynamic,_g2, ::peote::ui::interactive::UISlider,a12) HXARGC(1)
            				void _hx_run( ::Dynamic a2){
            					HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_253_setSliderEvents)
HXLINE( 253)					_g2(a12,a2);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 253)				 ::Dynamic _g2 = f2;
HXDLIN( 253)				 ::peote::ui::interactive::UISlider a12 = slider;
HXDLIN( 253)				slider->mouseWheel =  ::Dynamic(new _hx_Closure_9(_g2,a12));
HXDLIN( 253)				if ((slider->hasMoveEvent == 0)) {
HXLINE( 253)					slider->addPickableMove();
            				}
HXDLIN( 253)				 ::peote::ui::interactive::UISlider slider5 = slider;
HXDLIN( 253)				slider5->hasMoveEvent = (slider5->hasMoveEvent | 8);
            			}
            			else {
HXLINE( 253)				if (((slider->hasMoveEvent & 8) > 0)) {
HXLINE( 253)					 ::peote::ui::interactive::UISlider slider6 = slider;
HXDLIN( 253)					slider6->hasMoveEvent = (slider6->hasMoveEvent & -9);
HXDLIN( 253)					if ((slider->hasMoveEvent == 0)) {
HXLINE( 253)						slider->removePickableMove();
            					}
HXDLIN( 253)					slider->mouseWheel = ::peote::ui::interactive::Interactive_obj::noWheelOperation_dyn();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,setSliderEvents,(void))

void Main_obj::update(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_260_update)
HXLINE( 262)		if (!(this->initialized)) {
HXLINE( 263)			return;
            		}
HXLINE( 266)		this->deltaTime = ((( (Float)(deltaTime) ) * ((Float)1.0)) / ((Float)1000.0));
HXLINE( 267)		bool _hx_tmp;
HXDLIN( 267)		bool _hx_tmp1;
HXDLIN( 267)		bool _hx_tmp2;
HXDLIN( 267)		if (!(::Camera_obj::moveLeft)) {
HXLINE( 267)			_hx_tmp2 = ::Camera_obj::moveRight;
            		}
            		else {
HXLINE( 267)			_hx_tmp2 = true;
            		}
HXDLIN( 267)		if (!(_hx_tmp2)) {
HXLINE( 267)			_hx_tmp1 = ::Camera_obj::moveForward;
            		}
            		else {
HXLINE( 267)			_hx_tmp1 = true;
            		}
HXDLIN( 267)		if (!(_hx_tmp1)) {
HXLINE( 267)			_hx_tmp = ::Camera_obj::moveBackward;
            		}
            		else {
HXLINE( 267)			_hx_tmp = true;
            		}
HXDLIN( 267)		if (_hx_tmp) {
HXLINE( 268)			::Camera_obj::moveCamera(this->deltaTime);
            		}
            	}


void Main_obj::onKeyDown(int key,int modifier){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_273_onKeyDown)
HXDLIN( 273)		switch((int)(key)){
            			case (int)27: {
HXLINE( 275)				this->_hx___window->close();
            			}
            			break;
            			case (int)97: case (int)1073741904: {
HXLINE( 277)				::Camera_obj::moveLeft = true;
            			}
            			break;
            			case (int)100: case (int)1073741903: {
HXLINE( 279)				::Camera_obj::moveRight = true;
            			}
            			break;
            			case (int)115: case (int)1073741905: {
HXLINE( 283)				::Camera_obj::moveBackward = true;
            			}
            			break;
            			case (int)119: case (int)1073741906: {
HXLINE( 281)				::Camera_obj::moveForward = true;
            			}
            			break;
            			default:{
            			}
            		}
            	}


void Main_obj::onKeyUp(int key,int modifier){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_289_onKeyUp)
HXDLIN( 289)		switch((int)(key)){
            			case (int)97: case (int)1073741904: {
HXLINE( 291)				::Camera_obj::moveLeft = false;
            			}
            			break;
            			case (int)100: case (int)1073741903: {
HXLINE( 293)				::Camera_obj::moveRight = false;
            			}
            			break;
            			case (int)115: case (int)1073741905: {
HXLINE( 297)				::Camera_obj::moveBackward = false;
            			}
            			break;
            			case (int)119: case (int)1073741906: {
HXLINE( 295)				::Camera_obj::moveForward = false;
            			}
            			break;
            			default:{
            			}
            		}
            	}


void Main_obj::onMouseMove(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_303_onMouseMove)
HXDLIN( 303)		::Camera_obj::onMouseMove(x,y);
            	}


void Main_obj::render( ::lime::graphics::RenderContext context){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_306_render)
HXLINE( 308)		if (!(this->initialized)) {
HXLINE( 309)			return;
            		}
HXLINE( 313)		this->gl->clearColor(((Float)0.0),((Float)0.0),((Float)0.0),( (Float)(1) ));
HXLINE( 314)		this->gl->clear((this->gl->COLOR_BUFFER_BIT | this->gl->DEPTH_BUFFER_BIT));
HXLINE( 316)		this->cube->use();
HXLINE( 318)		this->model = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 319)		::lime::math::_Matrix4::Matrix4_Impl__obj::identity(this->model);
HXLINE( 320)		::lime::math::_Matrix4::Matrix4_Impl__obj::appendTranslation(this->model,((Float)1.0),((Float)1.0),((Float)1.0));
HXLINE( 321)		::lime::math::_Matrix4::Matrix4_Impl__obj::appendScale(this->model,((Float)4.0),((Float)4.0),((Float)4.0));
HXLINE( 323)		this->view = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 324)		::lime::math::_Matrix4::Matrix4_Impl__obj::identity(this->view);
HXLINE( 325)		 ::lime::math::Vector4 _hx_tmp = ::Camera_obj::pos;
HXDLIN( 325)		 ::lime::math::Vector4 _this = ::Camera_obj::pos;
HXDLIN( 325)		 ::lime::math::Vector4 a = ::Camera_obj::front;
HXDLIN( 325)		 ::lime::math::Vector4 result = null();
HXDLIN( 325)		if (::hx::IsNull( result )) {
HXLINE( 325)			result =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXDLIN( 325)		{
HXLINE( 325)			result->x = (_this->x + a->x);
HXDLIN( 325)			result->y = (_this->y + a->y);
HXDLIN( 325)			result->z = (_this->z + a->z);
            		}
HXDLIN( 325)		this->view = ::MatrixUtils_obj::createLookAtMatrix(_hx_tmp,result, ::lime::math::Vector4_obj::__alloc( HX_CTX ,((Float)0.0),((Float)1.0),((Float)0.0),null()));
HXLINE( 327)		this->proj = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 328)		::lime::math::_Matrix4::Matrix4_Impl__obj::identity(this->proj);
HXLINE( 329)		::MatrixUtils_obj::createPerspective(this->proj,((::Camera_obj::fov * ::Math_obj::PI) / ( (Float)(180) )),(( (Float)(::lime::app::Application_obj::current->_hx___window->_hx___width) ) / ( (Float)(::lime::app::Application_obj::current->_hx___window->_hx___height) )),((Float)0.1),((Float)100.0));
HXLINE( 331)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 331)		Float lightX;
HXDLIN( 331)		if ((timer > 0)) {
HXLINE( 331)			lightX = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE( 331)			lightX = ( (Float)(0) );
            		}
HXDLIN( 331)		Float lightX1 = (::Math_obj::sin(lightX) * ((Float)2.0));
HXLINE( 332)		int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 332)		Float lightZ;
HXDLIN( 332)		if ((timer1 > 0)) {
HXLINE( 332)			lightZ = (( (Float)(timer1) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE( 332)			lightZ = ( (Float)(0) );
            		}
HXDLIN( 332)		Float lightZ1 = (::Math_obj::cos(lightZ) * ((Float)1.5));
HXLINE( 334)		::Array< Float > lightPos = ::Array_obj< Float >::__new(3)->init(0,lightX1)->init(1,((Float)10.0))->init(2,lightZ1);
HXLINE( 337)		 ::SimpleCubeProgram _hx_tmp1 = this->cube;
HXLINE( 338)		 ::lime::graphics::opengl::GLObject _hx_tmp2 = this->vbo;
HXLINE( 339)		 ::lime::utils::ArrayBufferView _hx_tmp3 = this->model;
HXLINE( 340)		 ::lime::utils::ArrayBufferView _hx_tmp4 = this->view;
HXLINE( 341)		 ::lime::utils::ArrayBufferView _hx_tmp5 = this->proj;
HXLINE( 342)		 ::lime::math::Vector4 _hx_tmp6 = ::Camera_obj::pos;
HXLINE( 343)		 ::lime::utils::ArrayBufferView _hx_tmp7 = this->verticesData;
HXLINE( 346)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 346)		{
HXLINE( 346)			int _g1 = 0;
HXDLIN( 346)			while((_g1 < lightPos->length)){
HXLINE( 346)				Float i = lightPos->__get(_g1);
HXDLIN( 346)				_g1 = (_g1 + 1);
HXDLIN( 346)				_g->push(i);
            			}
            		}
HXLINE( 347)		::Array< Float > _hx_tmp8 = ::MatrixUtils_obj::vecToArray(::Camera_obj::pos);
HXLINE( 337)		_hx_tmp1->render( ::Dynamic(::hx::Anon_obj::Create(13)
            			->setFixed(0,HX_("lightPos",5e,2e,ee,8c),_g)
            			->setFixed(1,HX_("viewPos",2f,b0,bb,9c),_hx_tmp8)
            			->setFixed(2,HX_("modelMatrix",ca,72,9c,b1),_hx_tmp3)
            			->setFixed(3,HX_("objectColor",24,8e,8b,b9),::Array_obj< Float >::fromData( _hx_array_data_332f6459_34,3))
            			->setFixed(4,HX_("cameraPosition",6e,50,87,c0),_hx_tmp6)
            			->setFixed(5,HX_("vertexBufferData",ce,43,ce,c6),_hx_tmp7)
            			->setFixed(6,HX_("lightColor",ad,88,62,cb),::Array_obj< Float >::fromData( _hx_array_data_332f6459_35,3))
            			->setFixed(7,HX_("projectionMatrix",30,88,bb,d0),_hx_tmp5)
            			->setFixed(8,HX_("material",a7,5c,a5,f0), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("specular",c3,56,6c,93),::Array_obj< Float >::fromData( _hx_array_data_332f6459_36,3))
            				->setFixed(1,HX_("shininess",86,57,95,c6),((Float)64.0))))
            			->setFixed(9,HX_("viewMatrix",86,36,15,fd),_hx_tmp4)
            			->setFixed(10,HX_("vbo",c3,df,59,00),_hx_tmp2)
            			->setFixed(11,HX_("diffuseMap",5a,ea,94,3f),this->texture)
            			->setFixed(12,HX_("light",d6,90,fc,74), ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("specular",c3,56,6c,93),::Array_obj< Float >::fromData( _hx_array_data_332f6459_37,3))
            				->setFixed(1,HX_("ambient",18,98,81,09),::Array_obj< Float >::fromData( _hx_array_data_332f6459_38,3))
            				->setFixed(2,HX_("diffuse",62,61,7f,38),::Array_obj< Float >::fromData( _hx_array_data_332f6459_39,3))))));
HXLINE( 360)		this->model = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 361)		::lime::math::_Matrix4::Matrix4_Impl__obj::identity(this->model);
HXLINE( 362)		::lime::math::_Matrix4::Matrix4_Impl__obj::appendTranslation(this->model,lightPos->__get(0),lightPos->__get(1),lightPos->__get(2));
HXLINE( 363)		::lime::math::_Matrix4::Matrix4_Impl__obj::appendScale(this->model,((Float)0.6),((Float)0.6),((Float)0.6));
HXLINE( 365)		this->lightCube->use();
HXLINE( 368)		this->lightCube->render( ::Dynamic(::hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("modelMatrix",ca,72,9c,b1),this->model)
            			->setFixed(1,HX_("cameraPosition",6e,50,87,c0),::Camera_obj::pos)
            			->setFixed(2,HX_("vertexBufferData",ce,43,ce,c6),this->verticesData)
            			->setFixed(3,HX_("projectionMatrix",30,88,bb,d0),this->proj)
            			->setFixed(4,HX_("viewMatrix",86,36,15,fd),this->view)
            			->setFixed(5,HX_("vbo",c3,df,59,00),this->vbo)));
HXLINE( 378)		{
HXLINE( 378)			 ::peote::view::PeoteView _this1 = this->peoteView;
HXDLIN( 378)			_this1->displayListItem = _this1->displayList->first;
HXDLIN( 378)			while(::hx::IsNotNull( _this1->displayListItem )){
HXLINE( 378)				{
HXLINE( 378)					 ::peote::view::Display _this2 = _this1->displayListItem->value;
HXDLIN( 378)					if (_this2->isVisible) {
HXLINE( 378)						{
HXLINE( 378)							 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = _this1->gl;
HXDLIN( 378)							int w = _this1->width;
HXDLIN( 378)							int h = _this1->height;
HXDLIN( 378)							Float xz = _this1->xz;
HXDLIN( 378)							Float yz = _this1->yz;
HXDLIN( 378)							int sx = ::Math_obj::floor(((_this2->x + _this1->xOffset) * xz));
HXDLIN( 378)							int sy = ::Math_obj::floor(((_this2->y + _this1->yOffset) * yz));
HXDLIN( 378)							int sw = ::Math_obj::floor((( (Float)(_this2->width) ) * xz));
HXDLIN( 378)							int sh = ::Math_obj::floor((( (Float)(_this2->height) ) * yz));
HXDLIN( 378)							if ((sx < 0)) {
HXLINE( 378)								sw = (sw + sx);
            							}
HXDLIN( 378)							sx = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(w) ),( (Float)(sx) ))));
HXDLIN( 378)							sw = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)((w - sx)) ),( (Float)(sw) ))));
HXDLIN( 378)							if ((sy < 0)) {
HXLINE( 378)								sh = (sh + sy);
            							}
HXDLIN( 378)							sy = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(h) ),( (Float)(sy) ))));
HXDLIN( 378)							sh = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)((h - sy)) ),( (Float)(sh) ))));
HXDLIN( 378)							gl->scissor(sx,((h - sh) - sy),sw,sh);
            						}
HXDLIN( 378)						if (_this2->backgroundEnabled) {
HXLINE( 378)							if ((true != _this1->colorState)) {
HXLINE( 378)								_this1->colorState = true;
HXDLIN( 378)								_this1->gl->colorMask(true,true,true,true);
            							}
HXDLIN( 378)							{
HXLINE( 378)								bool enabled = _this2->backgroundDepth;
HXDLIN( 378)								bool _hx_tmp9;
HXDLIN( 378)								if (enabled) {
HXLINE( 378)									_hx_tmp9 = !(_this1->glStateDepth);
            								}
            								else {
HXLINE( 378)									_hx_tmp9 = false;
            								}
HXDLIN( 378)								if (_hx_tmp9) {
HXLINE( 378)									_this1->glStateDepth = true;
HXDLIN( 378)									_this1->gl->enable(_this1->gl->DEPTH_TEST);
            								}
            								else {
HXLINE( 378)									bool _hx_tmp10;
HXDLIN( 378)									if (!(enabled)) {
HXLINE( 378)										_hx_tmp10 = _this1->glStateDepth;
            									}
            									else {
HXLINE( 378)										_hx_tmp10 = false;
            									}
HXDLIN( 378)									if (_hx_tmp10) {
HXLINE( 378)										_this1->glStateDepth = false;
HXDLIN( 378)										_this1->gl->disable(_this1->gl->DEPTH_TEST);
            									}
            								}
            							}
HXDLIN( 378)							{
HXLINE( 378)								bool enabled1 = _this2->backgroundAlpha;
HXDLIN( 378)								bool _hx_tmp11;
HXDLIN( 378)								if (enabled1) {
HXLINE( 378)									_hx_tmp11 = !(_this1->glStateAlpha);
            								}
            								else {
HXLINE( 378)									_hx_tmp11 = false;
            								}
HXDLIN( 378)								if (_hx_tmp11) {
HXLINE( 378)									_this1->glStateAlpha = true;
HXDLIN( 378)									_this1->gl->enable(_this1->gl->BLEND);
            								}
            								else {
HXLINE( 378)									bool _hx_tmp12;
HXDLIN( 378)									if (!(enabled1)) {
HXLINE( 378)										_hx_tmp12 = _this1->glStateAlpha;
            									}
            									else {
HXLINE( 378)										_hx_tmp12 = false;
            									}
HXDLIN( 378)									if (_hx_tmp12) {
HXLINE( 378)										_this1->glStateAlpha = false;
HXDLIN( 378)										_this1->gl->disable(_this1->gl->BLEND);
            									}
            								}
            							}
HXDLIN( 378)							if ((0 != _this1->maskState)) {
HXLINE( 378)								{
HXLINE( 378)									_this1->gl->disable(_this1->gl->STENCIL_TEST);
HXDLIN( 378)									_this1->maskState = 0;
            								}
HXDLIN( 378)								_this1->maskState = 0;
            							}
HXDLIN( 378)							_this1->background->render(_this2->red,_this2->green,_this2->blue,_this2->alpha);
            						}
HXDLIN( 378)						{
HXLINE( 378)							_this2->programListItem = _this2->programList->first;
HXDLIN( 378)							while(::hx::IsNotNull( _this2->programListItem )){
HXLINE( 378)								{
HXLINE( 378)									 ::peote::view::Program _this3 = _this2->programListItem->value;
HXDLIN( 378)									if (_this3->isVisible) {
HXLINE( 378)										_this3->gl->useProgram(_this3->glProgram);
HXDLIN( 378)										{
HXLINE( 378)											_this3->textureListItem = _this3->textureList->first;
HXDLIN( 378)											while(::hx::IsNotNull( _this3->textureListItem )){
HXLINE( 378)												if (_this1->isTextureStateChange(_this3->textureListItem->value->unit,_this3->textureListItem->value->texture)) {
HXLINE( 378)													_this3->gl->activeTexture((_this3->gl->TEXTURE0 + _this3->textureListItem->value->unit));
HXDLIN( 378)													_this3->gl->bindTexture(_this3->gl->TEXTURE_2D,_this3->textureListItem->value->texture->glTexture);
            												}
HXDLIN( 378)												_this3->gl->uniform1i(_this3->textureListItem->value->uniformLoc,_this3->textureListItem->value->unit);
HXDLIN( 378)												_this3->textureListItem = _this3->textureListItem->next;
            											}
            										}
HXDLIN( 378)										{
HXLINE( 378)											_this3->gl->uniform2f(_this3->uRESOLUTION,( (Float)(_this1->width) ),( (Float)(_this1->height) ));
HXDLIN( 378)											_this3->gl->uniform2f(_this3->uZOOM,(_this1->xz * _this2->xz),(_this1->yz * _this2->yz));
HXDLIN( 378)											_this3->gl->uniform2f(_this3->uOFFSET,(((_this2->x + _this2->xOffset) + _this1->xOffset) / _this2->xz),(((_this2->y + _this2->yOffset) + _this1->yOffset) / _this2->yz));
            										}
HXDLIN( 378)										 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this4 = _this3->gl;
HXDLIN( 378)										int _this5 = _this3->uTIME;
HXDLIN( 378)										Float _hx_tmp13;
HXDLIN( 378)										if (_this1->isRun) {
HXLINE( 378)											int timer2 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 378)											Float _hx_tmp14;
HXDLIN( 378)											if ((timer2 > 0)) {
HXLINE( 378)												_hx_tmp14 = (( (Float)(timer2) ) / ( (Float)(1000) ));
            											}
            											else {
HXLINE( 378)												_hx_tmp14 = ( (Float)(0) );
            											}
HXDLIN( 378)											_hx_tmp13 = (_hx_tmp14 - _this1->startTime);
            										}
            										else {
HXLINE( 378)											_hx_tmp13 = _this1->stopTime;
            										}
HXDLIN( 378)										_this4->uniform1f(_this5,(_hx_tmp13 * _this1->speed));
HXDLIN( 378)										{
HXLINE( 378)											int _g2 = 0;
HXDLIN( 378)											int _g3 = _this3->uniformFloats->length;
HXDLIN( 378)											while((_g2 < _g3)){
HXLINE( 378)												_g2 = (_g2 + 1);
HXDLIN( 378)												int i1 = (_g2 - 1);
HXDLIN( 378)												_this3->gl->uniform1f(_this3->uniformFloatLocations->__get(i1),_this3->uniformFloats->__get(i1).StaticCast<  ::peote::view::UniformFloat >()->value);
            											}
            										}
HXDLIN( 378)										{
HXLINE( 378)											bool enabled2 = _this3->colorEnabled;
HXDLIN( 378)											if ((enabled2 != _this1->colorState)) {
HXLINE( 378)												_this1->colorState = enabled2;
HXDLIN( 378)												_this1->gl->colorMask(enabled2,enabled2,enabled2,enabled2);
            											}
            										}
HXDLIN( 378)										{
HXLINE( 378)											bool enabled3 = _this3->zIndexEnabled;
HXDLIN( 378)											bool _hx_tmp15;
HXDLIN( 378)											if (enabled3) {
HXLINE( 378)												_hx_tmp15 = !(_this1->glStateDepth);
            											}
            											else {
HXLINE( 378)												_hx_tmp15 = false;
            											}
HXDLIN( 378)											if (_hx_tmp15) {
HXLINE( 378)												_this1->glStateDepth = true;
HXDLIN( 378)												_this1->gl->enable(_this1->gl->DEPTH_TEST);
            											}
            											else {
HXLINE( 378)												bool _hx_tmp16;
HXDLIN( 378)												if (!(enabled3)) {
HXLINE( 378)													_hx_tmp16 = _this1->glStateDepth;
            												}
            												else {
HXLINE( 378)													_hx_tmp16 = false;
            												}
HXDLIN( 378)												if (_hx_tmp16) {
HXLINE( 378)													_this1->glStateDepth = false;
HXDLIN( 378)													_this1->gl->disable(_this1->gl->DEPTH_TEST);
            												}
            											}
            										}
HXDLIN( 378)										{
HXLINE( 378)											bool enabled4 = _this3->alphaEnabled;
HXDLIN( 378)											bool _hx_tmp17;
HXDLIN( 378)											if (enabled4) {
HXLINE( 378)												_hx_tmp17 = !(_this1->glStateAlpha);
            											}
            											else {
HXLINE( 378)												_hx_tmp17 = false;
            											}
HXDLIN( 378)											if (_hx_tmp17) {
HXLINE( 378)												_this1->glStateAlpha = true;
HXDLIN( 378)												_this1->gl->enable(_this1->gl->BLEND);
            											}
            											else {
HXLINE( 378)												bool _hx_tmp18;
HXDLIN( 378)												if (!(enabled4)) {
HXLINE( 378)													_hx_tmp18 = _this1->glStateAlpha;
            												}
            												else {
HXLINE( 378)													_hx_tmp18 = false;
            												}
HXDLIN( 378)												if (_hx_tmp18) {
HXLINE( 378)													_this1->glStateAlpha = false;
HXDLIN( 378)													_this1->gl->disable(_this1->gl->BLEND);
            												}
            											}
            										}
HXDLIN( 378)										{
HXLINE( 378)											int mask = _this3->mask;
HXDLIN( 378)											bool clearMask = _this3->clearMask;
HXDLIN( 378)											if ((mask != _this1->maskState)) {
HXLINE( 378)												if ((mask == 0)) {
HXLINE( 378)													_this1->gl->disable(_this1->gl->STENCIL_TEST);
HXDLIN( 378)													_this1->maskState = mask;
            												}
            												else {
HXLINE( 378)													if ((mask == 2)) {
HXLINE( 378)														if (clearMask) {
HXLINE( 378)															_this1->gl->clear(_this1->gl->STENCIL_BUFFER_BIT);
            														}
HXDLIN( 378)														if ((_this1->maskState == 0)) {
HXLINE( 378)															_this1->gl->enable(_this1->gl->STENCIL_TEST);
            														}
HXDLIN( 378)														_this1->gl->stencilFunc(_this1->gl->ALWAYS,1,255);
HXDLIN( 378)														_this1->gl->stencilOp(_this1->gl->REPLACE,_this1->gl->REPLACE,_this1->gl->REPLACE);
HXDLIN( 378)														_this1->maskState = mask;
            													}
            													else {
HXLINE( 378)														if ((_this1->maskState == 0)) {
HXLINE( 378)															_this1->gl->enable(_this1->gl->STENCIL_TEST);
            														}
HXDLIN( 378)														_this1->gl->stencilOp(_this1->gl->KEEP,_this1->gl->KEEP,_this1->gl->KEEP);
HXDLIN( 378)														_this1->gl->stencilFunc(_this1->gl->EQUAL,1,255);
            													}
            												}
HXDLIN( 378)												_this1->maskState = mask;
            											}
            										}
HXDLIN( 378)										::peote::view::BufferInterface_obj::render(_this3->buffer,_this1,_this2,_this3);
HXDLIN( 378)										_this3->gl->useProgram(null());
            									}
            								}
HXDLIN( 378)								_this2->programListItem = _this2->programListItem->next;
            							}
            						}
            					}
            				}
HXDLIN( 378)				_this1->displayListItem = _this1->displayListItem->next;
            			}
            		}
            	}


void Main_obj::main(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_55_main)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(vbo,"vbo");
	HX_MARK_MEMBER_NAME(program,"program");
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(view,"view");
	HX_MARK_MEMBER_NAME(proj,"proj");
	HX_MARK_MEMBER_NAME(deltaTime,"deltaTime");
	HX_MARK_MEMBER_NAME(currentFrame,"currentFrame");
	HX_MARK_MEMBER_NAME(lastFrame,"lastFrame");
	HX_MARK_MEMBER_NAME(verticesData,"verticesData");
	HX_MARK_MEMBER_NAME(cube,"cube");
	HX_MARK_MEMBER_NAME(lightCube,"lightCube");
	HX_MARK_MEMBER_NAME(cubes,"cubes");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(image2,"image2");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(texture2,"texture2");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(initialized,"initialized");
	HX_MARK_MEMBER_NAME(peoteView,"peoteView");
	HX_MARK_MEMBER_NAME(uiDisplay,"uiDisplay");
	 ::lime::app::Application_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vbo,"vbo");
	HX_VISIT_MEMBER_NAME(program,"program");
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(view,"view");
	HX_VISIT_MEMBER_NAME(proj,"proj");
	HX_VISIT_MEMBER_NAME(deltaTime,"deltaTime");
	HX_VISIT_MEMBER_NAME(currentFrame,"currentFrame");
	HX_VISIT_MEMBER_NAME(lastFrame,"lastFrame");
	HX_VISIT_MEMBER_NAME(verticesData,"verticesData");
	HX_VISIT_MEMBER_NAME(cube,"cube");
	HX_VISIT_MEMBER_NAME(lightCube,"lightCube");
	HX_VISIT_MEMBER_NAME(cubes,"cubes");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(image2,"image2");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(texture2,"texture2");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(initialized,"initialized");
	HX_VISIT_MEMBER_NAME(peoteView,"peoteView");
	HX_VISIT_MEMBER_NAME(uiDisplay,"uiDisplay");
	 ::lime::app::Application_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return ::hx::Val( gl ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"vbo") ) { return ::hx::Val( vbo ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"view") ) { return ::hx::Val( view ); }
		if (HX_FIELD_EQ(inName,"proj") ) { return ::hx::Val( proj ); }
		if (HX_FIELD_EQ(inName,"cube") ) { return ::hx::Val( cube ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return ::hx::Val( model ); }
		if (HX_FIELD_EQ(inName,"cubes") ) { return ::hx::Val( cubes ); }
		if (HX_FIELD_EQ(inName,"image") ) { return ::hx::Val( image ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"image2") ) { return ::hx::Val( image2 ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { return ::hx::Val( program ); }
		if (HX_FIELD_EQ(inName,"texture") ) { return ::hx::Val( texture ); }
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { return ::hx::Val( onKeyUp_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"texture2") ) { return ::hx::Val( texture2 ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"deltaTime") ) { return ::hx::Val( deltaTime ); }
		if (HX_FIELD_EQ(inName,"lastFrame") ) { return ::hx::Val( lastFrame ); }
		if (HX_FIELD_EQ(inName,"lightCube") ) { return ::hx::Val( lightCube ); }
		if (HX_FIELD_EQ(inName,"peoteView") ) { return ::hx::Val( peoteView ); }
		if (HX_FIELD_EQ(inName,"uiDisplay") ) { return ::hx::Val( uiDisplay ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return ::hx::Val( onKeyDown_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { return ::hx::Val( initialized ); }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return ::hx::Val( onMouseMove_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentFrame") ) { return ::hx::Val( currentFrame ); }
		if (HX_FIELD_EQ(inName,"verticesData") ) { return ::hx::Val( verticesData ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setSliderEvents") ) { return ::hx::Val( setSliderEvents_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onPreloadComplete") ) { return ::hx::Val( onPreloadComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

::hx::Val Main_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"vbo") ) { vbo=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"view") ) { view=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"proj") ) { proj=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cube") ) { cube=inValue.Cast<  ::SimpleCubeProgram >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cubes") ) { cubes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"image2") ) { image2=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { program=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"texture2") ) { texture2=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"deltaTime") ) { deltaTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastFrame") ) { lastFrame=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightCube") ) { lightCube=inValue.Cast<  ::LightProgram >(); return inValue; }
		if (HX_FIELD_EQ(inName,"peoteView") ) { peoteView=inValue.Cast<  ::peote::view::PeoteView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uiDisplay") ) { uiDisplay=inValue.Cast<  ::peote::ui::PeoteUIDisplay >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentFrame") ) { currentFrame=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"verticesData") ) { verticesData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("vbo",c3,df,59,00));
	outFields->push(HX_("program",84,4a,f9,f3));
	outFields->push(HX_("model",a9,23,58,0c));
	outFields->push(HX_("view",65,32,4f,4e));
	outFields->push(HX_("proj",9d,c7,5e,4a));
	outFields->push(HX_("deltaTime",25,3c,5c,f5));
	outFields->push(HX_("currentFrame",34,5d,8f,4d));
	outFields->push(HX_("lastFrame",f7,a5,30,53));
	outFields->push(HX_("verticesData",c3,32,64,ad));
	outFields->push(HX_("cube",f5,3c,c9,41));
	outFields->push(HX_("lightCube",eb,1c,e7,ba));
	outFields->push(HX_("cubes",de,19,4c,4e));
	outFields->push(HX_("image",5b,1f,69,bd));
	outFields->push(HX_("image2",77,50,92,fe));
	outFields->push(HX_("texture",db,c8,e0,9e));
	outFields->push(HX_("texture2",f7,f6,ce,65));
	outFields->push(HX_("gl",25,5a,00,00));
	outFields->push(HX_("initialized",14,f5,0f,37));
	outFields->push(HX_("peoteView",d0,44,5a,a4));
	outFields->push(HX_("uiDisplay",4e,1e,a1,66));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Main_obj,vbo),HX_("vbo",c3,df,59,00)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Main_obj,program),HX_("program",84,4a,f9,f3)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Main_obj,model),HX_("model",a9,23,58,0c)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Main_obj,view),HX_("view",65,32,4f,4e)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Main_obj,proj),HX_("proj",9d,c7,5e,4a)},
	{::hx::fsFloat,(int)offsetof(Main_obj,deltaTime),HX_("deltaTime",25,3c,5c,f5)},
	{::hx::fsFloat,(int)offsetof(Main_obj,currentFrame),HX_("currentFrame",34,5d,8f,4d)},
	{::hx::fsFloat,(int)offsetof(Main_obj,lastFrame),HX_("lastFrame",f7,a5,30,53)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Main_obj,verticesData),HX_("verticesData",c3,32,64,ad)},
	{::hx::fsObject /*  ::SimpleCubeProgram */ ,(int)offsetof(Main_obj,cube),HX_("cube",f5,3c,c9,41)},
	{::hx::fsObject /*  ::LightProgram */ ,(int)offsetof(Main_obj,lightCube),HX_("lightCube",eb,1c,e7,ba)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Main_obj,cubes),HX_("cubes",de,19,4c,4e)},
	{::hx::fsObject /*  ::lime::graphics::Image */ ,(int)offsetof(Main_obj,image),HX_("image",5b,1f,69,bd)},
	{::hx::fsObject /*  ::lime::graphics::Image */ ,(int)offsetof(Main_obj,image2),HX_("image2",77,50,92,fe)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Main_obj,texture),HX_("texture",db,c8,e0,9e)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Main_obj,texture2),HX_("texture2",f7,f6,ce,65)},
	{::hx::fsObject /*  ::lime::_internal::backend::native::NativeOpenGLRenderContext */ ,(int)offsetof(Main_obj,gl),HX_("gl",25,5a,00,00)},
	{::hx::fsBool,(int)offsetof(Main_obj,initialized),HX_("initialized",14,f5,0f,37)},
	{::hx::fsObject /*  ::peote::view::PeoteView */ ,(int)offsetof(Main_obj,peoteView),HX_("peoteView",d0,44,5a,a4)},
	{::hx::fsObject /*  ::peote::ui::PeoteUIDisplay */ ,(int)offsetof(Main_obj,uiDisplay),HX_("uiDisplay",4e,1e,a1,66)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("vbo",c3,df,59,00),
	HX_("program",84,4a,f9,f3),
	HX_("model",a9,23,58,0c),
	HX_("view",65,32,4f,4e),
	HX_("proj",9d,c7,5e,4a),
	HX_("deltaTime",25,3c,5c,f5),
	HX_("currentFrame",34,5d,8f,4d),
	HX_("lastFrame",f7,a5,30,53),
	HX_("verticesData",c3,32,64,ad),
	HX_("cube",f5,3c,c9,41),
	HX_("lightCube",eb,1c,e7,ba),
	HX_("cubes",de,19,4c,4e),
	HX_("image",5b,1f,69,bd),
	HX_("image2",77,50,92,fe),
	HX_("texture",db,c8,e0,9e),
	HX_("texture2",f7,f6,ce,65),
	HX_("gl",25,5a,00,00),
	HX_("initialized",14,f5,0f,37),
	HX_("peoteView",d0,44,5a,a4),
	HX_("uiDisplay",4e,1e,a1,66),
	HX_("onPreloadComplete",43,37,5d,5c),
	HX_("initialize",50,31,bb,ec),
	HX_("setSliderEvents",dc,2a,d6,2a),
	HX_("update",09,86,05,87),
	HX_("onKeyDown",42,22,f2,73),
	HX_("onKeyUp",3b,58,3c,75),
	HX_("onMouseMove",b7,7e,f8,16),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

