// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED__OpenGLUtils_OpenGLUtils_Fields_
#include <_OpenGLUtils/OpenGLUtils_Fields_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_618960cc79d61807_20_glCreateShader,"_OpenGLUtils.OpenGLUtils_Fields_","glCreateShader",0x886dd7f6,"_OpenGLUtils.OpenGLUtils_Fields_.glCreateShader","OpenGLUtils.hx",20,0x287e6cdc)
HX_LOCAL_STACK_FRAME(_hx_pos_618960cc79d61807_40_glCreateProgram,"_OpenGLUtils.OpenGLUtils_Fields_","glCreateProgram",0x6c21e893,"_OpenGLUtils.OpenGLUtils_Fields_.glCreateProgram","OpenGLUtils.hx",40,0x287e6cdc)
namespace _OpenGLUtils{

void OpenGLUtils_Fields__obj::__construct() { }

Dynamic OpenGLUtils_Fields__obj::__CreateEmpty() { return new OpenGLUtils_Fields__obj; }

void *OpenGLUtils_Fields__obj::_hx_vtable = 0;

Dynamic OpenGLUtils_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OpenGLUtils_Fields__obj > _hx_result = new OpenGLUtils_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OpenGLUtils_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2aa3ece2;
}

 ::lime::graphics::opengl::GLObject OpenGLUtils_Fields__obj::glCreateShader( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl,::String source,int type){
            	HX_STACKFRAME(&_hx_pos_618960cc79d61807_20_glCreateShader)
HXLINE(  21)		 ::lime::graphics::opengl::GLObject shader = gl->createShader(type);
HXLINE(  22)		gl->shaderSource(shader,source);
HXLINE(  23)		gl->compileShader(shader);
HXLINE(  25)		if (::hx::IsEq( gl->getShaderParameter(shader,gl->COMPILE_STATUS),0 )) {
HXLINE(  26)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  26)			::String _hx_tmp1 = gl->getShaderInfoLog(shader);
HXDLIN(  26)			_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("Source/OpenGLUtils.hx",b0,6e,ab,bc),26,HX_("_OpenGLUtils.OpenGLUtils_Fields_",7e,43,fa,12),HX_("glCreateShader",06,c9,79,c8)));
HXLINE(  27)			return null();
            		}
HXLINE(  30)		return shader;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(OpenGLUtils_Fields__obj,glCreateShader,return )

 ::lime::graphics::opengl::GLObject OpenGLUtils_Fields__obj::glCreateProgram( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl,::String vertexSource,::String fragmentSource){
            	HX_STACKFRAME(&_hx_pos_618960cc79d61807_40_glCreateProgram)
HXLINE(  41)		 ::lime::graphics::opengl::GLObject vs = ::_OpenGLUtils::OpenGLUtils_Fields__obj::glCreateShader(gl,vertexSource,gl->VERTEX_SHADER);
HXLINE(  42)		 ::lime::graphics::opengl::GLObject fs = ::_OpenGLUtils::OpenGLUtils_Fields__obj::glCreateShader(gl,fragmentSource,gl->FRAGMENT_SHADER);
HXLINE(  44)		bool _hx_tmp;
HXDLIN(  44)		if (::hx::IsNotNull( vs )) {
HXLINE(  44)			_hx_tmp = ::hx::IsNull( fs );
            		}
            		else {
HXLINE(  44)			_hx_tmp = true;
            		}
HXDLIN(  44)		if (_hx_tmp) {
HXLINE(  45)			return null();
            		}
HXLINE(  48)		 ::lime::graphics::opengl::GLObject program = gl->createProgram();
HXLINE(  49)		gl->attachShader(program,vs);
HXLINE(  50)		gl->attachShader(program,fs);
HXLINE(  52)		gl->deleteShader(vs);
HXLINE(  53)		gl->deleteShader(fs);
HXLINE(  55)		gl->linkProgram(program);
HXLINE(  57)		if (::hx::IsEq( gl->getProgramParameter(program,gl->LINK_STATUS),0 )) {
HXLINE(  58)			 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(  58)			::String _hx_tmp2 = gl->getProgramInfoLog(program);
HXDLIN(  58)			_hx_tmp1(_hx_tmp2,::hx::SourceInfo(HX_("Source/OpenGLUtils.hx",b0,6e,ab,bc),58,HX_("_OpenGLUtils.OpenGLUtils_Fields_",7e,43,fa,12),HX_("glCreateProgram",83,e5,88,36)));
HXLINE(  59)			 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN(  59)			::String _hx_tmp4 = (HX_("VALIDATE_STATUS: ",61,4a,52,b0) + ::Std_obj::string(gl->getProgramParameter(program,gl->VALIDATE_STATUS)));
HXDLIN(  59)			_hx_tmp3(_hx_tmp4,::hx::SourceInfo(HX_("Source/OpenGLUtils.hx",b0,6e,ab,bc),59,HX_("_OpenGLUtils.OpenGLUtils_Fields_",7e,43,fa,12),HX_("glCreateProgram",83,e5,88,36)));
HXLINE(  60)			 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN(  60)			::String _hx_tmp6 = (HX_("ERROR: ",4e,70,de,69) + gl->getError());
HXDLIN(  60)			_hx_tmp5(_hx_tmp6,::hx::SourceInfo(HX_("Source/OpenGLUtils.hx",b0,6e,ab,bc),60,HX_("_OpenGLUtils.OpenGLUtils_Fields_",7e,43,fa,12),HX_("glCreateProgram",83,e5,88,36)));
HXLINE(  61)			return null();
            		}
HXLINE(  64)		return program;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(OpenGLUtils_Fields__obj,glCreateProgram,return )


OpenGLUtils_Fields__obj::OpenGLUtils_Fields__obj()
{
}

bool OpenGLUtils_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"glCreateShader") ) { outValue = glCreateShader_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"glCreateProgram") ) { outValue = glCreateProgram_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *OpenGLUtils_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *OpenGLUtils_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class OpenGLUtils_Fields__obj::__mClass;

static ::String OpenGLUtils_Fields__obj_sStaticFields[] = {
	HX_("glCreateShader",06,c9,79,c8),
	HX_("glCreateProgram",83,e5,88,36),
	::String(null())
};

void OpenGLUtils_Fields__obj::__register()
{
	OpenGLUtils_Fields__obj _hx_dummy;
	OpenGLUtils_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("_OpenGLUtils.OpenGLUtils_Fields_",7e,43,fa,12);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OpenGLUtils_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(OpenGLUtils_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< OpenGLUtils_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OpenGLUtils_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OpenGLUtils_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace _OpenGLUtils
