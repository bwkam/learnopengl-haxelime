// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds__List_ListNode
#include <haxe/ds/_List/ListNode.h>
#endif
#ifndef INCLUDED_utils_MultipassTemplate
#include <utils/MultipassTemplate.h>
#endif
#ifndef INCLUDED_utils__MultipassTemplate_TemplateExpr
#include <utils/_MultipassTemplate/TemplateExpr.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b711a49c958e9300_85_new,"utils.MultipassTemplate","new",0x33f8c4f9,"utils.MultipassTemplate.new","utils/MultipassTemplate.hx",85,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_108_execute,"utils.MultipassTemplate","execute",0x7f8abf4e,"utils.MultipassTemplate.execute","utils/MultipassTemplate.hx",108,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_117_resolve,"utils.MultipassTemplate","resolve",0x1addc805,"utils.MultipassTemplate.resolve","utils/MultipassTemplate.hx",117,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_132_parseTokens,"utils.MultipassTemplate","parseTokens",0xaf247986,"utils.MultipassTemplate.parseTokens","utils/MultipassTemplate.hx",132,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_178_parseBlock,"utils.MultipassTemplate","parseBlock",0x6ba57ca1,"utils.MultipassTemplate.parseBlock","utils/MultipassTemplate.hx",178,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_193_parse,"utils.MultipassTemplate","parse",0xdb939d0c,"utils.MultipassTemplate.parse","utils/MultipassTemplate.hx",193,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_271_parseExpr,"utils.MultipassTemplate","parseExpr",0xa0ec3c61,"utils.MultipassTemplate.parseExpr","utils/MultipassTemplate.hx",271,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_248_parseExpr,"utils.MultipassTemplate","parseExpr",0xa0ec3c61,"utils.MultipassTemplate.parseExpr","utils/MultipassTemplate.hx",248,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_296_makeConst,"utils.MultipassTemplate","makeConst",0xf41e5dee,"utils.MultipassTemplate.makeConst","utils/MultipassTemplate.hx",296,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_280_makeConst,"utils.MultipassTemplate","makeConst",0xf41e5dee,"utils.MultipassTemplate.makeConst","utils/MultipassTemplate.hx",280,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_285_makeConst,"utils.MultipassTemplate","makeConst",0xf41e5dee,"utils.MultipassTemplate.makeConst","utils/MultipassTemplate.hx",285,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_289_makeConst,"utils.MultipassTemplate","makeConst",0xf41e5dee,"utils.MultipassTemplate.makeConst","utils/MultipassTemplate.hx",289,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_293_makeConst,"utils.MultipassTemplate","makeConst",0xf41e5dee,"utils.MultipassTemplate.makeConst","utils/MultipassTemplate.hx",293,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_310_makePath,"utils.MultipassTemplate","makePath",0x9b709b7a,"utils.MultipassTemplate.makePath","utils/MultipassTemplate.hx",310,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_299_makePath,"utils.MultipassTemplate","makePath",0x9b709b7a,"utils.MultipassTemplate.makePath","utils/MultipassTemplate.hx",299,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_314_makeExpr,"utils.MultipassTemplate","makeExpr",0x943cb30a,"utils.MultipassTemplate.makeExpr","utils/MultipassTemplate.hx",314,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_317_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",317,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_352_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",352,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_345_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",345,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_346_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",346,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_338_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",338,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_336_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",336,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_337_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",337,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_339_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",339,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_341_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",341,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_343_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",343,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_344_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",344,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_340_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",340,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_342_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",342,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_347_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",347,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_358_makeExpr2,"utils.MultipassTemplate","makeExpr2",0x20dff5e8,"utils.MultipassTemplate.makeExpr2","utils/MultipassTemplate.hx",358,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_364_run,"utils.MultipassTemplate","run",0x33fbdbe4,"utils.MultipassTemplate.run","utils/MultipassTemplate.hx",364,0xd85c2318)
static const ::String _hx_array_data_0a2ad487_43[] = {
	HX_("::else::",79,3a,ed,3e),
};
static const ::String _hx_array_data_0a2ad487_44[] = {
	HX_("::end::",9b,f8,09,0d),
};
static const ::String _hx_array_data_0a2ad487_45[] = {
	HX_("::end::",9b,f8,09,0d),
};
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_57_boot,"utils.MultipassTemplate","boot",0x3dcc9579,"utils.MultipassTemplate.boot","utils/MultipassTemplate.hx",57,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_58_boot,"utils.MultipassTemplate","boot",0x3dcc9579,"utils.MultipassTemplate.boot","utils/MultipassTemplate.hx",58,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_59_boot,"utils.MultipassTemplate","boot",0x3dcc9579,"utils.MultipassTemplate.boot","utils/MultipassTemplate.hx",59,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_60_boot,"utils.MultipassTemplate","boot",0x3dcc9579,"utils.MultipassTemplate.boot","utils/MultipassTemplate.hx",60,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_61_boot,"utils.MultipassTemplate","boot",0x3dcc9579,"utils.MultipassTemplate.boot","utils/MultipassTemplate.hx",61,0xd85c2318)
HX_LOCAL_STACK_FRAME(_hx_pos_b711a49c958e9300_67_boot,"utils.MultipassTemplate","boot",0x3dcc9579,"utils.MultipassTemplate.boot","utils/MultipassTemplate.hx",67,0xd85c2318)
namespace utils{

void MultipassTemplate_obj::__construct(::String str){
            	HX_STACKFRAME(&_hx_pos_b711a49c958e9300_85_new)
HXLINE(  86)		 ::haxe::ds::List tokens = this->parseTokens(str);
HXLINE(  87)		this->expr = this->parseBlock(tokens);
HXLINE(  88)		if (!(tokens->isEmpty())) {
HXLINE(  89)			HX_STACK_DO_THROW(((HX_("Unexpected '",38,54,94,03) + ::Std_obj::string( ::Dynamic(tokens->first()->__Field(HX_("s",73,00,00,00),::hx::paccDynamic)))) + HX_("'",27,00,00,00)));
            		}
            	}

Dynamic MultipassTemplate_obj::__CreateEmpty() { return new MultipassTemplate_obj; }

void *MultipassTemplate_obj::_hx_vtable = 0;

Dynamic MultipassTemplate_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MultipassTemplate_obj > _hx_result = new MultipassTemplate_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MultipassTemplate_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x20d5e69f;
}

::String MultipassTemplate_obj::execute( ::Dynamic context, ::Dynamic macros){
            	HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_108_execute)
HXLINE( 109)		 ::Dynamic _hx_tmp;
HXDLIN( 109)		if (::hx::IsNull( macros )) {
HXLINE( 109)			_hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(0));
            		}
            		else {
HXLINE( 109)			_hx_tmp = macros;
            		}
HXDLIN( 109)		this->macros = _hx_tmp;
HXLINE( 110)		this->context = context;
HXLINE( 111)		this->stack =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 112)		this->buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 113)		this->run(this->expr);
HXLINE( 114)		return this->buf->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC2(MultipassTemplate_obj,execute,return )

 ::Dynamic MultipassTemplate_obj::resolve(::String v){
            	HX_STACKFRAME(&_hx_pos_b711a49c958e9300_117_resolve)
HXLINE( 118)		if ((v == HX_("__current__",79,78,5a,6f))) {
HXLINE( 119)			return this->context;
            		}
HXLINE( 120)		 ::Dynamic value = ::Reflect_obj::getProperty(this->context,v);
HXLINE( 121)		bool _hx_tmp;
HXDLIN( 121)		if (::hx::IsNull( value )) {
HXLINE( 121)			_hx_tmp = ::Reflect_obj::hasField(this->context,v);
            		}
            		else {
HXLINE( 121)			_hx_tmp = true;
            		}
HXDLIN( 121)		if (_hx_tmp) {
HXLINE( 122)			return value;
            		}
HXLINE( 123)		{
HXLINE( 123)			 ::haxe::ds::_List::ListNode _g_head = this->stack->h;
HXDLIN( 123)			while(::hx::IsNotNull( _g_head )){
HXLINE( 123)				 ::Dynamic val = _g_head->item;
HXDLIN( 123)				_g_head = _g_head->next;
HXDLIN( 123)				 ::Dynamic ctx = val;
HXLINE( 124)				value = ::Reflect_obj::getProperty(ctx,v);
HXLINE( 125)				bool _hx_tmp1;
HXDLIN( 125)				if (::hx::IsNull( value )) {
HXLINE( 125)					_hx_tmp1 = ::Reflect_obj::hasField(ctx,v);
            				}
            				else {
HXLINE( 125)					_hx_tmp1 = true;
            				}
HXDLIN( 125)				if (_hx_tmp1) {
HXLINE( 126)					return value;
            				}
            			}
            		}
HXLINE( 128)		if (!(::Reflect_obj::hasField(::utils::MultipassTemplate_obj::globals,v))) {
HXLINE( 128)			HX_STACK_DO_THROW(v);
            		}
HXLINE( 129)		return ::Reflect_obj::field(::utils::MultipassTemplate_obj::globals,v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MultipassTemplate_obj,resolve,return )

 ::haxe::ds::List MultipassTemplate_obj::parseTokens(::String data){
            	HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_132_parseTokens)
HXLINE( 133)		 ::haxe::ds::List tokens =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 134)		while(::utils::MultipassTemplate_obj::splitter->match(data)){
HXLINE( 135)			 ::Dynamic p = ::utils::MultipassTemplate_obj::splitter->matchedPos();
HXLINE( 136)			if (::hx::IsGreater( p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic),0 )) {
HXLINE( 137)				tokens->add( ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("l",6c,00,00,00),null())
            					->setFixed(1,HX_("p",70,00,00,00),data.substr(0,p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic)))
            					->setFixed(2,HX_("s",73,00,00,00),true)));
            			}
HXLINE( 140)			if (::hx::IsEq( data.charCodeAt(( (int)(p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic)) )),58 )) {
HXLINE( 141)				tokens->add( ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("l",6c,00,00,00),null())
            					->setFixed(1,HX_("p",70,00,00,00),data.substr(( (int)((p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + 2)) ),(( (int)(p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic)) ) - 4)))
            					->setFixed(2,HX_("s",73,00,00,00),false)));
HXLINE( 142)				data = ::utils::MultipassTemplate_obj::splitter->matchedRight();
HXLINE( 143)				continue;
            			}
HXLINE( 147)			int parp = ( (int)((p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic))) );
HXLINE( 148)			int npar = 1;
HXLINE( 149)			::Array< ::String > params = ::Array_obj< ::String >::__new(0);
HXLINE( 150)			::String part = HX_("",00,00,00,00);
HXLINE( 151)			while(true){
HXLINE( 152)				 ::Dynamic c = data.charCodeAt(parp);
HXLINE( 153)				parp = (parp + 1);
HXLINE( 154)				if (::hx::IsEq( c,40 )) {
HXLINE( 155)					npar = (npar + 1);
            				}
            				else {
HXLINE( 156)					if (::hx::IsEq( c,41 )) {
HXLINE( 157)						npar = (npar - 1);
HXLINE( 158)						if ((npar <= 0)) {
HXLINE( 158)							goto _hx_goto_5;
            						}
            					}
            					else {
HXLINE( 159)						if (::hx::IsNull( c )) {
HXLINE( 160)							HX_STACK_DO_THROW(HX_("Unclosed macro parenthesis",c7,16,f6,c7));
            						}
            					}
            				}
HXLINE( 162)				bool _hx_tmp;
HXDLIN( 162)				if (::hx::IsEq( c,44 )) {
HXLINE( 162)					_hx_tmp = (npar == 1);
            				}
            				else {
HXLINE( 162)					_hx_tmp = false;
            				}
HXDLIN( 162)				if (_hx_tmp) {
HXLINE( 163)					params->push(part);
HXLINE( 164)					part = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 166)					part = (part + ::String::fromCharCode(( (int)(c) )));
            				}
            			}
            			_hx_goto_5:;
HXLINE( 169)			params->push(part);
HXLINE( 170)			tokens->add( ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("l",6c,00,00,00),params)
            				->setFixed(1,HX_("p",70,00,00,00),::utils::MultipassTemplate_obj::splitter->matched(2))
            				->setFixed(2,HX_("s",73,00,00,00),false)));
HXLINE( 171)			data = data.substr(parp,(data.length - parp));
            		}
HXLINE( 173)		if ((data.length > 0)) {
HXLINE( 174)			tokens->add( ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("l",6c,00,00,00),null())
            				->setFixed(1,HX_("p",70,00,00,00),data)
            				->setFixed(2,HX_("s",73,00,00,00),true)));
            		}
HXLINE( 175)		return tokens;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MultipassTemplate_obj,parseTokens,return )

 ::utils::_MultipassTemplate::TemplateExpr MultipassTemplate_obj::parseBlock( ::haxe::ds::List tokens){
            	HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_178_parseBlock)
HXLINE( 179)		 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 180)		while(true){
HXLINE( 181)			 ::Dynamic t = tokens->first();
HXLINE( 182)			if (::hx::IsNull( t )) {
HXLINE( 183)				goto _hx_goto_7;
            			}
HXLINE( 184)			bool _hx_tmp;
HXDLIN( 184)			if (!(( (bool)(t->__Field(HX_("s",73,00,00,00),::hx::paccDynamic)) ))) {
HXLINE( 184)				bool _hx_tmp1;
HXDLIN( 184)				if (::hx::IsNotEq( t->__Field(HX_("p",70,00,00,00),::hx::paccDynamic),HX_("end",db,03,4d,00) )) {
HXLINE( 184)					_hx_tmp1 = ::hx::IsEq( t->__Field(HX_("p",70,00,00,00),::hx::paccDynamic),HX_("else",b9,e4,14,43) );
            				}
            				else {
HXLINE( 184)					_hx_tmp1 = true;
            				}
HXDLIN( 184)				if (!(_hx_tmp1)) {
HXLINE( 184)					_hx_tmp = (( (::String)(t->__Field(HX_("p",70,00,00,00),::hx::paccDynamic)) ).substr(0,7) == HX_("elseif ",8a,1a,aa,10));
            				}
            				else {
HXLINE( 184)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 184)				_hx_tmp = false;
            			}
HXDLIN( 184)			if (_hx_tmp) {
HXLINE( 185)				goto _hx_goto_7;
            			}
HXLINE( 186)			l->add(this->parse(tokens));
            		}
            		_hx_goto_7:;
HXLINE( 188)		if ((l->length == 1)) {
HXLINE( 189)			return l->first().StaticCast<  ::utils::_MultipassTemplate::TemplateExpr >();
            		}
HXLINE( 190)		return ::utils::_MultipassTemplate::TemplateExpr_obj::OpBlock(l);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MultipassTemplate_obj,parseBlock,return )

 ::utils::_MultipassTemplate::TemplateExpr MultipassTemplate_obj::parse( ::haxe::ds::List tokens){
            	HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_193_parse)
HXLINE( 194)		 ::Dynamic t = tokens->pop();
HXLINE( 195)		::String p = ( (::String)(t->__Field(HX_("p",70,00,00,00),::hx::paccDynamic)) );
HXLINE( 196)		if (( (bool)(t->__Field(HX_("s",73,00,00,00),::hx::paccDynamic)) )) {
HXLINE( 197)			return ::utils::_MultipassTemplate::TemplateExpr_obj::OpStr(p);
            		}
HXLINE( 199)		if (::hx::IsNotNull( t->__Field(HX_("l",6c,00,00,00),::hx::paccDynamic) )) {
HXLINE( 200)			 ::haxe::ds::List pe =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 201)			{
HXLINE( 201)				int _g = 0;
HXDLIN( 201)				::Array< ::String > _g1 = ( (::Array< ::String >)(t->__Field(HX_("l",6c,00,00,00),::hx::paccDynamic)) );
HXDLIN( 201)				while((_g < _g1->length)){
HXLINE( 201)					::String p1 = _g1->__get(_g);
HXDLIN( 201)					_g = (_g + 1);
HXLINE( 202)					pe->add(this->parseBlock(this->parseTokens(p1)));
            				}
            			}
HXLINE( 203)			return ::utils::_MultipassTemplate::TemplateExpr_obj::OpMacro(p,pe);
            		}
HXLINE( 206)		if ((p.substr(0,3) == HX_("if ",a3,05,50,00))) {
HXLINE( 207)			p = p.substr(3,(p.length - 3));
HXLINE( 208)			 ::Dynamic e = null();
HXLINE( 209)			try {
            				HX_STACK_CATCHABLE(::String, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 210)				e = this->parseExpr(p);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            					HX_STACK_BEGIN_CATCH
            					::String s1 = _hx_e;
HXLINE( 211)					::haxe::Log_obj::trace(s1,::hx::SourceInfo(HX_("utils/MultipassTemplate.hx",18,23,5c,d8),211,HX_("utils.MultipassTemplate",87,d4,2a,0a),HX_("parse",33,90,55,bd)));
HXLINE( 212)					HX_STACK_DO_THROW(s1);
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g2 = _hx_e;
HXLINE( 211)					{
HXLINE( 211)						null();
            					}
HXLINE( 209)					if (::Std_obj::isOfType(_g2->value,::hx::ClassOf< ::String >())) {
HXLINE( 211)						::String s1 = ( (::String)(_g2->value) );
HXDLIN( 211)						::haxe::Log_obj::trace(s1,::hx::SourceInfo(HX_("utils/MultipassTemplate.hx",18,23,5c,d8),211,HX_("utils.MultipassTemplate",87,d4,2a,0a),HX_("parse",33,90,55,bd)));
HXLINE( 212)						HX_STACK_DO_THROW(s1);
            					}
            					else {
HXLINE( 209)						HX_STACK_DO_THROW(_g2);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 214)			 ::utils::_MultipassTemplate::TemplateExpr eif = this->parseBlock(tokens);
HXLINE( 215)			 ::Dynamic t1 = tokens->first();
HXLINE( 216)			 ::utils::_MultipassTemplate::TemplateExpr eelse;
HXLINE( 217)			if (::hx::IsNull( t1 )) {
HXLINE( 218)				HX_STACK_DO_THROW(HX_("Unclosed 'if'",fe,74,80,71));
            			}
HXLINE( 219)			if (::hx::IsEq( t1->__Field(HX_("p",70,00,00,00),::hx::paccDynamic),HX_("end",db,03,4d,00) )) {
HXLINE( 220)				tokens->pop();
HXLINE( 221)				eelse = null();
            			}
            			else {
HXLINE( 222)				if (::hx::IsEq( t1->__Field(HX_("p",70,00,00,00),::hx::paccDynamic),HX_("else",b9,e4,14,43) )) {
HXLINE( 223)					tokens->pop();
HXLINE( 224)					eelse = this->parseBlock(tokens);
HXLINE( 225)					t1 = tokens->pop();
HXLINE( 226)					bool _hx_tmp;
HXDLIN( 226)					if (::hx::IsNotNull( t1 )) {
HXLINE( 226)						_hx_tmp = ::hx::IsNotEq( t1->__Field(HX_("p",70,00,00,00),::hx::paccDynamic),HX_("end",db,03,4d,00) );
            					}
            					else {
HXLINE( 226)						_hx_tmp = true;
            					}
HXDLIN( 226)					if (_hx_tmp) {
HXLINE( 227)						HX_STACK_DO_THROW(HX_("Unclosed 'else'",a2,29,dd,e0));
            					}
            				}
            				else {
HXLINE( 229)					t1->__SetField(HX_("p",70,00,00,00),( (::String)(t1->__Field(HX_("p",70,00,00,00),::hx::paccDynamic)) ).substr(4,(( (::String)(t1->__Field(HX_("p",70,00,00,00),::hx::paccDynamic)) ).length - 4)),::hx::paccDynamic);
HXLINE( 230)					eelse = this->parse(tokens);
            				}
            			}
HXLINE( 232)			return ::utils::_MultipassTemplate::TemplateExpr_obj::OpIf(e,eif,eelse);
            		}
HXLINE( 234)		if ((p.substr(0,8) == HX_("foreach ",56,db,78,ce))) {
HXLINE( 235)			p = p.substr(8,(p.length - 8));
HXLINE( 236)			 ::Dynamic e1 = this->parseExpr(p);
HXLINE( 237)			 ::utils::_MultipassTemplate::TemplateExpr efor = this->parseBlock(tokens);
HXLINE( 238)			 ::Dynamic t2 = tokens->pop();
HXLINE( 239)			bool _hx_tmp1;
HXDLIN( 239)			if (::hx::IsNotNull( t2 )) {
HXLINE( 239)				_hx_tmp1 = ::hx::IsNotEq( t2->__Field(HX_("p",70,00,00,00),::hx::paccDynamic),HX_("end",db,03,4d,00) );
            			}
            			else {
HXLINE( 239)				_hx_tmp1 = true;
            			}
HXDLIN( 239)			if (_hx_tmp1) {
HXLINE( 240)				HX_STACK_DO_THROW(HX_("Unclosed 'foreach'",89,5b,50,42));
            			}
HXLINE( 241)			return ::utils::_MultipassTemplate::TemplateExpr_obj::OpForeach(e1,efor);
            		}
HXLINE( 243)		if (::utils::MultipassTemplate_obj::expr_splitter->match(p)) {
HXLINE( 244)			return ::utils::_MultipassTemplate::TemplateExpr_obj::OpExpr(this->parseExpr(p));
            		}
HXLINE( 245)		return ::utils::_MultipassTemplate::TemplateExpr_obj::OpVar(p);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MultipassTemplate_obj,parse,return )

 ::Dynamic MultipassTemplate_obj::parseExpr(::String data){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,e,::String,expr) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_271_parseExpr)
HXLINE( 271)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 272)				return e->__get(0)();
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 273)					{
HXLINE( 273)						null();
            					}
HXDLIN( 273)					 ::Dynamic v = _g;
HXLINE( 275)					HX_STACK_DO_THROW( ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("v",76,00,00,00),v)
            						->setFixed(1,HX_("expr",35,fd,1d,43),expr)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 271)			return null();
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_248_parseExpr)
HXLINE( 249)		 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 250)		::String expr = data;
HXLINE( 251)		while(::utils::MultipassTemplate_obj::expr_splitter->match(data)){
HXLINE( 252)			 ::Dynamic p = ::utils::MultipassTemplate_obj::expr_splitter->matchedPos();
HXLINE( 253)			int k = ( (int)((p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic))) );
HXLINE( 254)			if (::hx::IsNotEq( p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic),0 )) {
HXLINE( 255)				l->add( ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("p",70,00,00,00),data.substr(0,p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic)))
            					->setFixed(1,HX_("s",73,00,00,00),true)));
            			}
HXLINE( 256)			::String p1 = ::utils::MultipassTemplate_obj::expr_splitter->matched(0);
HXLINE( 257)			l->add( ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("p",70,00,00,00),p1)
            				->setFixed(1,HX_("s",73,00,00,00),(p1.indexOf(HX_("\"",22,00,00,00),null()) >= 0))));
HXLINE( 258)			data = ::utils::MultipassTemplate_obj::expr_splitter->matchedRight();
            		}
HXLINE( 260)		if ((data.length != 0)) {
HXLINE( 261)			l->add( ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("p",70,00,00,00),data)
            				->setFixed(1,HX_("s",73,00,00,00),true)));
            		}
HXLINE( 262)		::Array< ::Dynamic> e = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 263)		try {
            			HX_STACK_CATCHABLE(::String, 0);
            			HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 264)			e[0] = this->makeExpr(l);
HXLINE( 265)			if (!(l->isEmpty())) {
HXLINE( 266)				HX_STACK_DO_THROW( ::Dynamic(l->first()->__Field(HX_("p",70,00,00,00),::hx::paccDynamic)));
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            				HX_STACK_BEGIN_CATCH
            				::String s1 = _hx_e;
HXLINE( 268)				HX_STACK_DO_THROW((((HX_("Unexpected '",38,54,94,03) + s1) + HX_("' in ",22,80,17,8a)) + expr));
            			}
            			else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::ValueException _g = _hx_e;
HXLINE( 267)				{
HXLINE( 267)					null();
            				}
HXLINE( 263)				if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::String >())) {
HXLINE( 267)					::String s1 = ( (::String)(_g->value) );
HXLINE( 268)					HX_STACK_DO_THROW((((HX_("Unexpected '",38,54,94,03) + s1) + HX_("' in ",22,80,17,8a)) + expr));
            				}
            				else {
HXLINE( 263)					HX_STACK_DO_THROW(_g);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 270)		return  ::Dynamic(new _hx_Closure_0(e,expr));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MultipassTemplate_obj,parseExpr,return )

 ::Dynamic MultipassTemplate_obj::makeConst(::String v){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3,::Array< ::String >,v1, ::utils::MultipassTemplate,me) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b711a49c958e9300_296_makeConst)
HXLINE( 296)			return me->resolve(v1->__get(0));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_b711a49c958e9300_280_makeConst)
HXDLIN( 280)		::Array< ::String > v1 = ::Array_obj< ::String >::__new(1)->init(0,v);
HXLINE( 281)		::utils::MultipassTemplate_obj::expr_trim->match(v1->__get(0));
HXLINE( 282)		v1[0] = ::utils::MultipassTemplate_obj::expr_trim->matched(1);
HXLINE( 283)		if (::hx::IsEq( v1->__get(0).charCodeAt(0),34 )) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::String,str) HXARGC(0)
            			::String _hx_run(){
            				HX_STACKFRAME(&_hx_pos_b711a49c958e9300_285_makeConst)
HXLINE( 285)				return str;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 284)			::String str = v1->__get(0).substr(1,(v1->__get(0).length - 2));
HXLINE( 285)			return  ::Dynamic(new _hx_Closure_0(str));
            		}
HXLINE( 287)		if (::utils::MultipassTemplate_obj::expr_int->match(v1->__get(0))) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,i) HXARGC(0)
            			 ::Dynamic _hx_run(){
            				HX_STACKFRAME(&_hx_pos_b711a49c958e9300_289_makeConst)
HXLINE( 289)				return i;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 288)			 ::Dynamic i = ::Std_obj::parseInt(v1->__get(0));
HXLINE( 289)			return  ::Dynamic(new _hx_Closure_1(i));
            		}
HXLINE( 291)		if (::utils::MultipassTemplate_obj::expr_float->match(v1->__get(0))) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2,Float,f) HXARGC(0)
            			Float _hx_run(){
            				HX_STACKFRAME(&_hx_pos_b711a49c958e9300_293_makeConst)
HXLINE( 293)				return f;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 292)			Float f = ::Std_obj::parseFloat(v1->__get(0));
HXLINE( 293)			return  ::Dynamic(new _hx_Closure_2(f));
            		}
HXLINE( 295)		 ::utils::MultipassTemplate me = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 296)		return  ::Dynamic(new _hx_Closure_3(v1,me));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MultipassTemplate_obj,makeConst,return )

 ::Dynamic MultipassTemplate_obj::makePath( ::Dynamic e, ::haxe::ds::List l){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::Array< ::String >,f, ::Dynamic,e) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b711a49c958e9300_310_makePath)
HXLINE( 310)			 ::Dynamic _hx_tmp = e();
HXDLIN( 310)			return ::Reflect_obj::field(_hx_tmp,f->__get(0));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_b711a49c958e9300_299_makePath)
HXLINE( 300)		 ::Dynamic p = l->first();
HXLINE( 301)		bool _hx_tmp;
HXDLIN( 301)		if (::hx::IsNotNull( p )) {
HXLINE( 301)			_hx_tmp = ::hx::IsNotEq( p->__Field(HX_("p",70,00,00,00),::hx::paccDynamic),HX_(".",2e,00,00,00) );
            		}
            		else {
HXLINE( 301)			_hx_tmp = true;
            		}
HXDLIN( 301)		if (_hx_tmp) {
HXLINE( 302)			return e;
            		}
HXLINE( 303)		l->pop();
HXLINE( 304)		 ::Dynamic field = l->pop();
HXLINE( 305)		bool _hx_tmp1;
HXDLIN( 305)		if (::hx::IsNotNull( field )) {
HXLINE( 305)			_hx_tmp1 = !(( (bool)(field->__Field(HX_("s",73,00,00,00),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 305)			_hx_tmp1 = true;
            		}
HXDLIN( 305)		if (_hx_tmp1) {
HXLINE( 306)			HX_STACK_DO_THROW( ::Dynamic(field->__Field(HX_("p",70,00,00,00),::hx::paccDynamic)));
            		}
HXLINE( 307)		::Array< ::String > f = ::Array_obj< ::String >::__new(1)->init(0, ::Dynamic(field->__Field(HX_("p",70,00,00,00),::hx::paccDynamic)));
HXLINE( 308)		::utils::MultipassTemplate_obj::expr_trim->match(f->__get(0));
HXLINE( 309)		f[0] = ::utils::MultipassTemplate_obj::expr_trim->matched(1);
HXLINE( 310)		return this->makePath( ::Dynamic(new _hx_Closure_0(f,e)),l);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MultipassTemplate_obj,makePath,return )

 ::Dynamic MultipassTemplate_obj::makeExpr( ::haxe::ds::List l){
            	HX_STACKFRAME(&_hx_pos_b711a49c958e9300_314_makeExpr)
HXDLIN( 314)		return this->makePath(this->makeExpr2(l),l);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MultipassTemplate_obj,makeExpr,return )

 ::Dynamic MultipassTemplate_obj::makeExpr2( ::haxe::ds::List l){
            	HX_STACKFRAME(&_hx_pos_b711a49c958e9300_317_makeExpr2)
HXLINE( 318)		 ::Dynamic p = l->pop();
HXLINE( 319)		if (::hx::IsNull( p )) {
HXLINE( 320)			HX_STACK_DO_THROW(HX_("<eof>",3e,ee,21,cf));
            		}
HXLINE( 321)		if (( (bool)(p->__Field(HX_("s",73,00,00,00),::hx::paccDynamic)) )) {
HXLINE( 322)			return this->makeConst(( (::String)(p->__Field(HX_("p",70,00,00,00),::hx::paccDynamic)) ));
            		}
HXLINE( 323)		::String _hx_switch_0 = ( (::String)(p->__Field(HX_("p",70,00,00,00),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("!",21,00,00,00)) ){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,e) HXARGC(0)
            			bool _hx_run(){
            				HX_STACKFRAME(&_hx_pos_b711a49c958e9300_352_makeExpr2)
HXLINE( 353)				 ::Dynamic v = e();
HXLINE( 354)				if (::hx::IsNotNull( v )) {
HXLINE( 354)					return ::hx::IsEq( v,false );
            				}
            				else {
HXLINE( 354)					return true;
            				}
HXDLIN( 354)				return false;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 351)			 ::Dynamic e = this->makeExpr(l);
HXLINE( 352)			return  ::Dynamic(new _hx_Closure_0(e));
HXLINE( 350)			goto _hx_goto_22;
            		}
            		if (  (_hx_switch_0==HX_("(",28,00,00,00)) ){
HXLINE( 325)			 ::Dynamic e1 = this->makeExpr(l);
HXLINE( 326)			 ::Dynamic p1 = l->pop();
HXLINE( 327)			bool _hx_tmp;
HXDLIN( 327)			if (::hx::IsNotNull( p1 )) {
HXLINE( 327)				_hx_tmp = ( (bool)(p1->__Field(HX_("s",73,00,00,00),::hx::paccDynamic)) );
            			}
            			else {
HXLINE( 327)				_hx_tmp = true;
            			}
HXDLIN( 327)			if (_hx_tmp) {
HXLINE( 328)				HX_STACK_DO_THROW(p1);
            			}
HXLINE( 329)			if (::hx::IsEq( p1->__Field(HX_("p",70,00,00,00),::hx::paccDynamic),HX_(")",29,00,00,00) )) {
HXLINE( 330)				return e1;
            			}
HXLINE( 331)			 ::Dynamic e2 = this->makeExpr(l);
HXLINE( 332)			 ::Dynamic p2 = l->pop();
HXLINE( 333)			bool _hx_tmp1;
HXDLIN( 333)			if (::hx::IsNotNull( p2 )) {
HXLINE( 333)				_hx_tmp1 = ::hx::IsNotEq( p2->__Field(HX_("p",70,00,00,00),::hx::paccDynamic),HX_(")",29,00,00,00) );
            			}
            			else {
HXLINE( 333)				_hx_tmp1 = true;
            			}
HXDLIN( 333)			if (_hx_tmp1) {
HXLINE( 334)				HX_STACK_DO_THROW(p2);
            			}
HXLINE( 335)			::String _hx_switch_1 = ( (::String)(p1->__Field(HX_("p",70,00,00,00),::hx::paccDynamic)) );
            			if (  (_hx_switch_1==HX_("!=",fc,1c,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_345_makeExpr2)
HXLINE( 345)					 ::Dynamic _hx_tmp = e1();
HXDLIN( 345)					return ::hx::IsNotEq( _hx_tmp,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 345)				return  ::Dynamic(new _hx_Closure_1(e2,e1));
HXDLIN( 345)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_1==HX_("&&",40,21,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_346_makeExpr2)
HXLINE( 346)					bool _hx_tmp;
HXDLIN( 346)					if (( (bool)(e1()) )) {
HXLINE( 346)						_hx_tmp = ( (bool)(e2()) );
            					}
            					else {
HXLINE( 346)						_hx_tmp = false;
            					}
HXDLIN( 346)					return _hx_tmp;
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 346)				return  ::Dynamic(new _hx_Closure_2(e2,e1));
HXDLIN( 346)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_1==HX_("*",2a,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_338_makeExpr2)
HXLINE( 338)					 ::Dynamic _hx_tmp = e1();
HXDLIN( 338)					return (( (Float)(_hx_tmp) ) * ( (Float)(e2()) ));
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 338)				return  ::Dynamic(new _hx_Closure_3(e2,e1));
HXDLIN( 338)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_1==HX_("+",2b,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_336_makeExpr2)
HXLINE( 336)					 ::Dynamic _hx_tmp = e1();
HXDLIN( 336)					return (_hx_tmp + e2());
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 336)				return  ::Dynamic(new _hx_Closure_4(e2,e1));
HXDLIN( 336)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_1==HX_("-",2d,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_337_makeExpr2)
HXLINE( 337)					 ::Dynamic _hx_tmp = e1();
HXDLIN( 337)					return (( (Float)(_hx_tmp) ) - ( (Float)(e2()) ));
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 337)				return  ::Dynamic(new _hx_Closure_5(e2,e1));
HXDLIN( 337)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_1==HX_("/",2f,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_339_makeExpr2)
HXLINE( 339)					 ::Dynamic _hx_tmp = e1();
HXDLIN( 339)					return (( (Float)(_hx_tmp) ) / ( (Float)(e2()) ));
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 339)				return  ::Dynamic(new _hx_Closure_6(e2,e1));
HXDLIN( 339)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_1==HX_("<",3c,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_7, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_341_makeExpr2)
HXLINE( 341)					 ::Dynamic _hx_tmp = e1();
HXDLIN( 341)					return ::hx::IsLess( _hx_tmp,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 341)				return  ::Dynamic(new _hx_Closure_7(e2,e1));
HXDLIN( 341)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_1==HX_("<=",81,34,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_8, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_343_makeExpr2)
HXLINE( 343)					 ::Dynamic _hx_tmp = e1();
HXDLIN( 343)					return ::hx::IsLessEq( _hx_tmp,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 343)				return  ::Dynamic(new _hx_Closure_8(e2,e1));
HXDLIN( 343)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_1==HX_("==",60,35,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_9, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_344_makeExpr2)
HXLINE( 344)					 ::Dynamic _hx_tmp = e1();
HXDLIN( 344)					return ::hx::IsEq( _hx_tmp,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 344)				return  ::Dynamic(new _hx_Closure_9(e2,e1));
HXDLIN( 344)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_1==HX_(">",3e,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_10, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_340_makeExpr2)
HXLINE( 340)					 ::Dynamic _hx_tmp = e1();
HXDLIN( 340)					return ::hx::IsGreater( _hx_tmp,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 340)				return  ::Dynamic(new _hx_Closure_10(e2,e1));
HXDLIN( 340)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_1==HX_(">=",3f,36,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_11, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_342_makeExpr2)
HXLINE( 342)					 ::Dynamic _hx_tmp = e1();
HXDLIN( 342)					return ::hx::IsGreaterEq( _hx_tmp,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 342)				return  ::Dynamic(new _hx_Closure_11(e2,e1));
HXDLIN( 342)				goto _hx_goto_23;
            			}
            			if (  (_hx_switch_1==HX_("||",80,6c,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_12, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_b711a49c958e9300_347_makeExpr2)
HXLINE( 347)					bool _hx_tmp;
HXDLIN( 347)					if (!(( (bool)(e1()) ))) {
HXLINE( 347)						_hx_tmp = ( (bool)(e2()) );
            					}
            					else {
HXLINE( 347)						_hx_tmp = true;
            					}
HXDLIN( 347)					return _hx_tmp;
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 347)				return  ::Dynamic(new _hx_Closure_12(e2,e1));
HXDLIN( 347)				goto _hx_goto_23;
            			}
            			/* default */{
HXLINE( 348)				HX_STACK_DO_THROW( ::Dynamic((HX_("Unknown operation ",0f,7f,15,6f) + p1->__Field(HX_("p",70,00,00,00),::hx::paccDynamic))));
            			}
            			_hx_goto_23:;
HXLINE( 324)			goto _hx_goto_22;
            		}
            		if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::Dynamic,e3) HXARGC(0)
            			Float _hx_run(){
            				HX_STACKFRAME(&_hx_pos_b711a49c958e9300_358_makeExpr2)
HXLINE( 358)				return -(e3());
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 357)			 ::Dynamic e3 = this->makeExpr(l);
HXLINE( 358)			return  ::Dynamic(new _hx_Closure_13(e3));
HXLINE( 356)			goto _hx_goto_22;
            		}
            		_hx_goto_22:;
HXLINE( 360)		HX_STACK_DO_THROW( ::Dynamic(p->__Field(HX_("p",70,00,00,00),::hx::paccDynamic)));
HXDLIN( 360)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MultipassTemplate_obj,makeExpr2,return )

void MultipassTemplate_obj::run( ::utils::_MultipassTemplate::TemplateExpr e){
            	HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_364_run)
HXDLIN( 364)		switch((int)(e->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 364)				::String v = e->_hx_getString(0);
HXLINE( 366)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 367)					 ::StringBuf _this = this->buf;
HXDLIN( 367)					::String x = ::Std_obj::string(this->resolve(v));
HXDLIN( 367)					if (::hx::IsNotNull( _this->charBuf )) {
HXLINE( 367)						_this->flush();
            					}
HXDLIN( 367)					if (::hx::IsNull( _this->b )) {
HXLINE( 367)						_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            					}
            					else {
HXLINE( 367)						::Array< ::String > _this1 = _this->b;
HXDLIN( 367)						_this1->push(::Std_obj::string(x));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE( 369)						{
HXLINE( 369)							null();
            						}
HXLINE( 370)						 ::StringBuf _this2 = this->buf;
HXDLIN( 370)						::String x1 = ((HX_("::",c0,32,00,00) + v) + HX_("::",c0,32,00,00));
HXDLIN( 370)						if (::hx::IsNotNull( _this2->charBuf )) {
HXLINE( 370)							_this2->flush();
            						}
HXDLIN( 370)						if (::hx::IsNull( _this2->b )) {
HXLINE( 370)							_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            						}
            						else {
HXLINE( 370)							::Array< ::String > _this3 = _this2->b;
HXDLIN( 370)							_this3->push(::Std_obj::string(x1));
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXDLIN( 364)				 ::Dynamic e1 = e->_hx_getObject(0);
HXLINE( 373)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 374)					 ::StringBuf _this4 = this->buf;
HXDLIN( 374)					::String x2 = ::Std_obj::string(e1());
HXDLIN( 374)					if (::hx::IsNotNull( _this4->charBuf )) {
HXLINE( 374)						_this4->flush();
            					}
HXDLIN( 374)					if (::hx::IsNull( _this4->b )) {
HXLINE( 374)						_this4->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            					}
            					else {
HXLINE( 374)						::Array< ::String > _this5 = _this4->b;
HXDLIN( 374)						_this5->push(::Std_obj::string(x2));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g1 = _hx_e;
HXLINE( 375)						{
HXLINE( 375)							null();
            						}
HXDLIN( 375)						 ::Dynamic notYet = _g1;
HXLINE( 376)						{
HXLINE( 376)							 ::StringBuf _this6 = this->buf;
HXDLIN( 376)							::String x3 = ((HX_("::(",68,35,2c,00) + ::Std_obj::string( ::Dynamic(notYet->__Field(HX_("expr",35,fd,1d,43),::hx::paccDynamic)))) + HX_(")::",29,4f,1f,00));
HXDLIN( 376)							if (::hx::IsNotNull( _this6->charBuf )) {
HXLINE( 376)								_this6->flush();
            							}
HXDLIN( 376)							if (::hx::IsNull( _this6->b )) {
HXLINE( 376)								_this6->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            							}
            							else {
HXLINE( 376)								::Array< ::String > _this7 = _this6->b;
HXDLIN( 376)								_this7->push(::Std_obj::string(x3));
            							}
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXDLIN( 364)				 ::Dynamic e2 = e->_hx_getObject(0);
HXDLIN( 364)				 ::utils::_MultipassTemplate::TemplateExpr eif = e->_hx_getObject(1).StaticCast<  ::utils::_MultipassTemplate::TemplateExpr >();
HXDLIN( 364)				 ::utils::_MultipassTemplate::TemplateExpr eelse = e->_hx_getObject(2).StaticCast<  ::utils::_MultipassTemplate::TemplateExpr >();
HXLINE( 380)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 381)					 ::Dynamic v1 = e2();
HXLINE( 382)					bool _hx_tmp;
HXDLIN( 382)					if (::hx::IsNotNull( v1 )) {
HXLINE( 382)						_hx_tmp = ::hx::IsEq( v1,false );
            					}
            					else {
HXLINE( 382)						_hx_tmp = true;
            					}
HXDLIN( 382)					if (_hx_tmp) {
HXLINE( 383)						if (::hx::IsNotNull( eelse )) {
HXLINE( 383)							this->run(eelse);
            						}
            					}
            					else {
HXLINE( 385)						this->run(eif);
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g2 = _hx_e;
HXLINE( 386)						{
HXLINE( 386)							null();
            						}
HXDLIN( 386)						 ::Dynamic notYet1 = _g2;
HXDLIN( 386)						{
HXLINE( 387)							{
HXLINE( 387)								 ::StringBuf _this8 = this->buf;
HXDLIN( 387)								::String x4 = ((HX_("::if ",e3,0a,e4,8b) + ::Std_obj::string( ::Dynamic(notYet1->__Field(HX_("expr",35,fd,1d,43),::hx::paccDynamic)))) + HX_("::",c0,32,00,00));
HXDLIN( 387)								if (::hx::IsNotNull( _this8->charBuf )) {
HXLINE( 387)									_this8->flush();
            								}
HXDLIN( 387)								if (::hx::IsNull( _this8->b )) {
HXLINE( 387)									_this8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            								}
            								else {
HXLINE( 387)									::Array< ::String > _this9 = _this8->b;
HXDLIN( 387)									_this9->push(::Std_obj::string(x4));
            								}
            							}
HXLINE( 388)							this->run(eif);
HXLINE( 389)							if (::hx::IsNotNull( eelse )) {
HXLINE( 390)								{
HXLINE( 390)									 ::StringBuf _this10 = this->buf;
HXDLIN( 390)									if (::hx::IsNotNull( _this10->charBuf )) {
HXLINE( 390)										_this10->flush();
            									}
HXDLIN( 390)									if (::hx::IsNull( _this10->b )) {
HXLINE( 390)										_this10->b = ::Array_obj< ::String >::fromData( _hx_array_data_0a2ad487_43,1);
            									}
            									else {
HXLINE( 390)										_this10->b->push(HX_("::else::",79,3a,ed,3e));
            									}
            								}
HXLINE( 391)								this->run(eelse);
            							}
HXLINE( 393)							{
HXLINE( 393)								 ::StringBuf _this11 = this->buf;
HXDLIN( 393)								if (::hx::IsNotNull( _this11->charBuf )) {
HXLINE( 393)									_this11->flush();
            								}
HXDLIN( 393)								if (::hx::IsNull( _this11->b )) {
HXLINE( 393)									_this11->b = ::Array_obj< ::String >::fromData( _hx_array_data_0a2ad487_44,1);
            								}
            								else {
HXLINE( 393)									_this11->b->push(HX_("::end::",9b,f8,09,0d));
            								}
            							}
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXDLIN( 364)				::String str = e->_hx_getString(0);
HXLINE( 396)				{
HXLINE( 396)					 ::StringBuf _this12 = this->buf;
HXDLIN( 396)					if (::hx::IsNotNull( _this12->charBuf )) {
HXLINE( 396)						_this12->flush();
            					}
HXDLIN( 396)					if (::hx::IsNull( _this12->b )) {
HXLINE( 396)						_this12->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(str));
            					}
            					else {
HXLINE( 396)						::Array< ::String > _this13 = _this12->b;
HXDLIN( 396)						_this13->push(::Std_obj::string(str));
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXDLIN( 364)				 ::haxe::ds::List l = e->_hx_getObject(0).StaticCast<  ::haxe::ds::List >();
HXLINE( 398)				{
HXLINE( 398)					 ::haxe::ds::_List::ListNode _g_head = l->h;
HXDLIN( 398)					while(::hx::IsNotNull( _g_head )){
HXLINE( 398)						 ::utils::_MultipassTemplate::TemplateExpr val = _g_head->item;
HXDLIN( 398)						_g_head = _g_head->next;
HXDLIN( 398)						 ::utils::_MultipassTemplate::TemplateExpr e3 = val;
HXLINE( 399)						this->run(e3);
            					}
            				}
            			}
            			break;
            			case (int)5: {
HXDLIN( 364)				 ::Dynamic e4 = e->_hx_getObject(0);
HXDLIN( 364)				 ::utils::_MultipassTemplate::TemplateExpr loop = e->_hx_getObject(1).StaticCast<  ::utils::_MultipassTemplate::TemplateExpr >();
HXLINE( 401)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 402)					 ::Dynamic v2 = e4();
HXLINE( 403)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 404)						 ::Dynamic x5 = v2->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
HXLINE( 405)						if (::hx::IsNull( x5->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic) )) {
HXLINE( 405)							HX_STACK_DO_THROW(null());
            						}
HXLINE( 406)						v2 = x5;
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g3 = _hx_e;
HXLINE( 407)							{
HXLINE( 407)								null();
            							}
HXDLIN( 407)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 408)								if (::hx::IsNull( v2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic) )) {
HXLINE( 408)									HX_STACK_DO_THROW(null());
            								}
            							} catch( ::Dynamic _hx_e) {
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic _g4 = _hx_e;
HXLINE( 410)									HX_STACK_DO_THROW((HX_("Cannot iter on ",b6,ff,79,c3) + ::Std_obj::string(v2)));
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE( 412)					this->stack->push(this->context);
HXLINE( 413)					 ::Dynamic v3 = v2;
HXLINE( 414)					{
HXLINE( 414)						 ::Dynamic ctx = v3;
HXDLIN( 414)						while(( (bool)(ctx->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 414)							 ::Dynamic ctx1 = ctx->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXLINE( 415)							this->context = ctx1;
HXLINE( 416)							this->run(loop);
            						}
            					}
HXLINE( 418)					this->context = this->stack->pop();
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g5 = _hx_e;
HXLINE( 420)						{
HXLINE( 420)							null();
            						}
HXDLIN( 420)						 ::Dynamic notYet2 = _g5;
HXDLIN( 420)						{
HXLINE( 421)							{
HXLINE( 421)								 ::StringBuf _this14 = this->buf;
HXDLIN( 421)								::String x6 = ((HX_("::foreach ",16,ce,09,2a) + ::Std_obj::string( ::Dynamic(notYet2->__Field(HX_("v",76,00,00,00),::hx::paccDynamic)))) + HX_("::",c0,32,00,00));
HXDLIN( 421)								if (::hx::IsNotNull( _this14->charBuf )) {
HXLINE( 421)									_this14->flush();
            								}
HXDLIN( 421)								if (::hx::IsNull( _this14->b )) {
HXLINE( 421)									_this14->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x6));
            								}
            								else {
HXLINE( 421)									::Array< ::String > _this15 = _this14->b;
HXDLIN( 421)									_this15->push(::Std_obj::string(x6));
            								}
            							}
HXLINE( 422)							this->run(loop);
HXLINE( 423)							{
HXLINE( 423)								 ::StringBuf _this16 = this->buf;
HXDLIN( 423)								if (::hx::IsNotNull( _this16->charBuf )) {
HXLINE( 423)									_this16->flush();
            								}
HXDLIN( 423)								if (::hx::IsNull( _this16->b )) {
HXLINE( 423)									_this16->b = ::Array_obj< ::String >::fromData( _hx_array_data_0a2ad487_45,1);
            								}
            								else {
HXLINE( 423)									_this16->b->push(HX_("::end::",9b,f8,09,0d));
            								}
            							}
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			break;
            			case (int)6: {
HXDLIN( 364)				::String m = e->_hx_getString(0);
HXDLIN( 364)				 ::haxe::ds::List params = e->_hx_getObject(1).StaticCast<  ::haxe::ds::List >();
HXLINE( 425)				{
HXLINE( 426)					 ::Dynamic v4 = ::Reflect_obj::field(this->macros,m);
HXLINE( 427)					::cpp::VirtualArray pl = ::cpp::VirtualArray_obj::__new();
HXLINE( 428)					 ::StringBuf old = this->buf;
HXLINE( 429)					pl->push(this->resolve_dyn());
HXLINE( 430)					{
HXLINE( 430)						 ::haxe::ds::_List::ListNode _g_head1 = params->h;
HXDLIN( 430)						while(::hx::IsNotNull( _g_head1 )){
HXLINE( 430)							 ::utils::_MultipassTemplate::TemplateExpr val1 = _g_head1->item;
HXDLIN( 430)							_g_head1 = _g_head1->next;
HXDLIN( 430)							 ::utils::_MultipassTemplate::TemplateExpr p = val1;
HXLINE( 431)							if ((p->_hx_getIndex() == 0)) {
HXLINE( 431)								::String v5 = p->_hx_getString(0);
HXLINE( 432)								pl->push(this->resolve(v5));
            							}
            							else {
HXLINE( 434)								this->buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 435)								this->run(p);
HXLINE( 436)								pl->push(this->buf->toString());
            							}
            						}
            					}
HXLINE( 439)					this->buf = old;
HXLINE( 440)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 441)						 ::StringBuf _this17 = this->buf;
HXDLIN( 441)						::String x7 = ::Std_obj::string(::Reflect_obj::callMethod(this->macros,v4,pl));
HXDLIN( 441)						if (::hx::IsNotNull( _this17->charBuf )) {
HXLINE( 441)							_this17->flush();
            						}
HXDLIN( 441)						if (::hx::IsNull( _this17->b )) {
HXLINE( 441)							_this17->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x7));
            						}
            						else {
HXLINE( 441)							::Array< ::String > _this18 = _this17->b;
HXDLIN( 441)							_this18->push(::Std_obj::string(x7));
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g6 = _hx_e;
HXLINE( 442)							{
HXLINE( 442)								null();
            							}
HXDLIN( 442)							 ::Dynamic e5 = _g6;
HXLINE( 443)							::String plstr;
HXDLIN( 443)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 443)								plstr = pl->join(HX_(",",2c,00,00,00));
            							} catch( ::Dynamic _hx_e) {
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic _g7 = _hx_e;
HXLINE( 443)									plstr = HX_("???",1f,05,30,00);
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
HXLINE( 444)							::String msg = ((((((HX_("Macro call ",8e,96,45,bf) + m) + HX_("(",28,00,00,00)) + plstr) + HX_(") failed (",dc,dd,a3,23)) + ::Std_obj::string(e5)) + HX_(")",29,00,00,00));
HXLINE( 448)							HX_STACK_DO_THROW(msg);
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MultipassTemplate_obj,run,(void))

 ::EReg MultipassTemplate_obj::splitter;

 ::EReg MultipassTemplate_obj::expr_splitter;

 ::EReg MultipassTemplate_obj::expr_trim;

 ::EReg MultipassTemplate_obj::expr_int;

 ::EReg MultipassTemplate_obj::expr_float;

 ::Dynamic MultipassTemplate_obj::globals;


::hx::ObjectPtr< MultipassTemplate_obj > MultipassTemplate_obj::__new(::String str) {
	::hx::ObjectPtr< MultipassTemplate_obj > __this = new MultipassTemplate_obj();
	__this->__construct(str);
	return __this;
}

::hx::ObjectPtr< MultipassTemplate_obj > MultipassTemplate_obj::__alloc(::hx::Ctx *_hx_ctx,::String str) {
	MultipassTemplate_obj *__this = (MultipassTemplate_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MultipassTemplate_obj), true, "utils.MultipassTemplate"));
	*(void **)__this = MultipassTemplate_obj::_hx_vtable;
	__this->__construct(str);
	return __this;
}

MultipassTemplate_obj::MultipassTemplate_obj()
{
}

void MultipassTemplate_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MultipassTemplate);
	HX_MARK_MEMBER_NAME(expr,"expr");
	HX_MARK_MEMBER_NAME(context,"context");
	HX_MARK_MEMBER_NAME(macros,"macros");
	HX_MARK_MEMBER_NAME(stack,"stack");
	HX_MARK_MEMBER_NAME(buf,"buf");
	HX_MARK_END_CLASS();
}

void MultipassTemplate_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(expr,"expr");
	HX_VISIT_MEMBER_NAME(context,"context");
	HX_VISIT_MEMBER_NAME(macros,"macros");
	HX_VISIT_MEMBER_NAME(stack,"stack");
	HX_VISIT_MEMBER_NAME(buf,"buf");
}

::hx::Val MultipassTemplate_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { return ::hx::Val( buf ); }
		if (HX_FIELD_EQ(inName,"run") ) { return ::hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { return ::hx::Val( expr ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { return ::hx::Val( stack ); }
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"macros") ) { return ::hx::Val( macros ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { return ::hx::Val( context ); }
		if (HX_FIELD_EQ(inName,"execute") ) { return ::hx::Val( execute_dyn() ); }
		if (HX_FIELD_EQ(inName,"resolve") ) { return ::hx::Val( resolve_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"makePath") ) { return ::hx::Val( makePath_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeExpr") ) { return ::hx::Val( makeExpr_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"parseExpr") ) { return ::hx::Val( parseExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeConst") ) { return ::hx::Val( makeConst_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeExpr2") ) { return ::hx::Val( makeExpr2_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"parseBlock") ) { return ::hx::Val( parseBlock_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseTokens") ) { return ::hx::Val( parseTokens_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MultipassTemplate_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"globals") ) { outValue = ( globals ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"splitter") ) { outValue = ( splitter ); return true; }
		if (HX_FIELD_EQ(inName,"expr_int") ) { outValue = ( expr_int ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"expr_trim") ) { outValue = ( expr_trim ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"expr_float") ) { outValue = ( expr_float ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"expr_splitter") ) { outValue = ( expr_splitter ); return true; }
	}
	return false;
}

::hx::Val MultipassTemplate_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { buf=inValue.Cast<  ::StringBuf >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { expr=inValue.Cast<  ::utils::_MultipassTemplate::TemplateExpr >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { stack=inValue.Cast<  ::haxe::ds::List >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"macros") ) { macros=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MultipassTemplate_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"globals") ) { globals=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"splitter") ) { splitter=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"expr_int") ) { expr_int=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"expr_trim") ) { expr_trim=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"expr_float") ) { expr_float=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"expr_splitter") ) { expr_splitter=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

void MultipassTemplate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("expr",35,fd,1d,43));
	outFields->push(HX_("context",ef,95,77,19));
	outFields->push(HX_("macros",e7,9a,8b,b0));
	outFields->push(HX_("stack",48,67,0b,84));
	outFields->push(HX_("buf",33,c3,4a,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MultipassTemplate_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::utils::_MultipassTemplate::TemplateExpr */ ,(int)offsetof(MultipassTemplate_obj,expr),HX_("expr",35,fd,1d,43)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(MultipassTemplate_obj,context),HX_("context",ef,95,77,19)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(MultipassTemplate_obj,macros),HX_("macros",e7,9a,8b,b0)},
	{::hx::fsObject /*  ::haxe::ds::List */ ,(int)offsetof(MultipassTemplate_obj,stack),HX_("stack",48,67,0b,84)},
	{::hx::fsObject /*  ::StringBuf */ ,(int)offsetof(MultipassTemplate_obj,buf),HX_("buf",33,c3,4a,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MultipassTemplate_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::EReg */ ,(void *) &MultipassTemplate_obj::splitter,HX_("splitter",47,37,b0,d3)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &MultipassTemplate_obj::expr_splitter,HX_("expr_splitter",d1,62,6b,74)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &MultipassTemplate_obj::expr_trim,HX_("expr_trim",6c,bb,0b,cf)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &MultipassTemplate_obj::expr_int,HX_("expr_int",a5,8d,b8,b9)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &MultipassTemplate_obj::expr_float,HX_("expr_float",d2,5f,a9,47)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &MultipassTemplate_obj::globals,HX_("globals",b0,05,39,14)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MultipassTemplate_obj_sMemberFields[] = {
	HX_("expr",35,fd,1d,43),
	HX_("context",ef,95,77,19),
	HX_("macros",e7,9a,8b,b0),
	HX_("stack",48,67,0b,84),
	HX_("buf",33,c3,4a,00),
	HX_("execute",35,0a,0d,cc),
	HX_("resolve",ec,12,60,67),
	HX_("parseTokens",ed,c3,23,0d),
	HX_("parseBlock",1a,bc,dd,de),
	HX_("parse",33,90,55,bd),
	HX_("parseExpr",08,4f,c4,ca),
	HX_("makeConst",95,70,f6,1d),
	HX_("makePath",b3,da,ef,40),
	HX_("makeExpr",43,f2,bb,39),
	HX_("makeExpr2",8f,08,b8,4a),
	HX_("run",4b,e7,56,00),
	::String(null()) };

static void MultipassTemplate_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MultipassTemplate_obj::splitter,"splitter");
	HX_MARK_MEMBER_NAME(MultipassTemplate_obj::expr_splitter,"expr_splitter");
	HX_MARK_MEMBER_NAME(MultipassTemplate_obj::expr_trim,"expr_trim");
	HX_MARK_MEMBER_NAME(MultipassTemplate_obj::expr_int,"expr_int");
	HX_MARK_MEMBER_NAME(MultipassTemplate_obj::expr_float,"expr_float");
	HX_MARK_MEMBER_NAME(MultipassTemplate_obj::globals,"globals");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MultipassTemplate_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MultipassTemplate_obj::splitter,"splitter");
	HX_VISIT_MEMBER_NAME(MultipassTemplate_obj::expr_splitter,"expr_splitter");
	HX_VISIT_MEMBER_NAME(MultipassTemplate_obj::expr_trim,"expr_trim");
	HX_VISIT_MEMBER_NAME(MultipassTemplate_obj::expr_int,"expr_int");
	HX_VISIT_MEMBER_NAME(MultipassTemplate_obj::expr_float,"expr_float");
	HX_VISIT_MEMBER_NAME(MultipassTemplate_obj::globals,"globals");
};

#endif

::hx::Class MultipassTemplate_obj::__mClass;

static ::String MultipassTemplate_obj_sStaticFields[] = {
	HX_("splitter",47,37,b0,d3),
	HX_("expr_splitter",d1,62,6b,74),
	HX_("expr_trim",6c,bb,0b,cf),
	HX_("expr_int",a5,8d,b8,b9),
	HX_("expr_float",d2,5f,a9,47),
	HX_("globals",b0,05,39,14),
	::String(null())
};

void MultipassTemplate_obj::__register()
{
	MultipassTemplate_obj _hx_dummy;
	MultipassTemplate_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("utils.MultipassTemplate",87,d4,2a,0a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MultipassTemplate_obj::__GetStatic;
	__mClass->mSetStaticField = &MultipassTemplate_obj::__SetStatic;
	__mClass->mMarkFunc = MultipassTemplate_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MultipassTemplate_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MultipassTemplate_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MultipassTemplate_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MultipassTemplate_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MultipassTemplate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MultipassTemplate_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MultipassTemplate_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_57_boot)
HXDLIN(  57)		splitter =  ::EReg_obj::__alloc( HX_CTX ,HX_("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()",e5,ee,5c,fe),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_58_boot)
HXDLIN(  58)		expr_splitter =  ::EReg_obj::__alloc( HX_CTX ,HX_("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)",ea,08,2c,b0),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_59_boot)
HXDLIN(  59)		expr_trim =  ::EReg_obj::__alloc( HX_CTX ,HX_("^[ ]*([^ ]+)[ ]*$",1c,7f,18,5f),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_60_boot)
HXDLIN(  60)		expr_int =  ::EReg_obj::__alloc( HX_CTX ,HX_("^[0-9]+$",17,6b,c4,08),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b711a49c958e9300_61_boot)
HXDLIN(  61)		expr_float =  ::EReg_obj::__alloc( HX_CTX ,HX_("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$",30,ca,4e,ef),HX_("",00,00,00,00));
            	}
{
            	HX_STACKFRAME(&_hx_pos_b711a49c958e9300_67_boot)
HXDLIN(  67)		globals =  ::Dynamic(::hx::Anon_obj::Create(0));
            	}
}

} // end namespace utils
