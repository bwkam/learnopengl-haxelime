// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_Pickable
#include <peote/ui/interactive/Pickable.h>
#endif
#ifndef INCLUDED_peote_view_BufferInterface
#include <peote/view/BufferInterface.h>
#endif
#ifndef INCLUDED_peote_view_Buffer_Pickable
#include <peote/view/Buffer_Pickable.h>
#endif
#ifndef INCLUDED_peote_view_Display
#include <peote/view/Display.h>
#endif
#ifndef INCLUDED_peote_view_PeoteView
#include <peote/view/PeoteView.h>
#endif
#ifndef INCLUDED_peote_view_Program
#include <peote/view/Program.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89108f5bb91df3e2_75_new,"peote.view.Buffer_Pickable","new",0xe7de84c6,"peote.view.Buffer_Pickable.new","peote/view/Buffer.hx",75,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_134_setNewGLContext,"peote.view.Buffer_Pickable","setNewGLContext",0x2d866a12,"peote.view.Buffer_Pickable.setNewGLContext","peote/view/Buffer.hx",134,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_282_updateElement,"peote.view.Buffer_Pickable","updateElement",0x05d58399,"peote.view.Buffer_Pickable.updateElement","peote/view/Buffer.hx",282,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_308_addElement,"peote.view.Buffer_Pickable","addElement",0x2dec1ef5,"peote.view.Buffer_Pickable.addElement","peote/view/Buffer.hx",308,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_332_removeElement,"peote.view.Buffer_Pickable","removeElement",0x13217abe,"peote.view.Buffer_Pickable.removeElement","peote/view/Buffer.hx",332,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_417_getElement,"peote.view.Buffer_Pickable","getElement",0x15c37920,"peote.view.Buffer_Pickable.getElement","peote/view/Buffer.hx",417,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_426_getElementIndex,"peote.view.Buffer_Pickable","getElementIndex",0x72b37dd2,"peote.view.Buffer_Pickable.getElementIndex","peote/view/Buffer.hx",426,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_463_getVertexShader,"peote.view.Buffer_Pickable","getVertexShader",0x119abcc5,"peote.view.Buffer_Pickable.getVertexShader","peote/view/Buffer.hx",463,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_464_getFragmentShader,"peote.view.Buffer_Pickable","getFragmentShader",0x39ef5931,"peote.view.Buffer_Pickable.getFragmentShader","peote/view/Buffer.hx",464,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_465_getTextureIdentifiers,"peote.view.Buffer_Pickable","getTextureIdentifiers",0x7d5472eb,"peote.view.Buffer_Pickable.getTextureIdentifiers","peote/view/Buffer.hx",465,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_466_getColorIdentifiers,"peote.view.Buffer_Pickable","getColorIdentifiers",0x37428863,"peote.view.Buffer_Pickable.getColorIdentifiers","peote/view/Buffer.hx",466,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_467_getCustomIdentifiers,"peote.view.Buffer_Pickable","getCustomIdentifiers",0x477dff1d,"peote.view.Buffer_Pickable.getCustomIdentifiers","peote/view/Buffer.hx",467,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_468_getCustomVaryings,"peote.view.Buffer_Pickable","getCustomVaryings",0xc7690cf0,"peote.view.Buffer_Pickable.getCustomVaryings","peote/view/Buffer.hx",468,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_469_getDefaultColorFormula,"peote.view.Buffer_Pickable","getDefaultColorFormula",0x23947308,"peote.view.Buffer_Pickable.getDefaultColorFormula","peote/view/Buffer.hx",469,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_470_getDefaultFormulaVars,"peote.view.Buffer_Pickable","getDefaultFormulaVars",0x2b76970d,"peote.view.Buffer_Pickable.getDefaultFormulaVars","peote/view/Buffer.hx",470,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_472_getFormulas,"peote.view.Buffer_Pickable","getFormulas",0xe86edf69,"peote.view.Buffer_Pickable.getFormulas","peote/view/Buffer.hx",472,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_473_getAttributes,"peote.view.Buffer_Pickable","getAttributes",0x27f674f3,"peote.view.Buffer_Pickable.getAttributes","peote/view/Buffer.hx",473,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_474_getFormulaNames,"peote.view.Buffer_Pickable","getFormulaNames",0x7a7a919e,"peote.view.Buffer_Pickable.getFormulaNames","peote/view/Buffer.hx",474,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_476_getFormulaVaryings,"peote.view.Buffer_Pickable","getFormulaVaryings",0x553d6ded,"peote.view.Buffer_Pickable.getFormulaVaryings","peote/view/Buffer.hx",476,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_477_getFormulaConstants,"peote.view.Buffer_Pickable","getFormulaConstants",0xf9b61b65,"peote.view.Buffer_Pickable.getFormulaConstants","peote/view/Buffer.hx",477,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_480_getMaxZindex,"peote.view.Buffer_Pickable","getMaxZindex",0x95aadd80,"peote.view.Buffer_Pickable.getMaxZindex","peote/view/Buffer.hx",480,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_481_hasAlpha,"peote.view.Buffer_Pickable","hasAlpha",0x377e8b7e,"peote.view.Buffer_Pickable.hasAlpha","peote/view/Buffer.hx",481,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_482_hasZindex,"peote.view.Buffer_Pickable","hasZindex",0x9a9e5838,"peote.view.Buffer_Pickable.hasZindex","peote/view/Buffer.hx",482,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_483_hasPicking,"peote.view.Buffer_Pickable","hasPicking",0xbf5352c1,"peote.view.Buffer_Pickable.hasPicking","peote/view/Buffer.hx",483,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_485_needFragmentPrecision,"peote.view.Buffer_Pickable","needFragmentPrecision",0x42a3abfe,"peote.view.Buffer_Pickable.needFragmentPrecision","peote/view/Buffer.hx",485,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_491_bindAttribLocations,"peote.view.Buffer_Pickable","bindAttribLocations",0x04b92f1d,"peote.view.Buffer_Pickable.bindAttribLocations","peote/view/Buffer.hx",491,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_496_render,"peote.view.Buffer_Pickable","render",0x2db2fab0,"peote.view.Buffer_Pickable.render","peote/view/Buffer.hx",496,0xdad6d638)
HX_LOCAL_STACK_FRAME(_hx_pos_89108f5bb91df3e2_501_pick,"peote.view.Buffer_Pickable","pick",0xfc2b0dbb,"peote.view.Buffer_Pickable.pick","peote/view/Buffer.hx",501,0xdad6d638)
namespace peote{
namespace view{

void Buffer_Pickable_obj::__construct(int minSize,::hx::Null< int >  __o_growSize,::hx::Null< bool >  __o_autoShrink){
            		int growSize = __o_growSize.Default(0);
            		bool autoShrink = __o_autoShrink.Default(false);
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_75_new)
HXLINE(  88)		this->_shrinkAtSize = 0;
HXLINE(  87)		this->_growSize = 0;
HXLINE(  83)		this->_maxElements = 0;
HXLINE(  77)		this->_gl = null();
HXLINE( 103)		if ((minSize <= 0)) {
HXLINE( 103)			HX_STACK_DO_THROW(HX_("Error: Buffer need a minimum size of 1 to store an Element.",63,c2,5e,27));
            		}
HXLINE( 104)		this->_minSize = minSize;
HXLINE( 105)		int _hx_tmp;
HXDLIN( 105)		if ((growSize < 0)) {
HXLINE( 105)			_hx_tmp = 0;
            		}
            		else {
HXLINE( 105)			_hx_tmp = growSize;
            		}
HXDLIN( 105)		this->_growSize = _hx_tmp;
HXLINE( 106)		if (autoShrink) {
HXLINE( 106)			this->_shrinkAtSize = (growSize + ::Std_obj::_hx_int((( (Float)(growSize) ) / ( (Float)(2) ))));
            		}
HXLINE( 113)		this->_elements = ::Array_obj< ::Dynamic>::__new(this->_minSize);
HXLINE( 120)		this->_elemBuffSize = 120;
HXLINE( 125)		this->_bytes = ::haxe::io::Bytes_obj::alloc((this->_elemBuffSize * this->_minSize));
HXLINE( 126)		this->_bytes->fill(0,(this->_elemBuffSize * this->_minSize),0);
            	}

Dynamic Buffer_Pickable_obj::__CreateEmpty() { return new Buffer_Pickable_obj; }

void *Buffer_Pickable_obj::_hx_vtable = 0;

Dynamic Buffer_Pickable_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Buffer_Pickable_obj > _hx_result = new Buffer_Pickable_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Buffer_Pickable_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6d5c272a;
}

static ::peote::view::BufferInterface_obj _hx_peote_view_Buffer_Pickable__hx_peote_view_BufferInterface= {
	( void (::hx::Object::*)( ::lime::_internal::backend::native::NativeOpenGLRenderContext))&::peote::view::Buffer_Pickable_obj::setNewGLContext,
	( ::String (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getVertexShader,
	( ::String (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getFragmentShader,
	( ::Array< ::String > (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getTextureIdentifiers,
	( ::Array< ::String > (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getColorIdentifiers,
	( ::Array< ::String > (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getCustomIdentifiers,
	( ::Array< ::String > (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getCustomVaryings,
	( ::String (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getDefaultColorFormula,
	(  ::haxe::ds::StringMap (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getDefaultFormulaVars,
	(  ::haxe::ds::StringMap (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getFormulas,
	(  ::haxe::ds::StringMap (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getAttributes,
	(  ::haxe::ds::StringMap (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getFormulaNames,
	( ::Array< ::String > (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getFormulaVaryings,
	( ::Array< ::String > (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getFormulaConstants,
	( int (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::getMaxZindex,
	( bool (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::hasAlpha,
	( bool (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::hasZindex,
	( bool (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::hasPicking,
	( bool (::hx::Object::*)())&::peote::view::Buffer_Pickable_obj::needFragmentPrecision,
	( void (::hx::Object::*)( ::lime::_internal::backend::native::NativeOpenGLRenderContext, ::lime::graphics::opengl::GLObject))&::peote::view::Buffer_Pickable_obj::bindAttribLocations,
	( void (::hx::Object::*)( ::peote::view::PeoteView, ::peote::view::Display, ::peote::view::Program))&::peote::view::Buffer_Pickable_obj::render,
	( void (::hx::Object::*)( ::peote::view::PeoteView, ::peote::view::Display, ::peote::view::Program,int))&::peote::view::Buffer_Pickable_obj::pick,
};

void *Buffer_Pickable_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd6c1d789: return &_hx_peote_view_Buffer_Pickable__hx_peote_view_BufferInterface;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Buffer_Pickable_obj::setNewGLContext( ::lime::_internal::backend::native::NativeOpenGLRenderContext newGl){
            	HX_GC_STACKFRAME(&_hx_pos_89108f5bb91df3e2_134_setNewGLContext)
HXDLIN( 134)		bool _hx_tmp;
HXDLIN( 134)		if (::hx::IsNotNull( newGl )) {
HXDLIN( 134)			_hx_tmp = ::hx::IsInstanceNotEq( newGl,this->_gl );
            		}
            		else {
HXDLIN( 134)			_hx_tmp = false;
            		}
HXDLIN( 134)		if (_hx_tmp) {
HXDLIN( 134)			if (::hx::IsNotNull( this->_gl )) {
HXDLIN( 134)				this->_gl->deleteBuffer(this->_glBuffer);
            			}
HXDLIN( 134)			this->_gl = newGl;
HXDLIN( 134)			{
HXDLIN( 134)				this->_glBuffer = this->_gl->createBuffer();
HXDLIN( 134)				this->_gl->bindBuffer(this->_gl->ARRAY_BUFFER,this->_glBuffer);
HXDLIN( 134)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _hx_tmp1 = this->_gl;
HXDLIN( 134)				int _hx_tmp2 = this->_gl->ARRAY_BUFFER;
HXDLIN( 134)				int _hx_tmp3 = this->_bytes->length;
HXDLIN( 134)				Float _hx_tmp4 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer( ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,this->_bytes,0));
HXDLIN( 134)				_hx_tmp1->bufferData(_hx_tmp2,_hx_tmp3,_hx_tmp4,this->_gl->STREAM_DRAW);
HXDLIN( 134)				this->_gl->bindBuffer(this->_gl->ARRAY_BUFFER,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_Pickable_obj,setNewGLContext,(void))

void Buffer_Pickable_obj::updateElement( ::peote::ui::interactive::Pickable element){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_282_updateElement)
HXLINE( 286)		{
HXLINE( 286)			 ::haxe::io::Bytes bytes = this->_bytes;
HXDLIN( 286)			{
HXLINE( 286)				int pos = element->bytePos;
HXDLIN( 286)				int v = ::Std_obj::_hx_int((1 + (( (Float)(element->bytePos) ) / ( (Float)(120) ))));
HXDLIN( 286)				bytes->b[pos] = ( (unsigned char)((v & 255)) );
HXDLIN( 286)				bytes->b[(pos + 1)] = ( (unsigned char)(((v >> 8) & 255)) );
HXDLIN( 286)				bytes->b[(pos + 2)] = ( (unsigned char)(((v >> 16) & 255)) );
HXDLIN( 286)				bytes->b[(pos + 3)] = ( (unsigned char)((::hx::UShr(v,24) & 255)) );
            			}
HXDLIN( 286)			bytes->setFloat((element->bytePos + 4),::Math_obj::min(((Float)1.0),::Math_obj::max(((Float)-1.0),(( (Float)(element->z) ) / ( (Float)(2097151) )))));
HXDLIN( 286)			{
HXLINE( 286)				int pos1 = (element->bytePos + 8);
HXDLIN( 286)				int v1 = element->x;
HXDLIN( 286)				bytes->b[pos1] = ( (unsigned char)(v1) );
HXDLIN( 286)				bytes->b[(pos1 + 1)] = ( (unsigned char)((v1 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos2 = (element->bytePos + 10);
HXDLIN( 286)				int v2 = element->y;
HXDLIN( 286)				bytes->b[pos2] = ( (unsigned char)(v2) );
HXDLIN( 286)				bytes->b[(pos2 + 1)] = ( (unsigned char)((v2 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos3 = (element->bytePos + 12);
HXDLIN( 286)				int v3 = element->w;
HXDLIN( 286)				bytes->b[pos3] = ( (unsigned char)(v3) );
HXDLIN( 286)				bytes->b[(pos3 + 1)] = ( (unsigned char)((v3 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos4 = (element->bytePos + 14);
HXDLIN( 286)				int v4 = element->h;
HXDLIN( 286)				bytes->b[pos4] = ( (unsigned char)(v4) );
HXDLIN( 286)				bytes->b[(pos4 + 1)] = ( (unsigned char)((v4 >> 8)) );
            			}
HXDLIN( 286)			bytes->b[(element->bytePos + 16)] = ( (unsigned char)(1) );
HXDLIN( 286)			bytes->b[(element->bytePos + 17)] = ( (unsigned char)(1) );
HXDLIN( 286)			{
HXLINE( 286)				int pos5 = (element->bytePos + 20);
HXDLIN( 286)				int v5 = ::Std_obj::_hx_int((1 + (( (Float)(element->bytePos) ) / ( (Float)(120) ))));
HXDLIN( 286)				bytes->b[pos5] = ( (unsigned char)((v5 & 255)) );
HXDLIN( 286)				bytes->b[(pos5 + 1)] = ( (unsigned char)(((v5 >> 8) & 255)) );
HXDLIN( 286)				bytes->b[(pos5 + 2)] = ( (unsigned char)(((v5 >> 16) & 255)) );
HXDLIN( 286)				bytes->b[(pos5 + 3)] = ( (unsigned char)((::hx::UShr(v5,24) & 255)) );
            			}
HXDLIN( 286)			bytes->setFloat((element->bytePos + 24),::Math_obj::min(((Float)1.0),::Math_obj::max(((Float)-1.0),(( (Float)(element->z) ) / ( (Float)(2097151) )))));
HXDLIN( 286)			{
HXLINE( 286)				int pos6 = (element->bytePos + 28);
HXDLIN( 286)				int v6 = element->x;
HXDLIN( 286)				bytes->b[pos6] = ( (unsigned char)(v6) );
HXDLIN( 286)				bytes->b[(pos6 + 1)] = ( (unsigned char)((v6 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos7 = (element->bytePos + 30);
HXDLIN( 286)				int v7 = element->y;
HXDLIN( 286)				bytes->b[pos7] = ( (unsigned char)(v7) );
HXDLIN( 286)				bytes->b[(pos7 + 1)] = ( (unsigned char)((v7 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos8 = (element->bytePos + 32);
HXDLIN( 286)				int v8 = element->w;
HXDLIN( 286)				bytes->b[pos8] = ( (unsigned char)(v8) );
HXDLIN( 286)				bytes->b[(pos8 + 1)] = ( (unsigned char)((v8 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos9 = (element->bytePos + 34);
HXDLIN( 286)				int v9 = element->h;
HXDLIN( 286)				bytes->b[pos9] = ( (unsigned char)(v9) );
HXDLIN( 286)				bytes->b[(pos9 + 1)] = ( (unsigned char)((v9 >> 8)) );
            			}
HXDLIN( 286)			bytes->b[(element->bytePos + 36)] = ( (unsigned char)(1) );
HXDLIN( 286)			bytes->b[(element->bytePos + 37)] = ( (unsigned char)(1) );
HXDLIN( 286)			{
HXLINE( 286)				int pos10 = (element->bytePos + 40);
HXDLIN( 286)				int v10 = ::Std_obj::_hx_int((1 + (( (Float)(element->bytePos) ) / ( (Float)(120) ))));
HXDLIN( 286)				bytes->b[pos10] = ( (unsigned char)((v10 & 255)) );
HXDLIN( 286)				bytes->b[(pos10 + 1)] = ( (unsigned char)(((v10 >> 8) & 255)) );
HXDLIN( 286)				bytes->b[(pos10 + 2)] = ( (unsigned char)(((v10 >> 16) & 255)) );
HXDLIN( 286)				bytes->b[(pos10 + 3)] = ( (unsigned char)((::hx::UShr(v10,24) & 255)) );
            			}
HXDLIN( 286)			bytes->setFloat((element->bytePos + 44),::Math_obj::min(((Float)1.0),::Math_obj::max(((Float)-1.0),(( (Float)(element->z) ) / ( (Float)(2097151) )))));
HXDLIN( 286)			{
HXLINE( 286)				int pos11 = (element->bytePos + 48);
HXDLIN( 286)				int v11 = element->x;
HXDLIN( 286)				bytes->b[pos11] = ( (unsigned char)(v11) );
HXDLIN( 286)				bytes->b[(pos11 + 1)] = ( (unsigned char)((v11 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos12 = (element->bytePos + 50);
HXDLIN( 286)				int v12 = element->y;
HXDLIN( 286)				bytes->b[pos12] = ( (unsigned char)(v12) );
HXDLIN( 286)				bytes->b[(pos12 + 1)] = ( (unsigned char)((v12 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos13 = (element->bytePos + 52);
HXDLIN( 286)				int v13 = element->w;
HXDLIN( 286)				bytes->b[pos13] = ( (unsigned char)(v13) );
HXDLIN( 286)				bytes->b[(pos13 + 1)] = ( (unsigned char)((v13 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos14 = (element->bytePos + 54);
HXDLIN( 286)				int v14 = element->h;
HXDLIN( 286)				bytes->b[pos14] = ( (unsigned char)(v14) );
HXDLIN( 286)				bytes->b[(pos14 + 1)] = ( (unsigned char)((v14 >> 8)) );
            			}
HXDLIN( 286)			bytes->b[(element->bytePos + 56)] = ( (unsigned char)(0) );
HXDLIN( 286)			bytes->b[(element->bytePos + 57)] = ( (unsigned char)(1) );
HXDLIN( 286)			{
HXLINE( 286)				int pos15 = (element->bytePos + 60);
HXDLIN( 286)				int v15 = ::Std_obj::_hx_int((1 + (( (Float)(element->bytePos) ) / ( (Float)(120) ))));
HXDLIN( 286)				bytes->b[pos15] = ( (unsigned char)((v15 & 255)) );
HXDLIN( 286)				bytes->b[(pos15 + 1)] = ( (unsigned char)(((v15 >> 8) & 255)) );
HXDLIN( 286)				bytes->b[(pos15 + 2)] = ( (unsigned char)(((v15 >> 16) & 255)) );
HXDLIN( 286)				bytes->b[(pos15 + 3)] = ( (unsigned char)((::hx::UShr(v15,24) & 255)) );
            			}
HXDLIN( 286)			bytes->setFloat((element->bytePos + 64),::Math_obj::min(((Float)1.0),::Math_obj::max(((Float)-1.0),(( (Float)(element->z) ) / ( (Float)(2097151) )))));
HXDLIN( 286)			{
HXLINE( 286)				int pos16 = (element->bytePos + 68);
HXDLIN( 286)				int v16 = element->x;
HXDLIN( 286)				bytes->b[pos16] = ( (unsigned char)(v16) );
HXDLIN( 286)				bytes->b[(pos16 + 1)] = ( (unsigned char)((v16 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos17 = (element->bytePos + 70);
HXDLIN( 286)				int v17 = element->y;
HXDLIN( 286)				bytes->b[pos17] = ( (unsigned char)(v17) );
HXDLIN( 286)				bytes->b[(pos17 + 1)] = ( (unsigned char)((v17 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos18 = (element->bytePos + 72);
HXDLIN( 286)				int v18 = element->w;
HXDLIN( 286)				bytes->b[pos18] = ( (unsigned char)(v18) );
HXDLIN( 286)				bytes->b[(pos18 + 1)] = ( (unsigned char)((v18 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos19 = (element->bytePos + 74);
HXDLIN( 286)				int v19 = element->h;
HXDLIN( 286)				bytes->b[pos19] = ( (unsigned char)(v19) );
HXDLIN( 286)				bytes->b[(pos19 + 1)] = ( (unsigned char)((v19 >> 8)) );
            			}
HXDLIN( 286)			bytes->b[(element->bytePos + 76)] = ( (unsigned char)(1) );
HXDLIN( 286)			bytes->b[(element->bytePos + 77)] = ( (unsigned char)(0) );
HXDLIN( 286)			{
HXLINE( 286)				int pos20 = (element->bytePos + 80);
HXDLIN( 286)				int v20 = ::Std_obj::_hx_int((1 + (( (Float)(element->bytePos) ) / ( (Float)(120) ))));
HXDLIN( 286)				bytes->b[pos20] = ( (unsigned char)((v20 & 255)) );
HXDLIN( 286)				bytes->b[(pos20 + 1)] = ( (unsigned char)(((v20 >> 8) & 255)) );
HXDLIN( 286)				bytes->b[(pos20 + 2)] = ( (unsigned char)(((v20 >> 16) & 255)) );
HXDLIN( 286)				bytes->b[(pos20 + 3)] = ( (unsigned char)((::hx::UShr(v20,24) & 255)) );
            			}
HXDLIN( 286)			bytes->setFloat((element->bytePos + 84),::Math_obj::min(((Float)1.0),::Math_obj::max(((Float)-1.0),(( (Float)(element->z) ) / ( (Float)(2097151) )))));
HXDLIN( 286)			{
HXLINE( 286)				int pos21 = (element->bytePos + 88);
HXDLIN( 286)				int v21 = element->x;
HXDLIN( 286)				bytes->b[pos21] = ( (unsigned char)(v21) );
HXDLIN( 286)				bytes->b[(pos21 + 1)] = ( (unsigned char)((v21 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos22 = (element->bytePos + 90);
HXDLIN( 286)				int v22 = element->y;
HXDLIN( 286)				bytes->b[pos22] = ( (unsigned char)(v22) );
HXDLIN( 286)				bytes->b[(pos22 + 1)] = ( (unsigned char)((v22 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos23 = (element->bytePos + 92);
HXDLIN( 286)				int v23 = element->w;
HXDLIN( 286)				bytes->b[pos23] = ( (unsigned char)(v23) );
HXDLIN( 286)				bytes->b[(pos23 + 1)] = ( (unsigned char)((v23 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos24 = (element->bytePos + 94);
HXDLIN( 286)				int v24 = element->h;
HXDLIN( 286)				bytes->b[pos24] = ( (unsigned char)(v24) );
HXDLIN( 286)				bytes->b[(pos24 + 1)] = ( (unsigned char)((v24 >> 8)) );
            			}
HXDLIN( 286)			bytes->b[(element->bytePos + 96)] = ( (unsigned char)(0) );
HXDLIN( 286)			bytes->b[(element->bytePos + 97)] = ( (unsigned char)(0) );
HXDLIN( 286)			{
HXLINE( 286)				int pos25 = (element->bytePos + 100);
HXDLIN( 286)				int v25 = ::Std_obj::_hx_int((1 + (( (Float)(element->bytePos) ) / ( (Float)(120) ))));
HXDLIN( 286)				bytes->b[pos25] = ( (unsigned char)((v25 & 255)) );
HXDLIN( 286)				bytes->b[(pos25 + 1)] = ( (unsigned char)(((v25 >> 8) & 255)) );
HXDLIN( 286)				bytes->b[(pos25 + 2)] = ( (unsigned char)(((v25 >> 16) & 255)) );
HXDLIN( 286)				bytes->b[(pos25 + 3)] = ( (unsigned char)((::hx::UShr(v25,24) & 255)) );
            			}
HXDLIN( 286)			bytes->setFloat((element->bytePos + 104),::Math_obj::min(((Float)1.0),::Math_obj::max(((Float)-1.0),(( (Float)(element->z) ) / ( (Float)(2097151) )))));
HXDLIN( 286)			{
HXLINE( 286)				int pos26 = (element->bytePos + 108);
HXDLIN( 286)				int v26 = element->x;
HXDLIN( 286)				bytes->b[pos26] = ( (unsigned char)(v26) );
HXDLIN( 286)				bytes->b[(pos26 + 1)] = ( (unsigned char)((v26 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos27 = (element->bytePos + 110);
HXDLIN( 286)				int v27 = element->y;
HXDLIN( 286)				bytes->b[pos27] = ( (unsigned char)(v27) );
HXDLIN( 286)				bytes->b[(pos27 + 1)] = ( (unsigned char)((v27 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos28 = (element->bytePos + 112);
HXDLIN( 286)				int v28 = element->w;
HXDLIN( 286)				bytes->b[pos28] = ( (unsigned char)(v28) );
HXDLIN( 286)				bytes->b[(pos28 + 1)] = ( (unsigned char)((v28 >> 8)) );
            			}
HXDLIN( 286)			{
HXLINE( 286)				int pos29 = (element->bytePos + 114);
HXDLIN( 286)				int v29 = element->h;
HXDLIN( 286)				bytes->b[pos29] = ( (unsigned char)(v29) );
HXDLIN( 286)				bytes->b[(pos29 + 1)] = ( (unsigned char)((v29 >> 8)) );
            			}
HXDLIN( 286)			bytes->b[(element->bytePos + 116)] = ( (unsigned char)(0) );
HXDLIN( 286)			bytes->b[(element->bytePos + 117)] = ( (unsigned char)(0) );
            		}
HXLINE( 291)		{
HXLINE( 291)			if ((element->bytePos == -1)) {
HXLINE( 291)				HX_STACK_DO_THROW(HX_("Error, Element is not added to Buffer",a2,af,58,d3));
            			}
HXDLIN( 291)			if (::hx::IsNotNull( this->_gl )) {
HXLINE( 291)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_gl;
HXDLIN( 291)				int elemBuffSize = this->_elemBuffSize;
HXDLIN( 291)				gl->bindBuffer(gl->ARRAY_BUFFER,this->_glBuffer);
HXDLIN( 291)				gl->bufferSubData(gl->ARRAY_BUFFER,element->bytePos,elemBuffSize,element->bufferPointer);
HXDLIN( 291)				gl->bindBuffer(gl->ARRAY_BUFFER,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_Pickable_obj,updateElement,(void))

void Buffer_Pickable_obj::addElement( ::peote::ui::interactive::Pickable element){
            	HX_GC_STACKFRAME(&_hx_pos_89108f5bb91df3e2_308_addElement)
HXDLIN( 308)		if ((element->bytePos == -1)) {
HXLINE( 309)			if ((this->_maxElements == this->_elements->length)) {
HXLINE( 310)				if ((this->_growSize == 0)) {
HXLINE( 310)					HX_STACK_DO_THROW(HX_("Error: Can't add new Element. Buffer is full and automatic growing Buffersize is disabled.",8f,7f,c1,73));
            				}
HXLINE( 314)				{
HXLINE( 314)					int newSize = (this->_maxElements + this->_growSize);
HXDLIN( 314)					 ::haxe::io::Bytes _newBytes = ::haxe::io::Bytes_obj::alloc((this->_elemBuffSize * newSize));
HXDLIN( 314)					_newBytes->blit(0,this->_bytes,0,(this->_elemBuffSize * this->_maxElements));
HXDLIN( 314)					this->_bytes = _newBytes;
HXDLIN( 314)					::Array< ::Dynamic> _newElements = ::Array_obj< ::Dynamic>::__new(newSize);
HXDLIN( 314)					{
HXLINE( 314)						int _g = 0;
HXDLIN( 314)						int _g1 = this->_maxElements;
HXDLIN( 314)						while((_g < _g1)){
HXLINE( 314)							_g = (_g + 1);
HXDLIN( 314)							int i = (_g - 1);
HXDLIN( 314)							 ::peote::ui::interactive::Pickable element1 = ( ( ::peote::ui::interactive::Pickable)(_hx_array_unsafe_get(this->_elements,i)) );
HXDLIN( 314)							int size = this->_elemBuffSize;
HXDLIN( 314)							element1->bufferPointer = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer( ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,this->_bytes,element1->bytePos));
HXDLIN( 314)							_newElements->__unsafe_set(i,element1);
            						}
            					}
HXDLIN( 314)					this->_elements = _newElements;
HXDLIN( 314)					if (::hx::IsNotNull( this->_gl )) {
HXLINE( 314)						this->_gl->deleteBuffer(this->_glBuffer);
HXDLIN( 314)						this->_glBuffer = this->_gl->createBuffer();
HXDLIN( 314)						this->_gl->bindBuffer(this->_gl->ARRAY_BUFFER,this->_glBuffer);
HXDLIN( 314)						 ::lime::_internal::backend::native::NativeOpenGLRenderContext _hx_tmp = this->_gl;
HXDLIN( 314)						int _hx_tmp1 = this->_gl->ARRAY_BUFFER;
HXDLIN( 314)						int _hx_tmp2 = this->_bytes->length;
HXDLIN( 314)						Float _hx_tmp3 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer( ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,this->_bytes,0));
HXDLIN( 314)						_hx_tmp->bufferData(_hx_tmp1,_hx_tmp2,_hx_tmp3,this->_gl->STREAM_DRAW);
HXDLIN( 314)						this->_gl->bindBuffer(this->_gl->ARRAY_BUFFER,null());
            					}
            				}
            			}
HXLINE( 316)			element->bytePos = (this->_maxElements * this->_elemBuffSize);
HXLINE( 317)			int size1 = this->_elemBuffSize;
HXDLIN( 317)			element->bufferPointer = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer( ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,this->_bytes,element->bytePos));
HXLINE( 319)			this->_elements->__unsafe_set(this->_maxElements++,element);
HXLINE( 320)			this->updateElement(element);
            		}
            		else {
HXLINE( 322)			HX_STACK_DO_THROW(HX_("Error: Element is already inside a Buffer",b7,37,4b,9a));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_Pickable_obj,addElement,(void))

void Buffer_Pickable_obj::removeElement( ::peote::ui::interactive::Pickable element){
            	HX_GC_STACKFRAME(&_hx_pos_89108f5bb91df3e2_332_removeElement)
HXDLIN( 332)		if ((element->bytePos != -1)) {
HXLINE( 333)			bool _hx_tmp;
HXDLIN( 333)			if ((this->_maxElements > 1)) {
HXLINE( 333)				_hx_tmp = (element->bytePos < ((this->_maxElements - 1) * this->_elemBuffSize));
            			}
            			else {
HXLINE( 333)				_hx_tmp = false;
            			}
HXDLIN( 333)			if (_hx_tmp) {
HXLINE( 337)				 ::peote::ui::interactive::Pickable lastElement = ( ( ::peote::ui::interactive::Pickable)(_hx_array_unsafe_get(this->_elements,--this->_maxElements)) );
HXLINE( 338)				lastElement->bytePos = element->bytePos;
HXLINE( 340)				int size = this->_elemBuffSize;
HXDLIN( 340)				lastElement->bufferPointer = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer( ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,this->_bytes,element->bytePos));
HXLINE( 341)				this->updateElement(lastElement);
HXLINE( 342)				{
HXLINE( 342)					::Array< ::Dynamic> this1 = this->_elements;
HXDLIN( 342)					int index = ::Std_obj::_hx_int((( (Float)(element->bytePos) ) / ( (Float)(this->_elemBuffSize) )));
HXDLIN( 342)					this1->__unsafe_set(index,lastElement);
            				}
            			}
            			else {
HXLINE( 344)				this->_maxElements--;
            			}
HXLINE( 345)			element->bytePos = -1;
HXLINE( 346)			bool _hx_tmp1;
HXDLIN( 346)			bool _hx_tmp2;
HXDLIN( 346)			if ((this->_shrinkAtSize > 0)) {
HXLINE( 346)				_hx_tmp2 = ((this->_elements->length - this->_growSize) >= this->_minSize);
            			}
            			else {
HXLINE( 346)				_hx_tmp2 = false;
            			}
HXDLIN( 346)			if (_hx_tmp2) {
HXLINE( 346)				_hx_tmp1 = (this->_maxElements <= (this->_elements->length - this->_shrinkAtSize));
            			}
            			else {
HXLINE( 346)				_hx_tmp1 = false;
            			}
HXDLIN( 346)			if (_hx_tmp1) {
HXLINE( 350)				int newSize = (this->_elements->length - this->_growSize);
HXDLIN( 350)				 ::haxe::io::Bytes _newBytes = ::haxe::io::Bytes_obj::alloc((this->_elemBuffSize * newSize));
HXDLIN( 350)				_newBytes->blit(0,this->_bytes,0,(this->_elemBuffSize * this->_maxElements));
HXDLIN( 350)				this->_bytes = _newBytes;
HXDLIN( 350)				::Array< ::Dynamic> _newElements = ::Array_obj< ::Dynamic>::__new(newSize);
HXDLIN( 350)				{
HXLINE( 350)					int _g = 0;
HXDLIN( 350)					int _g1 = this->_maxElements;
HXDLIN( 350)					while((_g < _g1)){
HXLINE( 350)						_g = (_g + 1);
HXDLIN( 350)						int i = (_g - 1);
HXDLIN( 350)						 ::peote::ui::interactive::Pickable element1 = ( ( ::peote::ui::interactive::Pickable)(_hx_array_unsafe_get(this->_elements,i)) );
HXDLIN( 350)						int size1 = this->_elemBuffSize;
HXDLIN( 350)						element1->bufferPointer = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer( ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,this->_bytes,element1->bytePos));
HXDLIN( 350)						_newElements->__unsafe_set(i,element1);
            					}
            				}
HXDLIN( 350)				this->_elements = _newElements;
HXDLIN( 350)				if (::hx::IsNotNull( this->_gl )) {
HXLINE( 350)					this->_gl->deleteBuffer(this->_glBuffer);
HXDLIN( 350)					this->_glBuffer = this->_gl->createBuffer();
HXDLIN( 350)					this->_gl->bindBuffer(this->_gl->ARRAY_BUFFER,this->_glBuffer);
HXDLIN( 350)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext _hx_tmp3 = this->_gl;
HXDLIN( 350)					int _hx_tmp4 = this->_gl->ARRAY_BUFFER;
HXDLIN( 350)					int _hx_tmp5 = this->_bytes->length;
HXDLIN( 350)					Float _hx_tmp6 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer( ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,this->_bytes,0));
HXDLIN( 350)					_hx_tmp3->bufferData(_hx_tmp4,_hx_tmp5,_hx_tmp6,this->_gl->STREAM_DRAW);
HXDLIN( 350)					this->_gl->bindBuffer(this->_gl->ARRAY_BUFFER,null());
            				}
            			}
            		}
            		else {
HXLINE( 353)			HX_STACK_DO_THROW(HX_("Error: Element is not inside a Buffer",32,e1,31,86));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_Pickable_obj,removeElement,(void))

 ::peote::ui::interactive::Pickable Buffer_Pickable_obj::getElement(int elementIndex){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_417_getElement)
HXDLIN( 417)		return ( ( ::peote::ui::interactive::Pickable)(_hx_array_unsafe_get(this->_elements,elementIndex)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_Pickable_obj,getElement,return )

int Buffer_Pickable_obj::getElementIndex( ::peote::ui::interactive::Pickable element){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_426_getElementIndex)
HXDLIN( 426)		if ((element->bytePos != -1)) {
HXLINE( 427)			return ::Std_obj::_hx_int((( (Float)(element->bytePos) ) / ( (Float)(this->_elemBuffSize) )));
            		}
            		else {
HXLINE( 429)			HX_STACK_DO_THROW(HX_("Error: Element is not inside a Buffer",32,e1,31,86));
            		}
HXLINE( 426)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buffer_Pickable_obj,getElementIndex,return )

::String Buffer_Pickable_obj::getVertexShader(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_463_getVertexShader)
HXDLIN( 463)		return HX_("\n\t::if isES3::#version 300 es::end::\n\t::if VERTEX_INT_PRECISION::precision ::VERTEX_INT_PRECISION:: int; ::end::\n\t::if VERTEX_FLOAT_PRECISION::precision ::VERTEX_FLOAT_PRECISION:: float; ::end::\n\t::if VERTEX_SAMPLER_PRECISION::precision ::VERTEX_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\n\t::if (!isPICKING && isUBO)::\n\t//layout(std140) uniform uboView\n\tuniform uboView\n\t{\n\t\tvec2 uResolution;\n\t\tvec2 uViewOffset;\n\t\tvec2 uViewZoom;\n\t};\n\t//layout(std140) uniform uboDisplay\n\tuniform uboDisplay\n\t{\n\t\tvec2 uOffset;\n\t\tvec2 uZoom;\n\t};\n\t::else::\n\tuniform vec2 uResolution;\n\tuniform vec2 uOffset;\n\tuniform vec2 uZoom;\n\t::end::\n\t\n\t\n\t\n\t// Attributes -------------------------\n\t::IN:: vec2 aPosition;\n\t\n\t::if isPICKING::\n\t\t::if !isINSTANCED::\n\t\t\t::IN:: vec4 aElement;\n\t\t::end::\n\t::end::\n\t\n\t::IN:: vec2 aPos;\n\t::IN:: vec2 aSize;\n\t\n\t::IN:: float aRotZ;\n\t\n\t\n\t\n\t\n\t\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VAROUT:: int vElement;\n\t\t::else::\n\t\t\t::VAROUT:: vec4 vElement;\n\t\t::end::\n\t::end::\n\t\n\t\n\t\n\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VAROUT:: vec2 vTexCoord;\n\t\t\n\t::end::\t\n\n\t// custom functions -------------------\n\t::VERTEX_INJECTION::\n\n\t// --------- vertex main --------------\n\tvoid main(void)\n\t{\n\t\t\n\t\tvec2 size = ::if SIZE_FORMULA::::SIZE_FORMULA::::else::aSize::end::;\n\t\t\t\t\n\t\tvec2 rotZ = ::if ROTZ_FORMULA::::ROTZ_FORMULA::::else::vec2( 0.0, aRotZ )::end::;\n\t\tvec2 pos = ::if POS_FORMULA::::POS_FORMULA::::else::aPos::end::;\npos = pos + aPosition * size;\n\t\t\n\n\t\t\n\n\t\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t\tvTexCoord = aPosition;\t\t\t\n\t\t\t\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if isINSTANCED::\n\t\t\t\tvElement = gl_InstanceID + 1;\n\t\t\t::else::\n\t\t\t\tvElement = aElement;\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\tfloat width = uResolution.x;\n\t\tfloat height = uResolution.y;\n\t\t::if (!isPICKING && isUBO)::\n\t\tfloat deltaX = (uOffset.x  + uViewOffset.x) / uZoom.x;\n\t\tfloat deltaY = (uOffset.y  + uViewOffset.y) / uZoom.y;\n\t\tvec2 zoom = uZoom * uViewZoom;\n\t\t::else::\n\t\tfloat deltaX = uOffset.x;\n\t\tfloat deltaY = uOffset.y;\n\t\tvec2 zoom = uZoom;\n\t\t::end::\n\t\t\n\t\t::if isPIXELSNAPPING::\n\t\tpos = floor( pos * ::PIXELDIVISOR:: * zoom ) / ::PIXELDIVISOR:: / zoom;\n\t\t::end::\n\t\t\n\t\tgl_Position = vec4 (\n\t\t\t 2.0 * zoom.x/width  * (pos.x + deltaX) - 1.0,\n\t\t\t-2.0 * zoom.y/height * (pos.y + deltaY) + 1.0,\n\t\t\t- rotZ.y,\n\t\t\t1.0\n\t\t);\t\t\n\t\t\n\t}\n\t",9d,98,db,1c);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getVertexShader,return )

::String Buffer_Pickable_obj::getFragmentShader(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_464_getFragmentShader)
HXDLIN( 464)		return HX_("\n\t::if isES3::#version 300 es::end::\n\t::foreach FRAGMENT_EXTENSIONS::#extension ::EXTENSION:: : enable\n\t::end::\n\t\n\t::if FRAGMENT_INT_PRECISION::precision ::FRAGMENT_INT_PRECISION:: int; ::end::\n\t::if FRAGMENT_FLOAT_PRECISION::precision ::FRAGMENT_FLOAT_PRECISION:: float; ::end::\n\t::if FRAGMENT_SAMPLER_PRECISION::precision ::FRAGMENT_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\t\n\t::FRAGMENT_PROGRAM_UNIFORMS::\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VARIN:: int vElement;\n\t\t::else::\n\t\t\t::VARIN:: vec4 vElement;\n\t\t::end::\n\t::end::\n\n\t\n\t\n\t\t\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VARIN:: vec2 vTexCoord;\n\t\t\n\t::end::\t\n\t\n\t\n\t::if isES3::\n\t\t::if (isPICKING && isINSTANCED)::\n\t\t\tout int Color;\n\t\t::else::\n\t\t\tout vec4 Color;\n\t\t::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get texture color\n\t\tvec4 getTextureColor(int TXTNUM, vec2 vTexCoord) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn(texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * ::SLOTS_WIDTH::, vTexCoord.y * ::SLOTS_HEIGHT::)));\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(::DEFAULT_VALUE::);}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureColor(a,b) vec4(0.0,0.0,0.0,0.0)::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get full texture size\n\t\tvec2 getTextureResolution(int TXTNUM) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn( vec2(::TEXTURE_WIDTH::, ::TEXTURE_HEIGHT::) );\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(vec2(0.0,0.0));}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureResolution(a) vec2(0.0,0.0)::end::\n\t::end::\n\n\t// custom functions -------------------\n\t::FRAGMENT_INJECTION::\n\t\n\t// --------- fragment main ------------\n\tvoid main(void)\n\t{\t\n\t\t\n\t\t\n\t\t::if hasTEXTURES::\n\t\t\t::foreach TEXTURES::\n\t\t\t\t// ------------- LAYER ::LAYER:: --------------\n\t\t\t\t\n\t\t\t\t::if (LAYER >= 0)::\n\t\t\t\t::if USED::\n\t\t\t\t\tvec4 t::LAYER::;\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\tt::LAYER:: = texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * ::SLOTS_WIDTH::, vTexCoord.y * ::SLOTS_HEIGHT::));\n\t\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\t// calc final color from all layers\n\t\tvec4 col = ::FRAGMENT_CALC_LAYER::;\n\t\t\n\t\t::if isDISCARD:: \n\t\t\tif (col.a <= ::DISCARD::) discard;\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if !isES3::gl_Frag::end::Color = vElement;\n\t\t::else::\n\t\t\t::if !isES3::gl_Frag::end::Color = col;\n\t\t\t// this fixing problem on old FF if alpha goes zero\n\t\t\t// ::if !isES3::gl_Frag::end::Color.w = clamp(::if !isES3::gl_Frag::end::Color.w, 0.003, 1.0);\n\t\t::end::\n\t}\n\t",69,28,f0,e5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getFragmentShader,return )

::Array< ::String > Buffer_Pickable_obj::getTextureIdentifiers(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_465_getTextureIdentifiers)
HXDLIN( 465)		return ::Array_obj< ::String >::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getTextureIdentifiers,return )

::Array< ::String > Buffer_Pickable_obj::getColorIdentifiers(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_466_getColorIdentifiers)
HXDLIN( 466)		return ::Array_obj< ::String >::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getColorIdentifiers,return )

::Array< ::String > Buffer_Pickable_obj::getCustomIdentifiers(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_467_getCustomIdentifiers)
HXDLIN( 467)		return ::Array_obj< ::String >::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getCustomIdentifiers,return )

::Array< ::String > Buffer_Pickable_obj::getCustomVaryings(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_468_getCustomVaryings)
HXDLIN( 468)		return ::Array_obj< ::String >::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getCustomVaryings,return )

::String Buffer_Pickable_obj::getDefaultColorFormula(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_469_getDefaultColorFormula)
HXDLIN( 469)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getDefaultColorFormula,return )

 ::haxe::ds::StringMap Buffer_Pickable_obj::getDefaultFormulaVars(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_470_getDefaultFormulaVars)
HXDLIN( 470)		return ::peote::ui::interactive::Pickable_obj::DEFAULT_FORMULA_VARS;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getDefaultFormulaVars,return )

 ::haxe::ds::StringMap Buffer_Pickable_obj::getFormulas(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_472_getFormulas)
HXDLIN( 472)		return ::peote::ui::interactive::Pickable_obj::FORMULAS;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getFormulas,return )

 ::haxe::ds::StringMap Buffer_Pickable_obj::getAttributes(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_473_getAttributes)
HXDLIN( 473)		return ::peote::ui::interactive::Pickable_obj::ATTRIBUTES;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getAttributes,return )

 ::haxe::ds::StringMap Buffer_Pickable_obj::getFormulaNames(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_474_getFormulaNames)
HXDLIN( 474)		return ::peote::ui::interactive::Pickable_obj::FORMULA_NAMES;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getFormulaNames,return )

::Array< ::String > Buffer_Pickable_obj::getFormulaVaryings(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_476_getFormulaVaryings)
HXDLIN( 476)		if ((::peote::ui::interactive::Pickable_obj::FORMULA_VARYINGS == HX_("",00,00,00,00))) {
HXDLIN( 476)			return ::Array_obj< ::String >::__new(0);
            		}
            		else {
HXDLIN( 476)			return ::peote::ui::interactive::Pickable_obj::FORMULA_VARYINGS.split(HX_(",",2c,00,00,00));
            		}
HXDLIN( 476)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getFormulaVaryings,return )

::Array< ::String > Buffer_Pickable_obj::getFormulaConstants(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_477_getFormulaConstants)
HXDLIN( 477)		if ((::peote::ui::interactive::Pickable_obj::FORMULA_CONSTANTS == HX_("",00,00,00,00))) {
HXDLIN( 477)			return ::Array_obj< ::String >::__new(0);
            		}
            		else {
HXDLIN( 477)			return ::peote::ui::interactive::Pickable_obj::FORMULA_CONSTANTS.split(HX_(",",2c,00,00,00));
            		}
HXDLIN( 477)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getFormulaConstants,return )

int Buffer_Pickable_obj::getMaxZindex(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_480_getMaxZindex)
HXDLIN( 480)		return 2097151;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,getMaxZindex,return )

bool Buffer_Pickable_obj::hasAlpha(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_481_hasAlpha)
HXDLIN( 481)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,hasAlpha,return )

bool Buffer_Pickable_obj::hasZindex(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_482_hasZindex)
HXDLIN( 482)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,hasZindex,return )

bool Buffer_Pickable_obj::hasPicking(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_483_hasPicking)
HXDLIN( 483)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,hasPicking,return )

bool Buffer_Pickable_obj::needFragmentPrecision(){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_485_needFragmentPrecision)
HXDLIN( 485)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buffer_Pickable_obj,needFragmentPrecision,return )

void Buffer_Pickable_obj::bindAttribLocations( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl, ::lime::graphics::opengl::GLObject glProgram){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_491_bindAttribLocations)
HXDLIN( 491)		gl->bindAttribLocation(glProgram,4,HX_("aElement",5b,14,c3,7f));
HXDLIN( 491)		gl->bindAttribLocation(glProgram,3,HX_("aRotZ",64,63,66,10));
HXDLIN( 491)		gl->bindAttribLocation(glProgram,1,HX_("aPos",b3,c7,5a,40));
HXDLIN( 491)		gl->bindAttribLocation(glProgram,2,HX_("aSize",c2,11,0b,11));
HXDLIN( 491)		gl->bindAttribLocation(glProgram,0,HX_("aPosition",2a,26,25,92));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Buffer_Pickable_obj,bindAttribLocations,(void))

void Buffer_Pickable_obj::render( ::peote::view::PeoteView peoteView, ::peote::view::Display display, ::peote::view::Program program){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_496_render)
HXDLIN( 496)		int toElement = this->_maxElements;
HXDLIN( 496)		{
HXDLIN( 496)			{
HXDLIN( 496)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_gl;
HXDLIN( 496)				gl->bindBuffer(gl->ARRAY_BUFFER,this->_glBuffer);
HXDLIN( 496)				gl->enableVertexAttribArray(4);
HXDLIN( 496)				int gl1 = gl->UNSIGNED_BYTE;
HXDLIN( 496)				gl->vertexAttribPointer(4,4,gl1,true,20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
HXDLIN( 496)				gl->enableVertexAttribArray(3);
HXDLIN( 496)				int gl2 = gl->FLOAT;
HXDLIN( 496)				gl->vertexAttribPointer(3,1,gl2,false,20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(4));
HXDLIN( 496)				gl->enableVertexAttribArray(1);
HXDLIN( 496)				int gl3 = gl->SHORT;
HXDLIN( 496)				gl->vertexAttribPointer(1,2,gl3,false,20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(8));
HXDLIN( 496)				gl->enableVertexAttribArray(2);
HXDLIN( 496)				int gl4 = gl->SHORT;
HXDLIN( 496)				gl->vertexAttribPointer(2,2,gl4,false,20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(12));
HXDLIN( 496)				gl->enableVertexAttribArray(0);
HXDLIN( 496)				int gl5 = gl->UNSIGNED_BYTE;
HXDLIN( 496)				gl->vertexAttribPointer(0,2,gl5,false,20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(16));
            			}
HXDLIN( 496)			this->_gl->drawArrays(this->_gl->TRIANGLE_STRIP,0,(toElement * 6));
HXDLIN( 496)			{
HXDLIN( 496)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl6 = this->_gl;
HXDLIN( 496)				gl6->disableVertexAttribArray(0);
HXDLIN( 496)				gl6->disableVertexAttribArray(4);
HXDLIN( 496)				gl6->disableVertexAttribArray(3);
HXDLIN( 496)				gl6->disableVertexAttribArray(1);
HXDLIN( 496)				gl6->disableVertexAttribArray(2);
            			}
HXDLIN( 496)			this->_gl->bindBuffer(this->_gl->ARRAY_BUFFER,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Buffer_Pickable_obj,render,(void))

void Buffer_Pickable_obj::pick( ::peote::view::PeoteView peoteView, ::peote::view::Display display, ::peote::view::Program program,int toElement){
            	HX_STACKFRAME(&_hx_pos_89108f5bb91df3e2_501_pick)
HXDLIN( 501)		int toElement1;
HXDLIN( 501)		if ((toElement < 0)) {
HXDLIN( 501)			toElement1 = this->_maxElements;
            		}
            		else {
HXDLIN( 501)			toElement1 = toElement;
            		}
HXDLIN( 501)		{
HXDLIN( 501)			{
HXDLIN( 501)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_gl;
HXDLIN( 501)				gl->bindBuffer(gl->ARRAY_BUFFER,this->_glBuffer);
HXDLIN( 501)				gl->enableVertexAttribArray(4);
HXDLIN( 501)				int gl1 = gl->UNSIGNED_BYTE;
HXDLIN( 501)				gl->vertexAttribPointer(4,4,gl1,true,20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
HXDLIN( 501)				gl->enableVertexAttribArray(3);
HXDLIN( 501)				int gl2 = gl->FLOAT;
HXDLIN( 501)				gl->vertexAttribPointer(3,1,gl2,false,20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(4));
HXDLIN( 501)				gl->enableVertexAttribArray(1);
HXDLIN( 501)				int gl3 = gl->SHORT;
HXDLIN( 501)				gl->vertexAttribPointer(1,2,gl3,false,20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(8));
HXDLIN( 501)				gl->enableVertexAttribArray(2);
HXDLIN( 501)				int gl4 = gl->SHORT;
HXDLIN( 501)				gl->vertexAttribPointer(2,2,gl4,false,20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(12));
HXDLIN( 501)				gl->enableVertexAttribArray(0);
HXDLIN( 501)				int gl5 = gl->UNSIGNED_BYTE;
HXDLIN( 501)				gl->vertexAttribPointer(0,2,gl5,false,20,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(16));
            			}
HXDLIN( 501)			this->_gl->drawArrays(this->_gl->TRIANGLE_STRIP,0,(toElement1 * 6));
HXDLIN( 501)			{
HXDLIN( 501)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl6 = this->_gl;
HXDLIN( 501)				gl6->disableVertexAttribArray(0);
HXDLIN( 501)				gl6->disableVertexAttribArray(4);
HXDLIN( 501)				gl6->disableVertexAttribArray(3);
HXDLIN( 501)				gl6->disableVertexAttribArray(1);
HXDLIN( 501)				gl6->disableVertexAttribArray(2);
            			}
HXDLIN( 501)			this->_gl->bindBuffer(this->_gl->ARRAY_BUFFER,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Buffer_Pickable_obj,pick,(void))


::hx::ObjectPtr< Buffer_Pickable_obj > Buffer_Pickable_obj::__new(int minSize,::hx::Null< int >  __o_growSize,::hx::Null< bool >  __o_autoShrink) {
	::hx::ObjectPtr< Buffer_Pickable_obj > __this = new Buffer_Pickable_obj();
	__this->__construct(minSize,__o_growSize,__o_autoShrink);
	return __this;
}

::hx::ObjectPtr< Buffer_Pickable_obj > Buffer_Pickable_obj::__alloc(::hx::Ctx *_hx_ctx,int minSize,::hx::Null< int >  __o_growSize,::hx::Null< bool >  __o_autoShrink) {
	Buffer_Pickable_obj *__this = (Buffer_Pickable_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Buffer_Pickable_obj), true, "peote.view.Buffer_Pickable"));
	*(void **)__this = Buffer_Pickable_obj::_hx_vtable;
	__this->__construct(minSize,__o_growSize,__o_autoShrink);
	return __this;
}

Buffer_Pickable_obj::Buffer_Pickable_obj()
{
}

void Buffer_Pickable_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Buffer_Pickable);
	HX_MARK_MEMBER_NAME(_gl,"_gl");
	HX_MARK_MEMBER_NAME(_glBuffer,"_glBuffer");
	HX_MARK_MEMBER_NAME(_elements,"_elements");
	HX_MARK_MEMBER_NAME(_maxElements,"_maxElements");
	HX_MARK_MEMBER_NAME(_elemBuffSize,"_elemBuffSize");
	HX_MARK_MEMBER_NAME(_minSize,"_minSize");
	HX_MARK_MEMBER_NAME(_growSize,"_growSize");
	HX_MARK_MEMBER_NAME(_shrinkAtSize,"_shrinkAtSize");
	HX_MARK_MEMBER_NAME(_bytes,"_bytes");
	HX_MARK_END_CLASS();
}

void Buffer_Pickable_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_gl,"_gl");
	HX_VISIT_MEMBER_NAME(_glBuffer,"_glBuffer");
	HX_VISIT_MEMBER_NAME(_elements,"_elements");
	HX_VISIT_MEMBER_NAME(_maxElements,"_maxElements");
	HX_VISIT_MEMBER_NAME(_elemBuffSize,"_elemBuffSize");
	HX_VISIT_MEMBER_NAME(_minSize,"_minSize");
	HX_VISIT_MEMBER_NAME(_growSize,"_growSize");
	HX_VISIT_MEMBER_NAME(_shrinkAtSize,"_shrinkAtSize");
	HX_VISIT_MEMBER_NAME(_bytes,"_bytes");
}

::hx::Val Buffer_Pickable_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_gl") ) { return ::hx::Val( _gl ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pick") ) { return ::hx::Val( pick_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_bytes") ) { return ::hx::Val( _bytes ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_minSize") ) { return ::hx::Val( _minSize ); }
		if (HX_FIELD_EQ(inName,"hasAlpha") ) { return ::hx::Val( hasAlpha_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_glBuffer") ) { return ::hx::Val( _glBuffer ); }
		if (HX_FIELD_EQ(inName,"_elements") ) { return ::hx::Val( _elements ); }
		if (HX_FIELD_EQ(inName,"_growSize") ) { return ::hx::Val( _growSize ); }
		if (HX_FIELD_EQ(inName,"hasZindex") ) { return ::hx::Val( hasZindex_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addElement") ) { return ::hx::Val( addElement_dyn() ); }
		if (HX_FIELD_EQ(inName,"getElement") ) { return ::hx::Val( getElement_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasPicking") ) { return ::hx::Val( hasPicking_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getFormulas") ) { return ::hx::Val( getFormulas_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_maxElements") ) { return ::hx::Val( _maxElements ); }
		if (HX_FIELD_EQ(inName,"getMaxZindex") ) { return ::hx::Val( getMaxZindex_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_elemBuffSize") ) { return ::hx::Val( _elemBuffSize ); }
		if (HX_FIELD_EQ(inName,"_shrinkAtSize") ) { return ::hx::Val( _shrinkAtSize ); }
		if (HX_FIELD_EQ(inName,"updateElement") ) { return ::hx::Val( updateElement_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeElement") ) { return ::hx::Val( removeElement_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAttributes") ) { return ::hx::Val( getAttributes_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setNewGLContext") ) { return ::hx::Val( setNewGLContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"getElementIndex") ) { return ::hx::Val( getElementIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVertexShader") ) { return ::hx::Val( getVertexShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFormulaNames") ) { return ::hx::Val( getFormulaNames_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getFragmentShader") ) { return ::hx::Val( getFragmentShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCustomVaryings") ) { return ::hx::Val( getCustomVaryings_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getFormulaVaryings") ) { return ::hx::Val( getFormulaVaryings_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getColorIdentifiers") ) { return ::hx::Val( getColorIdentifiers_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFormulaConstants") ) { return ::hx::Val( getFormulaConstants_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindAttribLocations") ) { return ::hx::Val( bindAttribLocations_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getCustomIdentifiers") ) { return ::hx::Val( getCustomIdentifiers_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getTextureIdentifiers") ) { return ::hx::Val( getTextureIdentifiers_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDefaultFormulaVars") ) { return ::hx::Val( getDefaultFormulaVars_dyn() ); }
		if (HX_FIELD_EQ(inName,"needFragmentPrecision") ) { return ::hx::Val( needFragmentPrecision_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"getDefaultColorFormula") ) { return ::hx::Val( getDefaultColorFormula_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Buffer_Pickable_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_gl") ) { _gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_bytes") ) { _bytes=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_minSize") ) { _minSize=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_glBuffer") ) { _glBuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_elements") ) { _elements=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_growSize") ) { _growSize=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_maxElements") ) { _maxElements=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_elemBuffSize") ) { _elemBuffSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_shrinkAtSize") ) { _shrinkAtSize=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Buffer_Pickable_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_gl",44,70,48,00));
	outFields->push(HX_("_glBuffer",64,2c,19,db));
	outFields->push(HX_("_elements",96,2d,5a,cb));
	outFields->push(HX_("_maxElements",fc,ee,93,5f));
	outFields->push(HX_("_elemBuffSize",c2,8a,b8,59));
	outFields->push(HX_("_minSize",f4,68,15,77));
	outFields->push(HX_("_growSize",d3,a5,e9,ec));
	outFields->push(HX_("_shrinkAtSize",dc,0d,f6,df));
	outFields->push(HX_("_bytes",ac,4f,7f,b9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Buffer_Pickable_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::lime::_internal::backend::native::NativeOpenGLRenderContext */ ,(int)offsetof(Buffer_Pickable_obj,_gl),HX_("_gl",44,70,48,00)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Buffer_Pickable_obj,_glBuffer),HX_("_glBuffer",64,2c,19,db)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Buffer_Pickable_obj,_elements),HX_("_elements",96,2d,5a,cb)},
	{::hx::fsInt,(int)offsetof(Buffer_Pickable_obj,_maxElements),HX_("_maxElements",fc,ee,93,5f)},
	{::hx::fsInt,(int)offsetof(Buffer_Pickable_obj,_elemBuffSize),HX_("_elemBuffSize",c2,8a,b8,59)},
	{::hx::fsInt,(int)offsetof(Buffer_Pickable_obj,_minSize),HX_("_minSize",f4,68,15,77)},
	{::hx::fsInt,(int)offsetof(Buffer_Pickable_obj,_growSize),HX_("_growSize",d3,a5,e9,ec)},
	{::hx::fsInt,(int)offsetof(Buffer_Pickable_obj,_shrinkAtSize),HX_("_shrinkAtSize",dc,0d,f6,df)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Buffer_Pickable_obj,_bytes),HX_("_bytes",ac,4f,7f,b9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Buffer_Pickable_obj_sStaticStorageInfo = 0;
#endif

static ::String Buffer_Pickable_obj_sMemberFields[] = {
	HX_("_gl",44,70,48,00),
	HX_("_glBuffer",64,2c,19,db),
	HX_("_elements",96,2d,5a,cb),
	HX_("_maxElements",fc,ee,93,5f),
	HX_("_elemBuffSize",c2,8a,b8,59),
	HX_("_minSize",f4,68,15,77),
	HX_("_growSize",d3,a5,e9,ec),
	HX_("_shrinkAtSize",dc,0d,f6,df),
	HX_("_bytes",ac,4f,7f,b9),
	HX_("setNewGLContext",ac,b4,0b,fc),
	HX_("updateElement",b3,13,c3,d1),
	HX_("addElement",9b,da,de,6d),
	HX_("removeElement",d8,0a,0f,df),
	HX_("getElement",c6,34,b6,55),
	HX_("getElementIndex",6c,c8,38,41),
	HX_("getVertexShader",5f,07,20,e0),
	HX_("getFragmentShader",4b,fe,4f,ac),
	HX_("getTextureIdentifiers",05,ad,d6,b5),
	HX_("getColorIdentifiers",fd,27,ea,7e),
	HX_("getCustomIdentifiers",43,06,82,b2),
	HX_("getCustomVaryings",0a,b2,c9,39),
	HX_("getDefaultColorFormula",ae,0f,05,5d),
	HX_("getDefaultFormulaVars",27,d1,f8,63),
	HX_("getFormulas",03,55,e0,9c),
	HX_("getAttributes",0d,05,e4,f3),
	HX_("getFormulaNames",38,dc,ff,48),
	HX_("getFormulaVaryings",93,3f,6d,f7),
	HX_("getFormulaConstants",ff,ba,5d,41),
	HX_("getMaxZindex",a6,4e,80,c4),
	HX_("hasAlpha",a4,f1,ee,ad),
	HX_("hasZindex",52,53,87,c6),
	HX_("hasPicking",67,0e,46,ff),
	HX_("needFragmentPrecision",18,e6,25,7b),
	HX_("bindAttribLocations",b7,ce,60,4c),
	HX_("render",56,6b,29,05),
	HX_("pick",e1,e8,57,4a),
	::String(null()) };

::hx::Class Buffer_Pickable_obj::__mClass;

void Buffer_Pickable_obj::__register()
{
	Buffer_Pickable_obj _hx_dummy;
	Buffer_Pickable_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.view.Buffer_Pickable",d4,69,c7,b5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Buffer_Pickable_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Buffer_Pickable_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Buffer_Pickable_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Buffer_Pickable_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace peote
} // end namespace view
