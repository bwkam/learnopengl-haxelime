// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_peote_view_utils_GLTool
#include <peote/view/utils/GLTool.h>
#endif
#ifndef INCLUDED_peote_view_utils_TexUtils
#include <peote/view/utils/TexUtils.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0eec3e4fbed6f837_11_createEmptyTexture,"peote.view.utils.TexUtils","createEmptyTexture",0x793ee92b,"peote.view.utils.TexUtils.createEmptyTexture","peote/view/utils/TexUtils.hx",11,0xf9c30890)
HX_LOCAL_STACK_FRAME(_hx_pos_0eec3e4fbed6f837_108_createPickingTexture,"peote.view.utils.TexUtils","createPickingTexture",0x9b07b8d7,"peote.view.utils.TexUtils.createPickingTexture","peote/view/utils/TexUtils.hx",108,0xf9c30890)
HX_LOCAL_STACK_FRAME(_hx_pos_0eec3e4fbed6f837_129_optimalTextureSize,"peote.view.utils.TexUtils","optimalTextureSize",0x1b6ff91b,"peote.view.utils.TexUtils.optimalTextureSize","peote/view/utils/TexUtils.hx",129,0xf9c30890)
namespace peote{
namespace view{
namespace utils{

void TexUtils_obj::__construct() { }

Dynamic TexUtils_obj::__CreateEmpty() { return new TexUtils_obj; }

void *TexUtils_obj::_hx_vtable = 0;

Dynamic TexUtils_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TexUtils_obj > _hx_result = new TexUtils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TexUtils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x393f44eb;
}

 ::lime::graphics::opengl::GLObject TexUtils_obj::createEmptyTexture( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl,int width,int height,::hx::Null< int >  __o_colorChannels,::hx::Null< bool >  __o_createMipmaps,::hx::Null< int >  __o_magFilter,::hx::Null< int >  __o_minFilter,::hx::Null< bool >  __o_useFloat){
            		int colorChannels = __o_colorChannels.Default(4);
            		bool createMipmaps = __o_createMipmaps.Default(false);
            		int magFilter = __o_magFilter.Default(0);
            		int minFilter = __o_minFilter.Default(0);
            		bool useFloat = __o_useFloat.Default(false);
            	HX_STACKFRAME(&_hx_pos_0eec3e4fbed6f837_11_createEmptyTexture)
HXLINE(  14)		 ::lime::graphics::opengl::GLObject glTexture = gl->createTexture();
HXLINE(  16)		gl->bindTexture(gl->TEXTURE_2D,glTexture);
HXLINE(  18)		::peote::view::utils::GLTool_obj::clearGlErrorQueue(gl);
HXLINE(  20)		if (useFloat) {
HXLINE(  23)			int gl1 = gl->TEXTURE_2D;
HXDLIN(  23)			int gl2 = gl->RGBA32F;
HXDLIN(  23)			int gl3 = gl->RGBA;
HXDLIN(  23)			int gl4 = gl->FLOAT;
HXDLIN(  23)			gl->texImage2D(gl1,0,gl2,width,height,0,gl3,gl4,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
HXLINE(  24)			int _hx_tmp = ::peote::view::utils::GLTool_obj::getLastGlError(gl);
HXDLIN(  24)			if ((_hx_tmp == gl->INVALID_VALUE)) {
HXLINE(  25)				::haxe::Log_obj::trace(HX_("switching to RGBA16F for float precision texture creation",a7,8e,6b,41),::hx::SourceInfo(HX_("peote/view/utils/TexUtils.hx",90,08,c3,f9),25,HX_("peote.view.utils.TexUtils",8d,95,34,ed),HX_("createEmptyTexture",ea,0e,5a,f4)));
HXLINE(  26)				int gl5 = gl->TEXTURE_2D;
HXDLIN(  26)				int gl6 = gl->RGBA16F;
HXDLIN(  26)				int gl7 = gl->RGBA;
HXDLIN(  26)				int gl8 = gl->FLOAT;
HXDLIN(  26)				gl->texImage2D(gl5,0,gl6,width,height,0,gl7,gl8,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
HXLINE(  27)				int _hx_tmp1 = ::peote::view::utils::GLTool_obj::getLastGlError(gl);
HXDLIN(  27)				if ((_hx_tmp1 == gl->INVALID_VALUE)) {
HXLINE(  28)					::haxe::Log_obj::trace(HX_("switching to RGBA for float precision texture creation",1a,4e,d0,b1),::hx::SourceInfo(HX_("peote/view/utils/TexUtils.hx",90,08,c3,f9),28,HX_("peote.view.utils.TexUtils",8d,95,34,ed),HX_("createEmptyTexture",ea,0e,5a,f4)));
HXLINE(  29)					int gl9 = gl->TEXTURE_2D;
HXDLIN(  29)					int gl10 = gl->RGBA;
HXDLIN(  29)					int gl11 = gl->RGBA;
HXDLIN(  29)					int gl12 = gl->FLOAT;
HXDLIN(  29)					gl->texImage2D(gl9,0,gl10,width,height,0,gl11,gl12,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
            				}
            			}
            		}
            		else {
HXLINE(  33)			int gl13 = gl->TEXTURE_2D;
HXDLIN(  33)			int gl14 = gl->RGBA;
HXDLIN(  33)			int gl15 = gl->RGBA;
HXDLIN(  33)			int gl16 = gl->UNSIGNED_BYTE;
HXDLIN(  33)			gl->texImage2D(gl13,0,gl14,width,height,0,gl15,gl16,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
            		}
HXLINE(  35)		int _hx_tmp2 = ::peote::view::utils::GLTool_obj::getLastGlError(gl);
HXDLIN(  35)		if ((_hx_tmp2 == gl->OUT_OF_MEMORY)) {
HXLINE(  36)			HX_STACK_DO_THROW(HX_("OUT OF GPU MEMORY while texture creation",27,97,7e,8c));
            		}
HXLINE(  42)		if ((magFilter == 1)) {
HXLINE(  44)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MAG_FILTER,gl->LINEAR);
            		}
            		else {
HXLINE(  43)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MAG_FILTER,gl->NEAREST);
            		}
HXLINE(  48)		if (createMipmaps) {
HXLINE(  52)			switch((int)(minFilter)){
            				case (int)1: {
HXLINE(  54)					gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->LINEAR_MIPMAP_LINEAR);
            				}
            				break;
            				case (int)2: {
HXLINE(  55)					gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->NEAREST_MIPMAP_NEAREST);
            				}
            				break;
            				case (int)3: {
HXLINE(  56)					gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->NEAREST_MIPMAP_LINEAR);
            				}
            				break;
            				default:{
HXLINE(  53)					gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->LINEAR_MIPMAP_NEAREST);
            				}
            			}
            		}
            		else {
HXLINE(  61)			if ((minFilter == 1)) {
HXLINE(  63)				gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->LINEAR);
            			}
            			else {
HXLINE(  62)				gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->NEAREST);
            			}
            		}
HXLINE(  68)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_S,gl->CLAMP_TO_EDGE);
HXLINE(  69)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_T,gl->CLAMP_TO_EDGE);
HXLINE(  71)		if (createMipmaps) {
HXLINE(  74)			gl->generateMipmap(gl->TEXTURE_2D);
            		}
HXLINE(  78)		gl->bindTexture(gl->TEXTURE_2D,null());
HXLINE(  80)		return glTexture;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(TexUtils_obj,createEmptyTexture,return )

 ::lime::graphics::opengl::GLObject TexUtils_obj::createPickingTexture( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl,::hx::Null< bool >  __o_isRGBA32I){
            		bool isRGBA32I = __o_isRGBA32I.Default(false);
            	HX_STACKFRAME(&_hx_pos_0eec3e4fbed6f837_108_createPickingTexture)
HXLINE( 109)		 ::lime::graphics::opengl::GLObject glTexture = gl->createTexture();
HXLINE( 110)		gl->bindTexture(gl->TEXTURE_2D,glTexture);
HXLINE( 112)		if (isRGBA32I) {
HXLINE( 112)			int gl1 = gl->TEXTURE_2D;
HXDLIN( 112)			int gl2 = gl->RGBA32I;
HXDLIN( 112)			int gl3 = gl->RGBA_INTEGER;
HXDLIN( 112)			int gl4 = gl->INT;
HXDLIN( 112)			gl->texImage2D(gl1,0,gl2,1,1,0,gl3,gl4,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
            		}
            		else {
HXLINE( 113)			int gl5 = gl->TEXTURE_2D;
HXDLIN( 113)			int gl6 = gl->RGBA;
HXDLIN( 113)			int gl7 = gl->RGBA;
HXDLIN( 113)			int gl8 = gl->UNSIGNED_BYTE;
HXDLIN( 113)			gl->texImage2D(gl5,0,gl6,1,1,0,gl7,gl8,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
            		}
HXLINE( 116)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MAG_FILTER,gl->NEAREST);
HXLINE( 117)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->NEAREST);
HXLINE( 120)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_S,gl->CLAMP_TO_EDGE);
HXLINE( 121)		gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_T,gl->CLAMP_TO_EDGE);
HXLINE( 123)		gl->bindTexture(gl->TEXTURE_2D,null());
HXLINE( 124)		return glTexture;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TexUtils_obj,createPickingTexture,return )

 ::Dynamic TexUtils_obj::optimalTextureSize(int imageSlots,int slotWidth,int slotHeight,int maxTextureSize,::hx::Null< bool >  __o_errorIfNotFit,::hx::Null< bool >  __o_debug){
            		bool errorIfNotFit = __o_errorIfNotFit.Default(true);
            		bool debug = __o_debug.Default(true);
            	HX_STACKFRAME(&_hx_pos_0eec3e4fbed6f837_129_optimalTextureSize)
HXLINE( 130)		int mts = ::Math_obj::ceil((::Math_obj::log(( (Float)(maxTextureSize) )) / ::Math_obj::log(( (Float)(2) ))));
HXLINE( 132)		int a = ::Math_obj::ceil((::Math_obj::log(( (Float)(((imageSlots * slotWidth) * slotHeight)) )) / ::Math_obj::log(( (Float)(2) ))));
HXLINE( 133)		int r;
HXLINE( 134)		int w = 1;
HXLINE( 135)		int h = (a - 1);
HXLINE( 136)		int delta = ::Math_obj::floor(::Math_obj::abs(( (Float)((w - h)) )));
HXLINE( 137)		int rmin = ((1 << mts) * (1 << mts));
HXLINE( 138)		bool found = false;
HXLINE( 139)		int n = ::Math_obj::floor(::Math_obj::min(( (Float)(mts) ),( (Float)(a) )));
HXLINE( 140)		int m;
HXLINE( 142)		while(((1 << n) >= slotWidth)){
HXLINE( 144)			m = ::Math_obj::floor(::Math_obj::min(( (Float)(mts) ),( (Float)(((a - n) + 1)) )));
HXLINE( 145)			while(((1 << m) >= slotHeight)){
HXLINE( 147)				if (((::Math_obj::floor((( (Float)((1 << n)) ) / ( (Float)(slotWidth) ))) * ::Math_obj::floor((( (Float)((1 << m)) ) / ( (Float)(slotHeight) )))) < imageSlots)) {
HXLINE( 147)					goto _hx_goto_3;
            				}
HXLINE( 148)				r = (((1 << n) * (1 << m)) - ((imageSlots * slotWidth) * slotHeight));
HXLINE( 149)				if ((r < 0)) {
HXLINE( 149)					goto _hx_goto_3;
            				}
HXLINE( 150)				if ((r <= rmin)) {
HXLINE( 152)					if ((r == rmin)) {
HXLINE( 154)						if ((::Math_obj::abs(( (Float)((n - m)) )) < delta)) {
HXLINE( 156)							delta = ::Math_obj::floor(::Math_obj::abs(( (Float)((n - m)) )));
HXLINE( 157)							w = n;
HXDLIN( 157)							h = m;
HXLINE( 158)							found = true;
            						}
            					}
            					else {
HXLINE( 163)						w = n;
HXDLIN( 163)						h = m;
HXLINE( 164)						rmin = r;
HXLINE( 165)						found = true;
            					}
            				}
HXLINE( 169)				m = (m - 1);
            			}
            			_hx_goto_3:;
HXLINE( 171)			n = (n - 1);
            		}
HXLINE( 174)		if (found) {
HXLINE( 177)			w = (1 << w);
HXLINE( 178)			h = (1 << h);
            		}
            		else {
HXLINE( 182)			if (errorIfNotFit) {
HXLINE( 182)				HX_STACK_DO_THROW(((((((((HX_("Error: max texture-size (",45,41,1c,9f) + maxTextureSize) + HX_(") is to small for ",96,2c,7d,c7)) + imageSlots) + HX_(" images (",e0,2a,7f,e2)) + slotWidth) + HX_(" x ",c8,b0,18,00)) + slotHeight) + HX_(")",29,00,00,00)));
            			}
HXLINE( 183)			bool _hx_tmp;
HXDLIN( 183)			if ((slotWidth <= maxTextureSize)) {
HXLINE( 183)				_hx_tmp = (slotHeight > maxTextureSize);
            			}
            			else {
HXLINE( 183)				_hx_tmp = true;
            			}
HXDLIN( 183)			if (_hx_tmp) {
HXLINE( 183)				HX_STACK_DO_THROW(((((((HX_("Error: max texture-size (",45,41,1c,9f) + maxTextureSize) + HX_(") is to small for image (",4d,3a,c3,c2)) + slotWidth) + HX_(" x ",c8,b0,18,00)) + slotHeight) + HX_(")",29,00,00,00)));
            			}
HXLINE( 184)			h = maxTextureSize;
HXDLIN( 184)			w = h;
            		}
HXLINE( 194)		int _hx_tmp1 = ::Std_obj::_hx_int((( (Float)(w) ) / ( (Float)(slotWidth) )));
HXLINE( 195)		int _hx_tmp2 = ::Std_obj::_hx_int((( (Float)(h) ) / ( (Float)(slotHeight) )));
HXLINE( 196)		int _hx_tmp3 = ::Std_obj::_hx_int((( (Float)(w) ) / ( (Float)(slotWidth) )));
HXLINE( 191)		return  ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("imageSlots",5a,27,9a,8a),(_hx_tmp3 * ::Std_obj::_hx_int((( (Float)(h) ) / ( (Float)(slotHeight) )))))
            			->setFixed(1,HX_("width",06,b6,62,ca),w)
            			->setFixed(2,HX_("height",e7,07,4c,02),h)
            			->setFixed(3,HX_("slotsX",03,3e,08,74),_hx_tmp1)
            			->setFixed(4,HX_("slotsY",04,3e,08,74),_hx_tmp2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(TexUtils_obj,optimalTextureSize,return )


TexUtils_obj::TexUtils_obj()
{
}

bool TexUtils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"createEmptyTexture") ) { outValue = createEmptyTexture_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"optimalTextureSize") ) { outValue = optimalTextureSize_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createPickingTexture") ) { outValue = createPickingTexture_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TexUtils_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TexUtils_obj_sStaticStorageInfo = 0;
#endif

::hx::Class TexUtils_obj::__mClass;

static ::String TexUtils_obj_sStaticFields[] = {
	HX_("createEmptyTexture",ea,0e,5a,f4),
	HX_("createPickingTexture",56,0c,87,6f),
	HX_("optimalTextureSize",da,1e,8b,96),
	::String(null())
};

void TexUtils_obj::__register()
{
	TexUtils_obj _hx_dummy;
	TexUtils_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.view.utils.TexUtils",8d,95,34,ed);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TexUtils_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TexUtils_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< TexUtils_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TexUtils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TexUtils_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace peote
} // end namespace view
} // end namespace utils
