// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Int_Void
#include <lime/app/_Event_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_graphics_RenderContext_Void
#include <lime/app/_Event_lime_graphics_RenderContext_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_peote_view_ActiveTexture
#include <peote/view/ActiveTexture.h>
#endif
#ifndef INCLUDED_peote_view_BufferInterface
#include <peote/view/BufferInterface.h>
#endif
#ifndef INCLUDED_peote_view_Display
#include <peote/view/Display.h>
#endif
#ifndef INCLUDED_peote_view_PeoteView
#include <peote/view/PeoteView.h>
#endif
#ifndef INCLUDED_peote_view_Precision
#include <peote/view/Precision.h>
#endif
#ifndef INCLUDED_peote_view_Program
#include <peote/view/Program.h>
#endif
#ifndef INCLUDED_peote_view_Texture
#include <peote/view/Texture.h>
#endif
#ifndef INCLUDED_peote_view_UniformFloat
#include <peote/view/UniformFloat.h>
#endif
#ifndef INCLUDED_peote_view__PeoteGL_PeoteGL_Impl_
#include <peote/view/_PeoteGL/PeoteGL_Impl_.h>
#endif
#ifndef INCLUDED_peote_view_utils_Background
#include <peote/view/utils/Background.h>
#endif
#ifndef INCLUDED_peote_view_utils_GLTool
#include <peote/view/utils/GLTool.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderListItem_peote_view_ActiveTexture
#include <peote/view/utils/RenderListItem_peote_view_ActiveTexture.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderListItem_peote_view_Display
#include <peote/view/utils/RenderListItem_peote_view_Display.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderListItem_peote_view_Program
#include <peote/view/utils/RenderListItem_peote_view_Program.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderList_peote_view_ActiveTexture
#include <peote/view/utils/RenderList_peote_view_ActiveTexture.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderList_peote_view_Display
#include <peote/view/utils/RenderList_peote_view_Display.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderList_peote_view_Program
#include <peote/view/utils/RenderList_peote_view_Program.h>
#endif
#ifndef INCLUDED_peote_view_utils_TexUtils
#include <peote/view/utils/TexUtils.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_68f5590bb3d387f0_24_new,"peote.view.PeoteView","new",0xa1551b9c,"peote.view.PeoteView.new","peote/view/PeoteView.hx",24,0xcdf5b7b4)
HX_LOCAL_STACK_FRAME(_hx_pos_68f5590bb3d387f0_52_isTextureStateChange,"peote.view.PeoteView","isTextureStateChange",0xaba58914,"peote.view.PeoteView.isTextureStateChange","peote/view/PeoteView.hx",52,0xcdf5b7b4)
HX_LOCAL_STACK_FRAME(_hx_pos_68f5590bb3d387f0_213_addDisplay,"peote.view.PeoteView","addDisplay",0x43352a65,"peote.view.PeoteView.addDisplay","peote/view/PeoteView.hx",213,0xcdf5b7b4)
HX_LOCAL_STACK_FRAME(_hx_pos_68f5590bb3d387f0_287_resize,"peote.view.PeoteView","resize",0xf8c3bc38,"peote.view.PeoteView.resize","peote/view/PeoteView.hx",287,0xcdf5b7b4)
HX_LOCAL_STACK_FRAME(_hx_pos_68f5590bb3d387f0_351_getElementAt,"peote.view.PeoteView","getElementAt",0x70b3189d,"peote.view.PeoteView.getElementAt","peote/view/PeoteView.hx",351,0xcdf5b7b4)
HX_LOCAL_STACK_FRAME(_hx_pos_68f5590bb3d387f0_379_pick,"peote.view.PeoteView","pick",0x8a787225,"peote.view.PeoteView.pick","peote/view/PeoteView.hx",379,0xcdf5b7b4)
HX_LOCAL_STACK_FRAME(_hx_pos_68f5590bb3d387f0_612_render,"peote.view.PeoteView","render",0xf571cd9a,"peote.view.PeoteView.render","peote/view/PeoteView.hx",612,0xcdf5b7b4)
namespace peote{
namespace view{

void PeoteView_obj::__construct( ::lime::ui::Window window,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_registerEvents){
            		int color = __o_color.Default(255);
            		bool registerEvents = __o_registerEvents.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_68f5590bb3d387f0_24_new)
HXLINE( 109)		this->speed = ((Float)1.0);
HXLINE( 108)		this->stopTime = ((Float)0);
HXLINE( 107)		this->startTime = ((Float)0);
HXLINE( 106)		this->isRun = false;
HXLINE(  93)		this->yOffset = ((Float)0);
HXLINE(  88)		this->xOffset = ((Float)0);
HXLINE(  67)		this->yz = ((Float)1.0);
HXLINE(  66)		this->xz = ((Float)1.0);
HXLINE(  48)		this->maskState = 0;
HXLINE(  47)		this->glStateDepth = false;
HXLINE(  46)		this->glStateAlpha = false;
HXLINE(  45)		this->colorState = true;
HXLINE(  43)		this->alpha = ((Float)1.0);
HXLINE(  42)		this->blue = ((Float)0.0);
HXLINE(  41)		this->green = ((Float)0.0);
HXLINE(  40)		this->red = ((Float)0.0);
HXLINE(  26)		this->window = null();
HXLINE( 141)		this->window = window;
HXLINE( 142)		this->gl = ::peote::view::_PeoteGL::PeoteGL_Impl__obj::fromRenderContext(window->context);
HXLINE( 143)		this->width = window->_hx___width;
HXLINE( 144)		this->height = window->_hx___height;
HXLINE( 145)		{
HXLINE( 145)			this->red = (( (Float)(((color >> 24) & 255)) ) / ((Float)255.0));
HXDLIN( 145)			this->green = (( (Float)(((color >> 16) & 255)) ) / ((Float)255.0));
HXDLIN( 145)			this->blue = (( (Float)(((color >> 8) & 255)) ) / ((Float)255.0));
HXDLIN( 145)			this->alpha = (( (Float)((color & 255)) ) / ((Float)255.0));
            		}
HXLINE( 169)		this->maxTextureImageUnits = ( (int)(this->gl->getParameter(this->gl->MAX_TEXTURE_IMAGE_UNITS)) );
HXLINE( 170)		this->glStateTexture = ::Array_obj< ::Dynamic>::__new(this->maxTextureImageUnits);
HXLINE( 186)		{
HXLINE( 186)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->gl;
HXDLIN( 186)			{
HXLINE( 186)				int shaderType = gl->VERTEX_SHADER;
HXDLIN( 186)				 ::Dynamic t = ::peote::view::Precision_obj::VertexFloat;
HXDLIN( 186)				 ::Dynamic p = gl->getShaderPrecisionFormat(shaderType,gl->HIGH_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p )) {
HXLINE( 186)					t->__SetField(HX_("high",62,37,0e,45),p->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p = gl->getShaderPrecisionFormat(shaderType,gl->MEDIUM_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p )) {
HXLINE( 186)					t->__SetField(HX_("medium",75,54,c8,fe),p->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p = gl->getShaderPrecisionFormat(shaderType,gl->LOW_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p )) {
HXLINE( 186)					t->__SetField(HX_("low",94,54,52,00),p->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
            			}
HXDLIN( 186)			{
HXLINE( 186)				int shaderType1 = gl->VERTEX_SHADER;
HXDLIN( 186)				 ::Dynamic t1 = ::peote::view::Precision_obj::VertexInt;
HXDLIN( 186)				 ::Dynamic p1 = gl->getShaderPrecisionFormat(shaderType1,gl->HIGH_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p1 )) {
HXLINE( 186)					t1->__SetField(HX_("high",62,37,0e,45),p1->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p1 = gl->getShaderPrecisionFormat(shaderType1,gl->MEDIUM_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p1 )) {
HXLINE( 186)					t1->__SetField(HX_("medium",75,54,c8,fe),p1->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p1 = gl->getShaderPrecisionFormat(shaderType1,gl->LOW_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p1 )) {
HXLINE( 186)					t1->__SetField(HX_("low",94,54,52,00),p1->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
            			}
HXDLIN( 186)			{
HXLINE( 186)				int shaderType2 = gl->VERTEX_SHADER;
HXDLIN( 186)				 ::Dynamic t2 = ::peote::view::Precision_obj::VertexSampler;
HXDLIN( 186)				 ::Dynamic p2 = gl->getShaderPrecisionFormat(shaderType2,gl->HIGH_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p2 )) {
HXLINE( 186)					t2->__SetField(HX_("high",62,37,0e,45),p2->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p2 = gl->getShaderPrecisionFormat(shaderType2,gl->MEDIUM_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p2 )) {
HXLINE( 186)					t2->__SetField(HX_("medium",75,54,c8,fe),p2->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p2 = gl->getShaderPrecisionFormat(shaderType2,gl->LOW_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p2 )) {
HXLINE( 186)					t2->__SetField(HX_("low",94,54,52,00),p2->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
            			}
HXDLIN( 186)			{
HXLINE( 186)				int shaderType3 = gl->FRAGMENT_SHADER;
HXDLIN( 186)				 ::Dynamic t3 = ::peote::view::Precision_obj::FragmentFloat;
HXDLIN( 186)				 ::Dynamic p3 = gl->getShaderPrecisionFormat(shaderType3,gl->HIGH_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p3 )) {
HXLINE( 186)					t3->__SetField(HX_("high",62,37,0e,45),p3->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p3 = gl->getShaderPrecisionFormat(shaderType3,gl->MEDIUM_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p3 )) {
HXLINE( 186)					t3->__SetField(HX_("medium",75,54,c8,fe),p3->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p3 = gl->getShaderPrecisionFormat(shaderType3,gl->LOW_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p3 )) {
HXLINE( 186)					t3->__SetField(HX_("low",94,54,52,00),p3->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
            			}
HXDLIN( 186)			{
HXLINE( 186)				int shaderType4 = gl->FRAGMENT_SHADER;
HXDLIN( 186)				 ::Dynamic t4 = ::peote::view::Precision_obj::FragmentInt;
HXDLIN( 186)				 ::Dynamic p4 = gl->getShaderPrecisionFormat(shaderType4,gl->HIGH_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p4 )) {
HXLINE( 186)					t4->__SetField(HX_("high",62,37,0e,45),p4->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p4 = gl->getShaderPrecisionFormat(shaderType4,gl->MEDIUM_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p4 )) {
HXLINE( 186)					t4->__SetField(HX_("medium",75,54,c8,fe),p4->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p4 = gl->getShaderPrecisionFormat(shaderType4,gl->LOW_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p4 )) {
HXLINE( 186)					t4->__SetField(HX_("low",94,54,52,00),p4->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
            			}
HXDLIN( 186)			{
HXLINE( 186)				int shaderType5 = gl->FRAGMENT_SHADER;
HXDLIN( 186)				 ::Dynamic t5 = ::peote::view::Precision_obj::FragmentSampler;
HXDLIN( 186)				 ::Dynamic p5 = gl->getShaderPrecisionFormat(shaderType5,gl->HIGH_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p5 )) {
HXLINE( 186)					t5->__SetField(HX_("high",62,37,0e,45),p5->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p5 = gl->getShaderPrecisionFormat(shaderType5,gl->MEDIUM_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p5 )) {
HXLINE( 186)					t5->__SetField(HX_("medium",75,54,c8,fe),p5->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXDLIN( 186)				p5 = gl->getShaderPrecisionFormat(shaderType5,gl->LOW_FLOAT);
HXDLIN( 186)				if (::hx::IsNotNull( p5 )) {
HXLINE( 186)					t5->__SetField(HX_("low",94,54,52,00),p5->__Field(HX_("precision",3e,d5,c7,80),::hx::paccDynamic),::hx::paccDynamic);
            				}
            			}
            		}
HXLINE( 188)		{
HXLINE( 188)			{
HXLINE( 188)				this->pickUInt8 =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(4),0,4);
HXDLIN( 188)				this->pickTexture = ::peote::view::utils::TexUtils_obj::createPickingTexture(this->gl,null());
            			}
HXDLIN( 188)			this->pickDepthBuffer = this->gl->createRenderbuffer();
HXDLIN( 188)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl1 = this->gl;
HXDLIN( 188)			 ::lime::graphics::opengl::GLObject texture = this->pickTexture;
HXDLIN( 188)			 ::lime::graphics::opengl::GLObject depthBuffer = this->pickDepthBuffer;
HXDLIN( 188)			 ::lime::graphics::opengl::GLObject framebuffer = gl1->createFramebuffer();
HXDLIN( 188)			gl1->bindRenderbuffer(gl1->RENDERBUFFER,depthBuffer);
HXDLIN( 188)			::peote::view::utils::GLTool_obj::clearGlErrorQueue(gl1);
HXDLIN( 188)			gl1->renderbufferStorage(gl1->RENDERBUFFER,gl1->DEPTH_COMPONENT24,1,1);
HXDLIN( 188)			int _hx_tmp = ::peote::view::utils::GLTool_obj::getLastGlError(gl1);
HXDLIN( 188)			if ((_hx_tmp == gl1->INVALID_ENUM)) {
HXLINE( 188)				::haxe::Log_obj::trace(HX_("switching to DEPTH_COMPONENT16 for framebuffer",69,ed,16,03),::hx::SourceInfo(HX_("peote/view/utils/GLTool.hx",3d,2a,d3,ba),41,HX_("peote.view.utils.GLTool",00,20,8a,f7),HX_("createFramebuffer",51,ef,e8,cc)));
HXDLIN( 188)				gl1->renderbufferStorage(gl1->RENDERBUFFER,gl1->DEPTH_COMPONENT16,1,1);
            			}
HXDLIN( 188)			gl1->bindFramebuffer(gl1->FRAMEBUFFER,framebuffer);
HXDLIN( 188)			gl1->framebufferRenderbuffer(gl1->FRAMEBUFFER,gl1->DEPTH_ATTACHMENT,gl1->RENDERBUFFER,depthBuffer);
HXDLIN( 188)			gl1->framebufferTexture2D(gl1->FRAMEBUFFER,gl1->COLOR_ATTACHMENT0,gl1->TEXTURE_2D,texture,0);
HXDLIN( 188)			int _hx_tmp1 = gl1->checkFramebufferStatus(gl1->FRAMEBUFFER);
HXDLIN( 188)			if ((_hx_tmp1 != gl1->FRAMEBUFFER_COMPLETE)) {
HXLINE( 188)				HX_STACK_DO_THROW(HX_("Error: Framebuffer not complete!",5a,13,e6,19));
            			}
HXDLIN( 188)			gl1->bindFramebuffer(gl1->FRAMEBUFFER,null());
HXDLIN( 188)			gl1->bindRenderbuffer(gl1->RENDERBUFFER,null());
HXDLIN( 188)			this->pickFB = framebuffer;
            		}
HXLINE( 190)		this->background =  ::peote::view::utils::Background_obj::__alloc( HX_CTX ,this->gl);
HXLINE( 192)		this->displayList =  ::peote::view::utils::RenderList_peote_view_Display_obj::__alloc( HX_CTX , ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX ));
HXLINE( 193)		this->framebufferDisplayList =  ::peote::view::utils::RenderList_peote_view_Display_obj::__alloc( HX_CTX , ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX ));
HXLINE( 195)		if (registerEvents) {
HXLINE( 196)			window->onRender->add(this->render_dyn(),null(),null());
HXLINE( 197)			window->onResize->add(this->resize_dyn(),null(),null());
            		}
            	}

Dynamic PeoteView_obj::__CreateEmpty() { return new PeoteView_obj; }

void *PeoteView_obj::_hx_vtable = 0;

Dynamic PeoteView_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PeoteView_obj > _hx_result = new PeoteView_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool PeoteView_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7394e2e4;
}

bool PeoteView_obj::isTextureStateChange(int activeTextureUnit, ::peote::view::Texture texture){
            	HX_STACKFRAME(&_hx_pos_68f5590bb3d387f0_52_isTextureStateChange)
HXLINE(  53)		if (texture->updated) {
HXLINE(  54)			texture->updated = false;
HXLINE(  56)			this->glStateTexture = ::Array_obj< ::Dynamic>::__new(this->maxTextureImageUnits);
HXLINE(  57)			this->glStateTexture->__unsafe_set(activeTextureUnit,texture->glTexture);
HXLINE(  58)			return true;
            		}
HXLINE(  60)		 ::lime::graphics::opengl::GLObject _hx_tmp = ( ( ::lime::graphics::opengl::GLObject)(_hx_array_unsafe_get(this->glStateTexture,activeTextureUnit)) );
HXDLIN(  60)		if (::hx::IsInstanceNotEq( _hx_tmp,texture->glTexture )) {
HXLINE(  61)			this->glStateTexture->__unsafe_set(activeTextureUnit,texture->glTexture);
HXLINE(  62)			return true;
            		}
            		else {
HXLINE(  63)			return false;
            		}
HXLINE(  60)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PeoteView_obj,isTextureStateChange,return )

void PeoteView_obj::addDisplay( ::peote::view::Display display, ::peote::view::Display atDisplay,::hx::Null< bool >  __o_addBefore){
            		bool addBefore = __o_addBefore.Default(false);
            	HX_STACKFRAME(&_hx_pos_68f5590bb3d387f0_213_addDisplay)
HXDLIN( 213)		display->addToPeoteView(::hx::ObjectPtr<OBJ_>(this),atDisplay,addBefore);
            	}


HX_DEFINE_DYNAMIC_FUNC3(PeoteView_obj,addDisplay,(void))

void PeoteView_obj::resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_68f5590bb3d387f0_287_resize)
HXLINE( 288)		this->width = width;
HXLINE( 289)		this->height = height;
HXLINE( 291)		if (::hx::IsNotNull( this->onResize )) {
HXLINE( 291)			this->onResize(width,height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PeoteView_obj,resize,(void))

int PeoteView_obj::getElementAt(Float posX,Float posY, ::peote::view::Display display, ::peote::view::Program program){
            	HX_STACKFRAME(&_hx_pos_68f5590bb3d387f0_351_getElementAt)
HXLINE( 352)		this->gl->bindFramebuffer(this->gl->FRAMEBUFFER,this->pickFB);
HXLINE( 353)		int element = this->pick(posX,posY,display,program,-1);
HXLINE( 354)		this->gl->bindFramebuffer(this->gl->FRAMEBUFFER,null());
HXLINE( 355)		return element;
            	}


HX_DEFINE_DYNAMIC_FUNC4(PeoteView_obj,getElementAt,return )

int PeoteView_obj::pick(Float posX,Float posY, ::peote::view::Display display, ::peote::view::Program program,int toElement){
            	HX_STACKFRAME(&_hx_pos_68f5590bb3d387f0_379_pick)
HXLINE( 380)		if (!(::peote::view::BufferInterface_obj::hasPicking(program->buffer))) {
HXLINE( 380)			HX_STACK_DO_THROW(HX_("Error: opengl-Picking - type of buffer/element is not pickable !",51,16,df,ad));
            		}
HXLINE( 383)		this->gl->viewport(0,0,1,1);
HXLINE( 384)		this->gl->scissor(0,0,1,1);
HXLINE( 385)		this->gl->enable(this->gl->SCISSOR_TEST);
HXLINE( 393)		{
HXLINE( 394)			this->gl->clearColor(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 395)			this->gl->clear((this->gl->COLOR_BUFFER_BIT | this->gl->DEPTH_BUFFER_BIT));
HXLINE( 396)			this->gl->depthFunc(this->gl->LEQUAL);
            		}
HXLINE( 399)		Float xOff = (this->xOffset - (((this->xOffset + posX) - this->xOffset) / this->xz));
HXLINE( 400)		Float yOff = (this->yOffset - (((this->yOffset + posY) - this->yOffset) / this->xz));
HXLINE( 402)		{
HXLINE( 402)			{
HXLINE( 402)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->gl;
HXDLIN( 402)				Float xz = this->xz;
HXDLIN( 402)				Float yz = this->yz;
HXDLIN( 402)				int sx = ::Math_obj::floor(((display->x + xOff) * xz));
HXDLIN( 402)				int sy = ::Math_obj::floor(((display->y + yOff) * yz));
HXDLIN( 402)				int sw = ::Math_obj::floor((( (Float)(display->width) ) * xz));
HXDLIN( 402)				int sh = ::Math_obj::floor((( (Float)(display->height) ) * yz));
HXDLIN( 402)				if ((sx < 0)) {
HXLINE( 402)					sw = (sw + sx);
            				}
HXDLIN( 402)				sx = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),( (Float)(sx) ))));
HXDLIN( 402)				sw = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)((1 - sx)) ),( (Float)(sw) ))));
HXDLIN( 402)				if ((sy < 0)) {
HXLINE( 402)					sh = (sh + sy);
            				}
HXDLIN( 402)				sy = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),( (Float)(sy) ))));
HXDLIN( 402)				sh = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)((1 - sy)) ),( (Float)(sh) ))));
HXDLIN( 402)				gl->scissor(sx,((1 - sh) - sy),sw,sh);
            			}
HXDLIN( 402)			{
HXLINE( 402)				program->gl->useProgram(program->glProgramPicking);
HXDLIN( 402)				{
HXLINE( 402)					program->textureListItem = program->textureListPicking->first;
HXDLIN( 402)					while(::hx::IsNotNull( program->textureListItem )){
HXLINE( 402)						if (this->isTextureStateChange(program->textureListItem->value->unit,program->textureListItem->value->texture)) {
HXLINE( 402)							program->gl->activeTexture((program->gl->TEXTURE0 + program->textureListItem->value->unit));
HXDLIN( 402)							program->gl->bindTexture(program->gl->TEXTURE_2D,program->textureListItem->value->texture->glTexture);
            						}
HXDLIN( 402)						program->gl->uniform1i(program->textureListItem->value->uniformLoc,program->textureListItem->value->unit);
HXDLIN( 402)						program->textureListItem = program->textureListItem->next;
            					}
            				}
HXDLIN( 402)				program->gl->uniform2f(program->uRESOLUTION_PICK,( (Float)(1) ),( (Float)(1) ));
HXDLIN( 402)				program->gl->uniform2f(program->uZOOM_PICK,(this->xz * display->xz),(this->yz * display->yz));
HXDLIN( 402)				program->gl->uniform2f(program->uOFFSET_PICK,(((display->x + display->xOffset) + xOff) / display->xz),(((display->y + display->yOffset) + yOff) / display->yz));
HXDLIN( 402)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext program1 = program->gl;
HXDLIN( 402)				int program2 = program->uTIME_PICK;
HXDLIN( 402)				Float _hx_tmp;
HXDLIN( 402)				if (this->isRun) {
HXLINE( 402)					int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 402)					Float _hx_tmp1;
HXDLIN( 402)					if ((timer > 0)) {
HXLINE( 402)						_hx_tmp1 = (( (Float)(timer) ) / ( (Float)(1000) ));
            					}
            					else {
HXLINE( 402)						_hx_tmp1 = ( (Float)(0) );
            					}
HXDLIN( 402)					_hx_tmp = (_hx_tmp1 - this->startTime);
            				}
            				else {
HXLINE( 402)					_hx_tmp = this->stopTime;
            				}
HXDLIN( 402)				program1->uniform1f(program2,(_hx_tmp * this->speed));
HXDLIN( 402)				{
HXLINE( 402)					int _g = 0;
HXDLIN( 402)					int _g1 = program->uniformFloats->length;
HXDLIN( 402)					while((_g < _g1)){
HXLINE( 402)						_g = (_g + 1);
HXDLIN( 402)						int i = (_g - 1);
HXDLIN( 402)						program->gl->uniform1f(program->uniformFloatPickLocations->__get(i),program->uniformFloats->__get(i).StaticCast<  ::peote::view::UniformFloat >()->value);
            					}
            				}
HXDLIN( 402)				{
HXLINE( 402)					bool enabled;
HXDLIN( 402)					if ((toElement == -1)) {
HXLINE( 402)						enabled = program->zIndexEnabled;
            					}
            					else {
HXLINE( 402)						enabled = false;
            					}
HXDLIN( 402)					bool _hx_tmp2;
HXDLIN( 402)					if (enabled) {
HXLINE( 402)						_hx_tmp2 = !(this->glStateDepth);
            					}
            					else {
HXLINE( 402)						_hx_tmp2 = false;
            					}
HXDLIN( 402)					if (_hx_tmp2) {
HXLINE( 402)						this->glStateDepth = true;
HXDLIN( 402)						this->gl->enable(this->gl->DEPTH_TEST);
            					}
            					else {
HXLINE( 402)						bool _hx_tmp3;
HXDLIN( 402)						if (!(enabled)) {
HXLINE( 402)							_hx_tmp3 = this->glStateDepth;
            						}
            						else {
HXLINE( 402)							_hx_tmp3 = false;
            						}
HXDLIN( 402)						if (_hx_tmp3) {
HXLINE( 402)							this->glStateDepth = false;
HXDLIN( 402)							this->gl->disable(this->gl->DEPTH_TEST);
            						}
            					}
            				}
HXDLIN( 402)				if (this->glStateAlpha) {
HXLINE( 402)					this->glStateAlpha = false;
HXDLIN( 402)					this->gl->disable(this->gl->BLEND);
            				}
HXDLIN( 402)				::peote::view::BufferInterface_obj::pick(program->buffer,::hx::ObjectPtr<OBJ_>(this),display,program,toElement);
HXDLIN( 402)				program->gl->useProgram(null());
            			}
            		}
HXLINE( 405)		int _hx_tmp4 = this->gl->checkFramebufferStatus(this->gl->FRAMEBUFFER);
HXDLIN( 405)		if ((_hx_tmp4 == this->gl->FRAMEBUFFER_COMPLETE)) {
HXLINE( 411)			{
HXLINE( 411)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN( 411)				int format = this->gl->RGBA;
HXDLIN( 411)				int type = this->gl->UNSIGNED_BYTE;
HXDLIN( 411)				this1->readPixels(0,0,1,1,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytes(this->pickUInt8->bytes));
            			}
HXLINE( 412)			 ::haxe::io::ArrayBufferViewImpl this2 = this->pickUInt8;
HXDLIN( 412)			 ::haxe::io::ArrayBufferViewImpl this3 = this->pickUInt8;
HXDLIN( 412)			 ::haxe::io::ArrayBufferViewImpl this4 = this->pickUInt8;
HXDLIN( 412)			 ::haxe::io::ArrayBufferViewImpl this5 = this->pickUInt8;
HXDLIN( 412)			return ((((( (int)(this2->bytes->b->__get((3 + this2->byteOffset))) ) << 24) | (( (int)(this3->bytes->b->__get((2 + this3->byteOffset))) ) << 16)) | (( (int)(this4->bytes->b->__get((1 + this4->byteOffset))) ) << 8)) | (( (int)(this5->bytes->b->__get(this5->byteOffset)) ) - 1));
            		}
            		else {
HXLINE( 415)			HX_STACK_DO_THROW(HX_("Error: opengl-Picking - Framebuffer not complete!",46,fb,9e,59));
            		}
HXLINE( 405)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC5(PeoteView_obj,pick,return )

void PeoteView_obj::render( ::lime::graphics::RenderContext context){
            	HX_STACKFRAME(&_hx_pos_68f5590bb3d387f0_612_render)
HXLINE( 614)		{
HXLINE( 614)			this->displayListItem = this->framebufferDisplayList->first;
HXDLIN( 614)			while(::hx::IsNotNull( this->displayListItem )){
HXLINE( 614)				if (this->displayListItem->value->_renderFramebufferEnabled) {
HXLINE( 614)					if ((this->displayListItem->value->renderFramebufferFrame == this->displayListItem->value->renderFramebufferSkipFrames)) {
HXLINE( 614)						{
HXLINE( 614)							 ::peote::view::Display display = this->displayListItem->value;
HXDLIN( 614)							 ::Dynamic textureSlot = null();
HXDLIN( 614)							if (::hx::IsNull( textureSlot )) {
HXLINE( 614)								textureSlot = display->framebufferTextureSlot;
            							}
HXDLIN( 614)							this->gl->bindFramebuffer(this->gl->FRAMEBUFFER,display->fbTexture->framebuffer);
HXDLIN( 614)							this->gl->viewport((display->fbTexture->slotWidth * ::hx::Mod(textureSlot,display->fbTexture->slotsX)),(display->fbTexture->slotHeight * ::Math_obj::floor((( (Float)(textureSlot) ) / ( (Float)(display->fbTexture->slotsX) )))),display->fbTexture->slotWidth,display->fbTexture->slotHeight);
HXDLIN( 614)							this->gl->scissor((display->fbTexture->slotWidth * ::hx::Mod(textureSlot,display->fbTexture->slotsX)),(display->fbTexture->slotHeight * ::Math_obj::floor((( (Float)(textureSlot) ) / ( (Float)(display->fbTexture->slotsX) )))),display->fbTexture->slotWidth,display->fbTexture->slotHeight);
HXDLIN( 614)							this->gl->enable(this->gl->SCISSOR_TEST);
HXDLIN( 614)							this->gl->clearColor(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 614)							if (display->fbTexture->clearOnRenderInto) {
HXLINE( 614)								this->gl->clear(((this->gl->COLOR_BUFFER_BIT | this->gl->DEPTH_BUFFER_BIT) | this->gl->STENCIL_BUFFER_BIT));
            							}
            							else {
HXLINE( 614)								this->gl->clear((this->gl->DEPTH_BUFFER_BIT | this->gl->STENCIL_BUFFER_BIT));
            							}
HXDLIN( 614)							this->gl->stencilMask(255);
HXDLIN( 614)							this->gl->blendFunc(this->gl->SRC_ALPHA,this->gl->ONE_MINUS_SRC_ALPHA);
HXDLIN( 614)							this->gl->depthFunc(this->gl->LEQUAL);
HXDLIN( 614)							{
HXLINE( 614)								if (display->backgroundEnabled) {
HXLINE( 614)									if ((true != this->colorState)) {
HXLINE( 614)										this->colorState = true;
HXDLIN( 614)										this->gl->colorMask(true,true,true,true);
            									}
HXDLIN( 614)									{
HXLINE( 614)										bool enabled = display->backgroundAlpha;
HXDLIN( 614)										bool _hx_tmp;
HXDLIN( 614)										if (enabled) {
HXLINE( 614)											_hx_tmp = !(this->glStateAlpha);
            										}
            										else {
HXLINE( 614)											_hx_tmp = false;
            										}
HXDLIN( 614)										if (_hx_tmp) {
HXLINE( 614)											this->glStateAlpha = true;
HXDLIN( 614)											this->gl->enable(this->gl->BLEND);
            										}
            										else {
HXLINE( 614)											bool _hx_tmp1;
HXDLIN( 614)											if (!(enabled)) {
HXLINE( 614)												_hx_tmp1 = this->glStateAlpha;
            											}
            											else {
HXLINE( 614)												_hx_tmp1 = false;
            											}
HXDLIN( 614)											if (_hx_tmp1) {
HXLINE( 614)												this->glStateAlpha = false;
HXDLIN( 614)												this->gl->disable(this->gl->BLEND);
            											}
            										}
            									}
HXDLIN( 614)									if ((0 != this->maskState)) {
HXLINE( 614)										{
HXLINE( 614)											this->gl->disable(this->gl->STENCIL_TEST);
HXDLIN( 614)											this->maskState = 0;
            										}
HXDLIN( 614)										this->maskState = 0;
            									}
HXDLIN( 614)									this->background->render(display->red,display->green,display->blue,display->alpha);
            								}
HXDLIN( 614)								{
HXLINE( 614)									display->programListItem = display->programList->first;
HXDLIN( 614)									while(::hx::IsNotNull( display->programListItem )){
HXLINE( 614)										{
HXLINE( 614)											 ::peote::view::Program _this = display->programListItem->value;
HXDLIN( 614)											_this->gl->useProgram(_this->glProgram);
HXDLIN( 614)											{
HXLINE( 614)												_this->textureListItem = _this->textureList->first;
HXDLIN( 614)												while(::hx::IsNotNull( _this->textureListItem )){
HXLINE( 614)													if (this->isTextureStateChange(_this->textureListItem->value->unit,_this->textureListItem->value->texture)) {
HXLINE( 614)														_this->gl->activeTexture((_this->gl->TEXTURE0 + _this->textureListItem->value->unit));
HXDLIN( 614)														_this->gl->bindTexture(_this->gl->TEXTURE_2D,_this->textureListItem->value->texture->glTexture);
            													}
HXDLIN( 614)													_this->gl->uniform1i(_this->textureListItem->value->uniformLoc,_this->textureListItem->value->unit);
HXDLIN( 614)													_this->textureListItem = _this->textureListItem->next;
            												}
            											}
HXDLIN( 614)											{
HXLINE( 614)												_this->gl->uniform2f(_this->uRESOLUTION,( (Float)(display->width) ),( (Float)(-(display->height)) ));
HXDLIN( 614)												_this->gl->uniform2f(_this->uZOOM,display->xz,display->yz);
HXDLIN( 614)												_this->gl->uniform2f(_this->uOFFSET,((display->xOffset + this->xOffset) / display->xz),(((display->yOffset + this->yOffset) - ( (Float)(display->height) )) / display->yz));
            											}
HXDLIN( 614)											 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this1 = _this->gl;
HXDLIN( 614)											int _this2 = _this->uTIME;
HXDLIN( 614)											Float _hx_tmp2;
HXDLIN( 614)											if (this->isRun) {
HXLINE( 614)												int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 614)												Float _hx_tmp3;
HXDLIN( 614)												if ((timer > 0)) {
HXLINE( 614)													_hx_tmp3 = (( (Float)(timer) ) / ( (Float)(1000) ));
            												}
            												else {
HXLINE( 614)													_hx_tmp3 = ( (Float)(0) );
            												}
HXDLIN( 614)												_hx_tmp2 = (_hx_tmp3 - this->startTime);
            											}
            											else {
HXLINE( 614)												_hx_tmp2 = this->stopTime;
            											}
HXDLIN( 614)											_this1->uniform1f(_this2,(_hx_tmp2 * this->speed));
HXDLIN( 614)											{
HXLINE( 614)												int _g = 0;
HXDLIN( 614)												int _g1 = _this->uniformFloats->length;
HXDLIN( 614)												while((_g < _g1)){
HXLINE( 614)													_g = (_g + 1);
HXDLIN( 614)													int i = (_g - 1);
HXDLIN( 614)													_this->gl->uniform1f(_this->uniformFloatLocations->__get(i),_this->uniformFloats->__get(i).StaticCast<  ::peote::view::UniformFloat >()->value);
            												}
            											}
HXDLIN( 614)											{
HXLINE( 614)												bool enabled1 = _this->colorEnabled;
HXDLIN( 614)												if ((enabled1 != this->colorState)) {
HXLINE( 614)													this->colorState = enabled1;
HXDLIN( 614)													this->gl->colorMask(enabled1,enabled1,enabled1,enabled1);
            												}
            											}
HXDLIN( 614)											{
HXLINE( 614)												bool enabled2 = _this->zIndexEnabled;
HXDLIN( 614)												bool _hx_tmp4;
HXDLIN( 614)												if (enabled2) {
HXLINE( 614)													_hx_tmp4 = !(this->glStateDepth);
            												}
            												else {
HXLINE( 614)													_hx_tmp4 = false;
            												}
HXDLIN( 614)												if (_hx_tmp4) {
HXLINE( 614)													this->glStateDepth = true;
HXDLIN( 614)													this->gl->enable(this->gl->DEPTH_TEST);
            												}
            												else {
HXLINE( 614)													bool _hx_tmp5;
HXDLIN( 614)													if (!(enabled2)) {
HXLINE( 614)														_hx_tmp5 = this->glStateDepth;
            													}
            													else {
HXLINE( 614)														_hx_tmp5 = false;
            													}
HXDLIN( 614)													if (_hx_tmp5) {
HXLINE( 614)														this->glStateDepth = false;
HXDLIN( 614)														this->gl->disable(this->gl->DEPTH_TEST);
            													}
            												}
            											}
HXDLIN( 614)											{
HXLINE( 614)												bool enabled3 = _this->alphaEnabled;
HXDLIN( 614)												bool _hx_tmp6;
HXDLIN( 614)												if (enabled3) {
HXLINE( 614)													_hx_tmp6 = !(this->glStateAlpha);
            												}
            												else {
HXLINE( 614)													_hx_tmp6 = false;
            												}
HXDLIN( 614)												if (_hx_tmp6) {
HXLINE( 614)													this->glStateAlpha = true;
HXDLIN( 614)													this->gl->enable(this->gl->BLEND);
            												}
            												else {
HXLINE( 614)													bool _hx_tmp7;
HXDLIN( 614)													if (!(enabled3)) {
HXLINE( 614)														_hx_tmp7 = this->glStateAlpha;
            													}
            													else {
HXLINE( 614)														_hx_tmp7 = false;
            													}
HXDLIN( 614)													if (_hx_tmp7) {
HXLINE( 614)														this->glStateAlpha = false;
HXDLIN( 614)														this->gl->disable(this->gl->BLEND);
            													}
            												}
            											}
HXDLIN( 614)											{
HXLINE( 614)												int mask = _this->mask;
HXDLIN( 614)												bool clearMask = _this->clearMask;
HXDLIN( 614)												if ((mask != this->maskState)) {
HXLINE( 614)													if ((mask == 0)) {
HXLINE( 614)														this->gl->disable(this->gl->STENCIL_TEST);
HXDLIN( 614)														this->maskState = mask;
            													}
            													else {
HXLINE( 614)														if ((mask == 2)) {
HXLINE( 614)															if (clearMask) {
HXLINE( 614)																this->gl->clear(this->gl->STENCIL_BUFFER_BIT);
            															}
HXDLIN( 614)															if ((this->maskState == 0)) {
HXLINE( 614)																this->gl->enable(this->gl->STENCIL_TEST);
            															}
HXDLIN( 614)															this->gl->stencilFunc(this->gl->ALWAYS,1,255);
HXDLIN( 614)															this->gl->stencilOp(this->gl->REPLACE,this->gl->REPLACE,this->gl->REPLACE);
HXDLIN( 614)															this->maskState = mask;
            														}
            														else {
HXLINE( 614)															if ((this->maskState == 0)) {
HXLINE( 614)																this->gl->enable(this->gl->STENCIL_TEST);
            															}
HXDLIN( 614)															this->gl->stencilOp(this->gl->KEEP,this->gl->KEEP,this->gl->KEEP);
HXDLIN( 614)															this->gl->stencilFunc(this->gl->EQUAL,1,255);
            														}
            													}
HXDLIN( 614)													this->maskState = mask;
            												}
            											}
HXDLIN( 614)											::peote::view::BufferInterface_obj::render(_this->buffer,::hx::ObjectPtr<OBJ_>(this),display,_this);
HXDLIN( 614)											_this->gl->useProgram(null());
            										}
HXDLIN( 614)										display->programListItem = display->programListItem->next;
            									}
            								}
            							}
HXDLIN( 614)							this->gl->bindFramebuffer(this->gl->FRAMEBUFFER,null());
HXDLIN( 614)							if (display->fbTexture->createMipmaps) {
HXLINE( 614)								this->gl->bindTexture(this->gl->TEXTURE_2D,display->fbTexture->glTexture);
HXDLIN( 614)								this->gl->generateMipmap(this->gl->TEXTURE_2D);
HXDLIN( 614)								this->gl->bindTexture(this->gl->TEXTURE_2D,null());
HXDLIN( 614)								display->fbTexture->updated = true;
            							}
            						}
HXDLIN( 614)						this->displayListItem->value->renderFramebufferFrame = 0;
            					}
            					else {
HXLINE( 614)						this->displayListItem->value->renderFramebufferFrame++;
            					}
            				}
HXDLIN( 614)				this->displayListItem = this->displayListItem->next;
            			}
            		}
HXLINE( 615)		{
HXLINE( 615)			int w = this->width;
HXDLIN( 615)			int h = this->height;
HXDLIN( 615)			this->gl->viewport(0,0,w,h);
HXDLIN( 615)			this->gl->scissor(0,0,w,h);
HXDLIN( 615)			this->gl->enable(this->gl->SCISSOR_TEST);
HXDLIN( 615)			this->gl->clearColor(this->red,this->green,this->blue,this->alpha);
HXDLIN( 615)			this->gl->clear(((this->gl->COLOR_BUFFER_BIT | this->gl->DEPTH_BUFFER_BIT) | this->gl->STENCIL_BUFFER_BIT));
HXDLIN( 615)			this->gl->stencilMask(255);
HXDLIN( 615)			this->gl->blendFunc(this->gl->SRC_ALPHA,this->gl->ONE_MINUS_SRC_ALPHA);
HXDLIN( 615)			this->gl->depthFunc(this->gl->LEQUAL);
            		}
HXLINE( 616)		{
HXLINE( 616)			this->displayListItem = this->displayList->first;
HXDLIN( 616)			while(::hx::IsNotNull( this->displayListItem )){
HXLINE( 616)				{
HXLINE( 616)					 ::peote::view::Display _this3 = this->displayListItem->value;
HXDLIN( 616)					if (_this3->isVisible) {
HXLINE( 616)						{
HXLINE( 616)							 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->gl;
HXDLIN( 616)							int w1 = this->width;
HXDLIN( 616)							int h1 = this->height;
HXDLIN( 616)							Float xz = this->xz;
HXDLIN( 616)							Float yz = this->yz;
HXDLIN( 616)							int sx = ::Math_obj::floor(((_this3->x + this->xOffset) * xz));
HXDLIN( 616)							int sy = ::Math_obj::floor(((_this3->y + this->yOffset) * yz));
HXDLIN( 616)							int sw = ::Math_obj::floor((( (Float)(_this3->width) ) * xz));
HXDLIN( 616)							int sh = ::Math_obj::floor((( (Float)(_this3->height) ) * yz));
HXDLIN( 616)							if ((sx < 0)) {
HXLINE( 616)								sw = (sw + sx);
            							}
HXDLIN( 616)							sx = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(w1) ),( (Float)(sx) ))));
HXDLIN( 616)							sw = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)((w1 - sx)) ),( (Float)(sw) ))));
HXDLIN( 616)							if ((sy < 0)) {
HXLINE( 616)								sh = (sh + sy);
            							}
HXDLIN( 616)							sy = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(h1) ),( (Float)(sy) ))));
HXDLIN( 616)							sh = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)((h1 - sy)) ),( (Float)(sh) ))));
HXDLIN( 616)							gl->scissor(sx,((h1 - sh) - sy),sw,sh);
            						}
HXDLIN( 616)						if (_this3->backgroundEnabled) {
HXLINE( 616)							if ((true != this->colorState)) {
HXLINE( 616)								this->colorState = true;
HXDLIN( 616)								this->gl->colorMask(true,true,true,true);
            							}
HXDLIN( 616)							{
HXLINE( 616)								bool enabled4 = _this3->backgroundDepth;
HXDLIN( 616)								bool _hx_tmp8;
HXDLIN( 616)								if (enabled4) {
HXLINE( 616)									_hx_tmp8 = !(this->glStateDepth);
            								}
            								else {
HXLINE( 616)									_hx_tmp8 = false;
            								}
HXDLIN( 616)								if (_hx_tmp8) {
HXLINE( 616)									this->glStateDepth = true;
HXDLIN( 616)									this->gl->enable(this->gl->DEPTH_TEST);
            								}
            								else {
HXLINE( 616)									bool _hx_tmp9;
HXDLIN( 616)									if (!(enabled4)) {
HXLINE( 616)										_hx_tmp9 = this->glStateDepth;
            									}
            									else {
HXLINE( 616)										_hx_tmp9 = false;
            									}
HXDLIN( 616)									if (_hx_tmp9) {
HXLINE( 616)										this->glStateDepth = false;
HXDLIN( 616)										this->gl->disable(this->gl->DEPTH_TEST);
            									}
            								}
            							}
HXDLIN( 616)							{
HXLINE( 616)								bool enabled5 = _this3->backgroundAlpha;
HXDLIN( 616)								bool _hx_tmp10;
HXDLIN( 616)								if (enabled5) {
HXLINE( 616)									_hx_tmp10 = !(this->glStateAlpha);
            								}
            								else {
HXLINE( 616)									_hx_tmp10 = false;
            								}
HXDLIN( 616)								if (_hx_tmp10) {
HXLINE( 616)									this->glStateAlpha = true;
HXDLIN( 616)									this->gl->enable(this->gl->BLEND);
            								}
            								else {
HXLINE( 616)									bool _hx_tmp11;
HXDLIN( 616)									if (!(enabled5)) {
HXLINE( 616)										_hx_tmp11 = this->glStateAlpha;
            									}
            									else {
HXLINE( 616)										_hx_tmp11 = false;
            									}
HXDLIN( 616)									if (_hx_tmp11) {
HXLINE( 616)										this->glStateAlpha = false;
HXDLIN( 616)										this->gl->disable(this->gl->BLEND);
            									}
            								}
            							}
HXDLIN( 616)							if ((0 != this->maskState)) {
HXLINE( 616)								{
HXLINE( 616)									this->gl->disable(this->gl->STENCIL_TEST);
HXDLIN( 616)									this->maskState = 0;
            								}
HXDLIN( 616)								this->maskState = 0;
            							}
HXDLIN( 616)							this->background->render(_this3->red,_this3->green,_this3->blue,_this3->alpha);
            						}
HXDLIN( 616)						{
HXLINE( 616)							_this3->programListItem = _this3->programList->first;
HXDLIN( 616)							while(::hx::IsNotNull( _this3->programListItem )){
HXLINE( 616)								{
HXLINE( 616)									 ::peote::view::Program _this4 = _this3->programListItem->value;
HXDLIN( 616)									if (_this4->isVisible) {
HXLINE( 616)										_this4->gl->useProgram(_this4->glProgram);
HXDLIN( 616)										{
HXLINE( 616)											_this4->textureListItem = _this4->textureList->first;
HXDLIN( 616)											while(::hx::IsNotNull( _this4->textureListItem )){
HXLINE( 616)												if (this->isTextureStateChange(_this4->textureListItem->value->unit,_this4->textureListItem->value->texture)) {
HXLINE( 616)													_this4->gl->activeTexture((_this4->gl->TEXTURE0 + _this4->textureListItem->value->unit));
HXDLIN( 616)													_this4->gl->bindTexture(_this4->gl->TEXTURE_2D,_this4->textureListItem->value->texture->glTexture);
            												}
HXDLIN( 616)												_this4->gl->uniform1i(_this4->textureListItem->value->uniformLoc,_this4->textureListItem->value->unit);
HXDLIN( 616)												_this4->textureListItem = _this4->textureListItem->next;
            											}
            										}
HXDLIN( 616)										{
HXLINE( 616)											_this4->gl->uniform2f(_this4->uRESOLUTION,( (Float)(this->width) ),( (Float)(this->height) ));
HXDLIN( 616)											_this4->gl->uniform2f(_this4->uZOOM,(this->xz * _this3->xz),(this->yz * _this3->yz));
HXDLIN( 616)											_this4->gl->uniform2f(_this4->uOFFSET,(((_this3->x + _this3->xOffset) + this->xOffset) / _this3->xz),(((_this3->y + _this3->yOffset) + this->yOffset) / _this3->yz));
            										}
HXDLIN( 616)										 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this5 = _this4->gl;
HXDLIN( 616)										int _this6 = _this4->uTIME;
HXDLIN( 616)										Float _hx_tmp12;
HXDLIN( 616)										if (this->isRun) {
HXLINE( 616)											int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 616)											Float _hx_tmp13;
HXDLIN( 616)											if ((timer1 > 0)) {
HXLINE( 616)												_hx_tmp13 = (( (Float)(timer1) ) / ( (Float)(1000) ));
            											}
            											else {
HXLINE( 616)												_hx_tmp13 = ( (Float)(0) );
            											}
HXDLIN( 616)											_hx_tmp12 = (_hx_tmp13 - this->startTime);
            										}
            										else {
HXLINE( 616)											_hx_tmp12 = this->stopTime;
            										}
HXDLIN( 616)										_this5->uniform1f(_this6,(_hx_tmp12 * this->speed));
HXDLIN( 616)										{
HXLINE( 616)											int _g2 = 0;
HXDLIN( 616)											int _g3 = _this4->uniformFloats->length;
HXDLIN( 616)											while((_g2 < _g3)){
HXLINE( 616)												_g2 = (_g2 + 1);
HXDLIN( 616)												int i1 = (_g2 - 1);
HXDLIN( 616)												_this4->gl->uniform1f(_this4->uniformFloatLocations->__get(i1),_this4->uniformFloats->__get(i1).StaticCast<  ::peote::view::UniformFloat >()->value);
            											}
            										}
HXDLIN( 616)										{
HXLINE( 616)											bool enabled6 = _this4->colorEnabled;
HXDLIN( 616)											if ((enabled6 != this->colorState)) {
HXLINE( 616)												this->colorState = enabled6;
HXDLIN( 616)												this->gl->colorMask(enabled6,enabled6,enabled6,enabled6);
            											}
            										}
HXDLIN( 616)										{
HXLINE( 616)											bool enabled7 = _this4->zIndexEnabled;
HXDLIN( 616)											bool _hx_tmp14;
HXDLIN( 616)											if (enabled7) {
HXLINE( 616)												_hx_tmp14 = !(this->glStateDepth);
            											}
            											else {
HXLINE( 616)												_hx_tmp14 = false;
            											}
HXDLIN( 616)											if (_hx_tmp14) {
HXLINE( 616)												this->glStateDepth = true;
HXDLIN( 616)												this->gl->enable(this->gl->DEPTH_TEST);
            											}
            											else {
HXLINE( 616)												bool _hx_tmp15;
HXDLIN( 616)												if (!(enabled7)) {
HXLINE( 616)													_hx_tmp15 = this->glStateDepth;
            												}
            												else {
HXLINE( 616)													_hx_tmp15 = false;
            												}
HXDLIN( 616)												if (_hx_tmp15) {
HXLINE( 616)													this->glStateDepth = false;
HXDLIN( 616)													this->gl->disable(this->gl->DEPTH_TEST);
            												}
            											}
            										}
HXDLIN( 616)										{
HXLINE( 616)											bool enabled8 = _this4->alphaEnabled;
HXDLIN( 616)											bool _hx_tmp16;
HXDLIN( 616)											if (enabled8) {
HXLINE( 616)												_hx_tmp16 = !(this->glStateAlpha);
            											}
            											else {
HXLINE( 616)												_hx_tmp16 = false;
            											}
HXDLIN( 616)											if (_hx_tmp16) {
HXLINE( 616)												this->glStateAlpha = true;
HXDLIN( 616)												this->gl->enable(this->gl->BLEND);
            											}
            											else {
HXLINE( 616)												bool _hx_tmp17;
HXDLIN( 616)												if (!(enabled8)) {
HXLINE( 616)													_hx_tmp17 = this->glStateAlpha;
            												}
            												else {
HXLINE( 616)													_hx_tmp17 = false;
            												}
HXDLIN( 616)												if (_hx_tmp17) {
HXLINE( 616)													this->glStateAlpha = false;
HXDLIN( 616)													this->gl->disable(this->gl->BLEND);
            												}
            											}
            										}
HXDLIN( 616)										{
HXLINE( 616)											int mask1 = _this4->mask;
HXDLIN( 616)											bool clearMask1 = _this4->clearMask;
HXDLIN( 616)											if ((mask1 != this->maskState)) {
HXLINE( 616)												if ((mask1 == 0)) {
HXLINE( 616)													this->gl->disable(this->gl->STENCIL_TEST);
HXDLIN( 616)													this->maskState = mask1;
            												}
            												else {
HXLINE( 616)													if ((mask1 == 2)) {
HXLINE( 616)														if (clearMask1) {
HXLINE( 616)															this->gl->clear(this->gl->STENCIL_BUFFER_BIT);
            														}
HXDLIN( 616)														if ((this->maskState == 0)) {
HXLINE( 616)															this->gl->enable(this->gl->STENCIL_TEST);
            														}
HXDLIN( 616)														this->gl->stencilFunc(this->gl->ALWAYS,1,255);
HXDLIN( 616)														this->gl->stencilOp(this->gl->REPLACE,this->gl->REPLACE,this->gl->REPLACE);
HXDLIN( 616)														this->maskState = mask1;
            													}
            													else {
HXLINE( 616)														if ((this->maskState == 0)) {
HXLINE( 616)															this->gl->enable(this->gl->STENCIL_TEST);
            														}
HXDLIN( 616)														this->gl->stencilOp(this->gl->KEEP,this->gl->KEEP,this->gl->KEEP);
HXDLIN( 616)														this->gl->stencilFunc(this->gl->EQUAL,1,255);
            													}
            												}
HXDLIN( 616)												this->maskState = mask1;
            											}
            										}
HXDLIN( 616)										::peote::view::BufferInterface_obj::render(_this4->buffer,::hx::ObjectPtr<OBJ_>(this),_this3,_this4);
HXDLIN( 616)										_this4->gl->useProgram(null());
            									}
            								}
HXDLIN( 616)								_this3->programListItem = _this3->programListItem->next;
            							}
            						}
            					}
            				}
HXDLIN( 616)				this->displayListItem = this->displayListItem->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PeoteView_obj,render,(void))


::hx::ObjectPtr< PeoteView_obj > PeoteView_obj::__new( ::lime::ui::Window window,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_registerEvents) {
	::hx::ObjectPtr< PeoteView_obj > __this = new PeoteView_obj();
	__this->__construct(window,__o_color,__o_registerEvents);
	return __this;
}

::hx::ObjectPtr< PeoteView_obj > PeoteView_obj::__alloc(::hx::Ctx *_hx_ctx, ::lime::ui::Window window,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_registerEvents) {
	PeoteView_obj *__this = (PeoteView_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PeoteView_obj), true, "peote.view.PeoteView"));
	*(void **)__this = PeoteView_obj::_hx_vtable;
	__this->__construct(window,__o_color,__o_registerEvents);
	return __this;
}

PeoteView_obj::PeoteView_obj()
{
}

void PeoteView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PeoteView);
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(red,"red");
	HX_MARK_MEMBER_NAME(green,"green");
	HX_MARK_MEMBER_NAME(blue,"blue");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(colorState,"colorState");
	HX_MARK_MEMBER_NAME(glStateAlpha,"glStateAlpha");
	HX_MARK_MEMBER_NAME(glStateDepth,"glStateDepth");
	HX_MARK_MEMBER_NAME(maskState,"maskState");
	HX_MARK_MEMBER_NAME(maxTextureImageUnits,"maxTextureImageUnits");
	HX_MARK_MEMBER_NAME(glStateTexture,"glStateTexture");
	HX_MARK_MEMBER_NAME(xz,"xz");
	HX_MARK_MEMBER_NAME(yz,"yz");
	HX_MARK_MEMBER_NAME(xOffset,"xOffset");
	HX_MARK_MEMBER_NAME(yOffset,"yOffset");
	HX_MARK_MEMBER_NAME(displayList,"displayList");
	HX_MARK_MEMBER_NAME(framebufferDisplayList,"framebufferDisplayList");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(isRun,"isRun");
	HX_MARK_MEMBER_NAME(startTime,"startTime");
	HX_MARK_MEMBER_NAME(stopTime,"stopTime");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(onResize,"onResize");
	HX_MARK_MEMBER_NAME(pickFB,"pickFB");
	HX_MARK_MEMBER_NAME(pickTexture,"pickTexture");
	HX_MARK_MEMBER_NAME(pickDepthBuffer,"pickDepthBuffer");
	HX_MARK_MEMBER_NAME(pickUInt8,"pickUInt8");
	HX_MARK_MEMBER_NAME(displayListItem,"displayListItem");
	HX_MARK_END_CLASS();
}

void PeoteView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(red,"red");
	HX_VISIT_MEMBER_NAME(green,"green");
	HX_VISIT_MEMBER_NAME(blue,"blue");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(colorState,"colorState");
	HX_VISIT_MEMBER_NAME(glStateAlpha,"glStateAlpha");
	HX_VISIT_MEMBER_NAME(glStateDepth,"glStateDepth");
	HX_VISIT_MEMBER_NAME(maskState,"maskState");
	HX_VISIT_MEMBER_NAME(maxTextureImageUnits,"maxTextureImageUnits");
	HX_VISIT_MEMBER_NAME(glStateTexture,"glStateTexture");
	HX_VISIT_MEMBER_NAME(xz,"xz");
	HX_VISIT_MEMBER_NAME(yz,"yz");
	HX_VISIT_MEMBER_NAME(xOffset,"xOffset");
	HX_VISIT_MEMBER_NAME(yOffset,"yOffset");
	HX_VISIT_MEMBER_NAME(displayList,"displayList");
	HX_VISIT_MEMBER_NAME(framebufferDisplayList,"framebufferDisplayList");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(isRun,"isRun");
	HX_VISIT_MEMBER_NAME(startTime,"startTime");
	HX_VISIT_MEMBER_NAME(stopTime,"stopTime");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(onResize,"onResize");
	HX_VISIT_MEMBER_NAME(pickFB,"pickFB");
	HX_VISIT_MEMBER_NAME(pickTexture,"pickTexture");
	HX_VISIT_MEMBER_NAME(pickDepthBuffer,"pickDepthBuffer");
	HX_VISIT_MEMBER_NAME(pickUInt8,"pickUInt8");
	HX_VISIT_MEMBER_NAME(displayListItem,"displayListItem");
}

::hx::Val PeoteView_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return ::hx::Val( gl ); }
		if (HX_FIELD_EQ(inName,"xz") ) { return ::hx::Val( xz ); }
		if (HX_FIELD_EQ(inName,"yz") ) { return ::hx::Val( yz ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"red") ) { return ::hx::Val( red ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"blue") ) { return ::hx::Val( blue ); }
		if (HX_FIELD_EQ(inName,"pick") ) { return ::hx::Val( pick_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"green") ) { return ::hx::Val( green ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return ::hx::Val( alpha ); }
		if (HX_FIELD_EQ(inName,"isRun") ) { return ::hx::Val( isRun ); }
		if (HX_FIELD_EQ(inName,"speed") ) { return ::hx::Val( speed ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return ::hx::Val( window ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"pickFB") ) { return ::hx::Val( pickFB ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xOffset") ) { return ::hx::Val( xOffset ); }
		if (HX_FIELD_EQ(inName,"yOffset") ) { return ::hx::Val( yOffset ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stopTime") ) { return ::hx::Val( stopTime ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return ::hx::Val( onResize ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"maskState") ) { return ::hx::Val( maskState ); }
		if (HX_FIELD_EQ(inName,"startTime") ) { return ::hx::Val( startTime ); }
		if (HX_FIELD_EQ(inName,"pickUInt8") ) { return ::hx::Val( pickUInt8 ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"colorState") ) { return ::hx::Val( colorState ); }
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"addDisplay") ) { return ::hx::Val( addDisplay_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"displayList") ) { return ::hx::Val( displayList ); }
		if (HX_FIELD_EQ(inName,"pickTexture") ) { return ::hx::Val( pickTexture ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"glStateAlpha") ) { return ::hx::Val( glStateAlpha ); }
		if (HX_FIELD_EQ(inName,"glStateDepth") ) { return ::hx::Val( glStateDepth ); }
		if (HX_FIELD_EQ(inName,"getElementAt") ) { return ::hx::Val( getElementAt_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"glStateTexture") ) { return ::hx::Val( glStateTexture ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"pickDepthBuffer") ) { return ::hx::Val( pickDepthBuffer ); }
		if (HX_FIELD_EQ(inName,"displayListItem") ) { return ::hx::Val( displayListItem ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"maxTextureImageUnits") ) { return ::hx::Val( maxTextureImageUnits ); }
		if (HX_FIELD_EQ(inName,"isTextureStateChange") ) { return ::hx::Val( isTextureStateChange_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"framebufferDisplayList") ) { return ::hx::Val( framebufferDisplayList ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PeoteView_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xz") ) { xz=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yz") ) { yz=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"red") ) { red=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"blue") ) { blue=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"green") ) { green=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isRun") ) { isRun=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast<  ::lime::ui::Window >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pickFB") ) { pickFB=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xOffset") ) { xOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yOffset") ) { yOffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stopTime") ) { stopTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onResize") ) { onResize=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"maskState") ) { maskState=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pickUInt8") ) { pickUInt8=inValue.Cast<  ::haxe::io::ArrayBufferViewImpl >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"colorState") ) { colorState=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::peote::view::utils::Background >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"displayList") ) { displayList=inValue.Cast<  ::peote::view::utils::RenderList_peote_view_Display >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pickTexture") ) { pickTexture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"glStateAlpha") ) { glStateAlpha=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glStateDepth") ) { glStateDepth=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"glStateTexture") ) { glStateTexture=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"pickDepthBuffer") ) { pickDepthBuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"displayListItem") ) { displayListItem=inValue.Cast<  ::peote::view::utils::RenderListItem_peote_view_Display >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"maxTextureImageUnits") ) { maxTextureImageUnits=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"framebufferDisplayList") ) { framebufferDisplayList=inValue.Cast<  ::peote::view::utils::RenderList_peote_view_Display >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PeoteView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("window",f0,93,8c,52));
	outFields->push(HX_("gl",25,5a,00,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("red",51,d9,56,00));
	outFields->push(HX_("green",c3,0e,ed,99));
	outFields->push(HX_("blue",9a,42,19,41));
	outFields->push(HX_("alpha",5e,a7,96,21));
	outFields->push(HX_("colorState",ae,8d,77,a8));
	outFields->push(HX_("glStateAlpha",12,62,09,5a));
	outFields->push(HX_("glStateDepth",b7,ab,9c,0f));
	outFields->push(HX_("maskState",85,cd,73,0a));
	outFields->push(HX_("maxTextureImageUnits",8b,39,83,65));
	outFields->push(HX_("glStateTexture",8f,98,7e,e5));
	outFields->push(HX_("xz",02,69,00,00));
	outFields->push(HX_("yz",e1,69,00,00));
	outFields->push(HX_("xOffset",2b,b6,e3,12));
	outFields->push(HX_("yOffset",ec,2c,79,3c));
	outFields->push(HX_("displayList",c0,bb,a5,2f));
	outFields->push(HX_("framebufferDisplayList",d3,3b,59,81));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("isRun",81,11,55,c1));
	outFields->push(HX_("startTime",8f,45,f0,05));
	outFields->push(HX_("stopTime",2f,11,b7,9f));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("pickFB",5d,e0,cc,7e));
	outFields->push(HX_("pickTexture",fa,55,7d,27));
	outFields->push(HX_("pickDepthBuffer",02,4f,71,b2));
	outFields->push(HX_("pickUInt8",dd,06,ef,bd));
	outFields->push(HX_("displayListItem",f3,8c,27,12));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PeoteView_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::lime::ui::Window */ ,(int)offsetof(PeoteView_obj,window),HX_("window",f0,93,8c,52)},
	{::hx::fsObject /*  ::lime::_internal::backend::native::NativeOpenGLRenderContext */ ,(int)offsetof(PeoteView_obj,gl),HX_("gl",25,5a,00,00)},
	{::hx::fsInt,(int)offsetof(PeoteView_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(PeoteView_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsFloat,(int)offsetof(PeoteView_obj,red),HX_("red",51,d9,56,00)},
	{::hx::fsFloat,(int)offsetof(PeoteView_obj,green),HX_("green",c3,0e,ed,99)},
	{::hx::fsFloat,(int)offsetof(PeoteView_obj,blue),HX_("blue",9a,42,19,41)},
	{::hx::fsFloat,(int)offsetof(PeoteView_obj,alpha),HX_("alpha",5e,a7,96,21)},
	{::hx::fsBool,(int)offsetof(PeoteView_obj,colorState),HX_("colorState",ae,8d,77,a8)},
	{::hx::fsBool,(int)offsetof(PeoteView_obj,glStateAlpha),HX_("glStateAlpha",12,62,09,5a)},
	{::hx::fsBool,(int)offsetof(PeoteView_obj,glStateDepth),HX_("glStateDepth",b7,ab,9c,0f)},
	{::hx::fsInt,(int)offsetof(PeoteView_obj,maskState),HX_("maskState",85,cd,73,0a)},
	{::hx::fsInt,(int)offsetof(PeoteView_obj,maxTextureImageUnits),HX_("maxTextureImageUnits",8b,39,83,65)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PeoteView_obj,glStateTexture),HX_("glStateTexture",8f,98,7e,e5)},
	{::hx::fsFloat,(int)offsetof(PeoteView_obj,xz),HX_("xz",02,69,00,00)},
	{::hx::fsFloat,(int)offsetof(PeoteView_obj,yz),HX_("yz",e1,69,00,00)},
	{::hx::fsFloat,(int)offsetof(PeoteView_obj,xOffset),HX_("xOffset",2b,b6,e3,12)},
	{::hx::fsFloat,(int)offsetof(PeoteView_obj,yOffset),HX_("yOffset",ec,2c,79,3c)},
	{::hx::fsObject /*  ::peote::view::utils::RenderList_peote_view_Display */ ,(int)offsetof(PeoteView_obj,displayList),HX_("displayList",c0,bb,a5,2f)},
	{::hx::fsObject /*  ::peote::view::utils::RenderList_peote_view_Display */ ,(int)offsetof(PeoteView_obj,framebufferDisplayList),HX_("framebufferDisplayList",d3,3b,59,81)},
	{::hx::fsObject /*  ::peote::view::utils::Background */ ,(int)offsetof(PeoteView_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsBool,(int)offsetof(PeoteView_obj,isRun),HX_("isRun",81,11,55,c1)},
	{::hx::fsFloat,(int)offsetof(PeoteView_obj,startTime),HX_("startTime",8f,45,f0,05)},
	{::hx::fsFloat,(int)offsetof(PeoteView_obj,stopTime),HX_("stopTime",2f,11,b7,9f)},
	{::hx::fsFloat,(int)offsetof(PeoteView_obj,speed),HX_("speed",87,97,69,81)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PeoteView_obj,onResize),HX_("onResize",73,50,28,e8)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(PeoteView_obj,pickFB),HX_("pickFB",5d,e0,cc,7e)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(PeoteView_obj,pickTexture),HX_("pickTexture",fa,55,7d,27)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(PeoteView_obj,pickDepthBuffer),HX_("pickDepthBuffer",02,4f,71,b2)},
	{::hx::fsObject /*  ::haxe::io::ArrayBufferViewImpl */ ,(int)offsetof(PeoteView_obj,pickUInt8),HX_("pickUInt8",dd,06,ef,bd)},
	{::hx::fsObject /*  ::peote::view::utils::RenderListItem_peote_view_Display */ ,(int)offsetof(PeoteView_obj,displayListItem),HX_("displayListItem",f3,8c,27,12)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PeoteView_obj_sStaticStorageInfo = 0;
#endif

static ::String PeoteView_obj_sMemberFields[] = {
	HX_("window",f0,93,8c,52),
	HX_("gl",25,5a,00,00),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("red",51,d9,56,00),
	HX_("green",c3,0e,ed,99),
	HX_("blue",9a,42,19,41),
	HX_("alpha",5e,a7,96,21),
	HX_("colorState",ae,8d,77,a8),
	HX_("glStateAlpha",12,62,09,5a),
	HX_("glStateDepth",b7,ab,9c,0f),
	HX_("maskState",85,cd,73,0a),
	HX_("maxTextureImageUnits",8b,39,83,65),
	HX_("glStateTexture",8f,98,7e,e5),
	HX_("isTextureStateChange",d0,37,5f,e7),
	HX_("xz",02,69,00,00),
	HX_("yz",e1,69,00,00),
	HX_("xOffset",2b,b6,e3,12),
	HX_("yOffset",ec,2c,79,3c),
	HX_("displayList",c0,bb,a5,2f),
	HX_("framebufferDisplayList",d3,3b,59,81),
	HX_("background",ee,93,1d,26),
	HX_("isRun",81,11,55,c1),
	HX_("startTime",8f,45,f0,05),
	HX_("stopTime",2f,11,b7,9f),
	HX_("speed",87,97,69,81),
	HX_("addDisplay",21,56,d4,22),
	HX_("onResize",73,50,28,e8),
	HX_("resize",f4,59,7b,08),
	HX_("pickFB",5d,e0,cc,7e),
	HX_("pickTexture",fa,55,7d,27),
	HX_("pickDepthBuffer",02,4f,71,b2),
	HX_("pickUInt8",dd,06,ef,bd),
	HX_("getElementAt",59,ab,41,d7),
	HX_("pick",e1,e8,57,4a),
	HX_("displayListItem",f3,8c,27,12),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class PeoteView_obj::__mClass;

void PeoteView_obj::__register()
{
	PeoteView_obj _hx_dummy;
	PeoteView_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.view.PeoteView",aa,5d,88,78);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PeoteView_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PeoteView_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PeoteView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PeoteView_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace peote
} // end namespace view
