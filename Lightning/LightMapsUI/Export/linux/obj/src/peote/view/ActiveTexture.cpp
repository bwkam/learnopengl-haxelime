// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_peote_view_ActiveTexture
#include <peote/view/ActiveTexture.h>
#endif
#ifndef INCLUDED_peote_view_Texture
#include <peote/view/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_40a83ac3d924101d_20_new,"peote.view.ActiveTexture","new",0xdc8bb601,"peote.view.ActiveTexture.new","peote/view/Program.hx",20,0x6b0a9d00)
namespace peote{
namespace view{

void ActiveTexture_obj::__construct(int unit, ::peote::view::Texture texture,int uniformLoc){
            	HX_STACKFRAME(&_hx_pos_40a83ac3d924101d_20_new)
HXLINE(  21)		this->unit = unit;
HXLINE(  22)		this->texture = texture;
HXLINE(  23)		this->uniformLoc = uniformLoc;
            	}

Dynamic ActiveTexture_obj::__CreateEmpty() { return new ActiveTexture_obj; }

void *ActiveTexture_obj::_hx_vtable = 0;

Dynamic ActiveTexture_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ActiveTexture_obj > _hx_result = new ActiveTexture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ActiveTexture_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1e8f4bc9;
}


::hx::ObjectPtr< ActiveTexture_obj > ActiveTexture_obj::__new(int unit, ::peote::view::Texture texture,int uniformLoc) {
	::hx::ObjectPtr< ActiveTexture_obj > __this = new ActiveTexture_obj();
	__this->__construct(unit,texture,uniformLoc);
	return __this;
}

::hx::ObjectPtr< ActiveTexture_obj > ActiveTexture_obj::__alloc(::hx::Ctx *_hx_ctx,int unit, ::peote::view::Texture texture,int uniformLoc) {
	ActiveTexture_obj *__this = (ActiveTexture_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ActiveTexture_obj), true, "peote.view.ActiveTexture"));
	*(void **)__this = ActiveTexture_obj::_hx_vtable;
	__this->__construct(unit,texture,uniformLoc);
	return __this;
}

ActiveTexture_obj::ActiveTexture_obj()
{
}

void ActiveTexture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ActiveTexture);
	HX_MARK_MEMBER_NAME(unit,"unit");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(uniformLoc,"uniformLoc");
	HX_MARK_END_CLASS();
}

void ActiveTexture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(unit,"unit");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(uniformLoc,"uniformLoc");
}

::hx::Val ActiveTexture_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"unit") ) { return ::hx::Val( unit ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return ::hx::Val( texture ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uniformLoc") ) { return ::hx::Val( uniformLoc ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ActiveTexture_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"unit") ) { unit=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::peote::view::Texture >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uniformLoc") ) { uniformLoc=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ActiveTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("unit",84,ca,a9,4d));
	outFields->push(HX_("texture",db,c8,e0,9e));
	outFields->push(HX_("uniformLoc",ac,83,93,da));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ActiveTexture_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ActiveTexture_obj,unit),HX_("unit",84,ca,a9,4d)},
	{::hx::fsObject /*  ::peote::view::Texture */ ,(int)offsetof(ActiveTexture_obj,texture),HX_("texture",db,c8,e0,9e)},
	{::hx::fsInt,(int)offsetof(ActiveTexture_obj,uniformLoc),HX_("uniformLoc",ac,83,93,da)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ActiveTexture_obj_sStaticStorageInfo = 0;
#endif

static ::String ActiveTexture_obj_sMemberFields[] = {
	HX_("unit",84,ca,a9,4d),
	HX_("texture",db,c8,e0,9e),
	HX_("uniformLoc",ac,83,93,da),
	::String(null()) };

::hx::Class ActiveTexture_obj::__mClass;

void ActiveTexture_obj::__register()
{
	ActiveTexture_obj _hx_dummy;
	ActiveTexture_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.view.ActiveTexture",8f,a1,1e,fd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ActiveTexture_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ActiveTexture_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ActiveTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ActiveTexture_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace peote
} // end namespace view
