// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_peote_view__TextureData_TextureDataImpl
#include <peote/view/_TextureData/TextureDataImpl.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_474b37bd9416074d_20_new,"peote.view._TextureData.TextureDataImpl","new",0xd460c1d5,"peote.view._TextureData.TextureDataImpl.new","peote/view/TextureData.hx",20,0x2e65787f)
namespace peote{
namespace view{
namespace _TextureData{

void TextureDataImpl_obj::__construct(int width,int height,::hx::Null< int >  __o_type, ::haxe::io::ArrayBufferViewImpl data){
            		int type = __o_type.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_474b37bd9416074d_20_new)
HXLINE(  29)		this->dataUInt8 = null();
HXLINE(  24)		this->height = 0;
HXLINE(  23)		this->width = 0;
HXLINE(  34)		this->width = width;
HXLINE(  35)		this->height = height;
HXLINE(  37)		if (::hx::IsNull( data )) {
HXLINE(  38)			int elements = (width * height);
HXDLIN(  38)			this->dataUInt8 =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(elements),0,elements);
            		}
            		else {
HXLINE(  39)			this->dataUInt8 = data;
            		}
            	}

Dynamic TextureDataImpl_obj::__CreateEmpty() { return new TextureDataImpl_obj; }

void *TextureDataImpl_obj::_hx_vtable = 0;

Dynamic TextureDataImpl_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextureDataImpl_obj > _hx_result = new TextureDataImpl_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool TextureDataImpl_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x69ef6233;
}


::hx::ObjectPtr< TextureDataImpl_obj > TextureDataImpl_obj::__new(int width,int height,::hx::Null< int >  __o_type, ::haxe::io::ArrayBufferViewImpl data) {
	::hx::ObjectPtr< TextureDataImpl_obj > __this = new TextureDataImpl_obj();
	__this->__construct(width,height,__o_type,data);
	return __this;
}

::hx::ObjectPtr< TextureDataImpl_obj > TextureDataImpl_obj::__alloc(::hx::Ctx *_hx_ctx,int width,int height,::hx::Null< int >  __o_type, ::haxe::io::ArrayBufferViewImpl data) {
	TextureDataImpl_obj *__this = (TextureDataImpl_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextureDataImpl_obj), true, "peote.view._TextureData.TextureDataImpl"));
	*(void **)__this = TextureDataImpl_obj::_hx_vtable;
	__this->__construct(width,height,__o_type,data);
	return __this;
}

TextureDataImpl_obj::TextureDataImpl_obj()
{
}

void TextureDataImpl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextureDataImpl);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(dataUInt8,"dataUInt8");
	HX_MARK_END_CLASS();
}

void TextureDataImpl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(dataUInt8,"dataUInt8");
}

::hx::Val TextureDataImpl_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dataUInt8") ) { return ::hx::Val( dataUInt8 ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TextureDataImpl_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dataUInt8") ) { dataUInt8=inValue.Cast<  ::haxe::io::ArrayBufferViewImpl >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextureDataImpl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("dataUInt8",f4,d0,65,d4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextureDataImpl_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(TextureDataImpl_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(TextureDataImpl_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::haxe::io::ArrayBufferViewImpl */ ,(int)offsetof(TextureDataImpl_obj,dataUInt8),HX_("dataUInt8",f4,d0,65,d4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TextureDataImpl_obj_sStaticStorageInfo = 0;
#endif

static ::String TextureDataImpl_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("dataUInt8",f4,d0,65,d4),
	::String(null()) };

::hx::Class TextureDataImpl_obj::__mClass;

void TextureDataImpl_obj::__register()
{
	TextureDataImpl_obj _hx_dummy;
	TextureDataImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.view._TextureData.TextureDataImpl",63,33,64,c3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextureDataImpl_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextureDataImpl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextureDataImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextureDataImpl_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace peote
} // end namespace view
} // end namespace _TextureData
