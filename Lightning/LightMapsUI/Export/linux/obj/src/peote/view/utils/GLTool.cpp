// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_peote_view_utils_GLTool
#include <peote/view/utils/GLTool.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bf925d96d6510923_14_clearGlErrorQueue,"peote.view.utils.GLTool","clearGlErrorQueue",0x3d59446d,"peote.view.utils.GLTool.clearGlErrorQueue","peote/view/utils/GLTool.hx",14,0xbad32a3d)
HX_LOCAL_STACK_FRAME(_hx_pos_bf925d96d6510923_19_getLastGlError,"peote.view.utils.GLTool","getLastGlError",0x0a5f9765,"peote.view.utils.GLTool.getLastGlError","peote/view/utils/GLTool.hx",19,0xbad32a3d)
HX_LOCAL_STACK_FRAME(_hx_pos_bf925d96d6510923_130_boot,"peote.view.utils.GLTool","boot",0x9d4c1360,"peote.view.utils.GLTool.boot","peote/view/utils/GLTool.hx",130,0xbad32a3d)
HX_LOCAL_STACK_FRAME(_hx_pos_bf925d96d6510923_131_boot,"peote.view.utils.GLTool","boot",0x9d4c1360,"peote.view.utils.GLTool.boot","peote/view/utils/GLTool.hx",131,0xbad32a3d)
namespace peote{
namespace view{
namespace utils{

void GLTool_obj::__construct() { }

Dynamic GLTool_obj::__CreateEmpty() { return new GLTool_obj; }

void *GLTool_obj::_hx_vtable = 0;

Dynamic GLTool_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GLTool_obj > _hx_result = new GLTool_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLTool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x58579bde;
}

void GLTool_obj::clearGlErrorQueue( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl){
            	HX_STACKFRAME(&_hx_pos_bf925d96d6510923_14_clearGlErrorQueue)
HXDLIN(  14)		while(true){
HXDLIN(  14)			int _hx_tmp = gl->getError();
HXDLIN(  14)			if (!((_hx_tmp != gl->NO_ERROR))) {
HXDLIN(  14)				goto _hx_goto_0;
            			}
            		}
            		_hx_goto_0:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLTool_obj,clearGlErrorQueue,(void))

int GLTool_obj::getLastGlError( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl){
            	HX_STACKFRAME(&_hx_pos_bf925d96d6510923_19_getLastGlError)
HXLINE(  20)		int err = gl->getError();
HXLINE(  21)		if ((err != gl->NO_ERROR)) {
HXLINE(  22)			if ((err == gl->INVALID_ENUM)) {
HXLINE(  22)				::haxe::Log_obj::trace(HX_("(GL-Error: INVALID_ENUM)",92,29,38,04),::hx::SourceInfo(HX_("peote/view/utils/GLTool.hx",3d,2a,d3,ba),22,HX_("peote.view.utils.GLTool",00,20,8a,f7),HX_("getLastGlError",b7,02,4f,2c)));
            			}
            			else {
HXLINE(  23)				if ((err == gl->INVALID_VALUE)) {
HXLINE(  23)					::haxe::Log_obj::trace(HX_("(GL-Error: INVALID_VALUE)",ee,0c,db,f6),::hx::SourceInfo(HX_("peote/view/utils/GLTool.hx",3d,2a,d3,ba),23,HX_("peote.view.utils.GLTool",00,20,8a,f7),HX_("getLastGlError",b7,02,4f,2c)));
            				}
            				else {
HXLINE(  24)					if ((err == gl->INVALID_OPERATION)) {
HXLINE(  24)						::haxe::Log_obj::trace(HX_("(GL-Error: INVALID_OPERATION)",78,c2,f3,3e),::hx::SourceInfo(HX_("peote/view/utils/GLTool.hx",3d,2a,d3,ba),24,HX_("peote.view.utils.GLTool",00,20,8a,f7),HX_("getLastGlError",b7,02,4f,2c)));
            					}
            					else {
HXLINE(  25)						if ((err == gl->OUT_OF_MEMORY)) {
HXLINE(  25)							::haxe::Log_obj::trace(HX_("(GL-Error: OUT_OF_MEMORY)",9f,44,52,08),::hx::SourceInfo(HX_("peote/view/utils/GLTool.hx",3d,2a,d3,ba),25,HX_("peote.view.utils.GLTool",00,20,8a,f7),HX_("getLastGlError",b7,02,4f,2c)));
            						}
            						else {
HXLINE(  26)							::haxe::Log_obj::trace((HX_("GL-Error: ",e6,22,8c,b9) + err),::hx::SourceInfo(HX_("peote/view/utils/GLTool.hx",3d,2a,d3,ba),26,HX_("peote.view.utils.GLTool",00,20,8a,f7),HX_("getLastGlError",b7,02,4f,2c)));
            						}
            					}
            				}
            			}
            		}
HXLINE(  28)		return err;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLTool_obj,getLastGlError,return )

 ::EReg GLTool_obj::rEmptylines;

 ::EReg GLTool_obj::rStartspaces;


GLTool_obj::GLTool_obj()
{
}

bool GLTool_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"rEmptylines") ) { outValue = ( rEmptylines ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rStartspaces") ) { outValue = ( rStartspaces ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getLastGlError") ) { outValue = getLastGlError_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"clearGlErrorQueue") ) { outValue = clearGlErrorQueue_dyn(); return true; }
	}
	return false;
}

bool GLTool_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"rEmptylines") ) { rEmptylines=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rStartspaces") ) { rStartspaces=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *GLTool_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo GLTool_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::EReg */ ,(void *) &GLTool_obj::rEmptylines,HX_("rEmptylines",64,0b,e4,bb)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &GLTool_obj::rStartspaces,HX_("rStartspaces",7d,f3,17,27)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void GLTool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLTool_obj::rEmptylines,"rEmptylines");
	HX_MARK_MEMBER_NAME(GLTool_obj::rStartspaces,"rStartspaces");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLTool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLTool_obj::rEmptylines,"rEmptylines");
	HX_VISIT_MEMBER_NAME(GLTool_obj::rStartspaces,"rStartspaces");
};

#endif

::hx::Class GLTool_obj::__mClass;

static ::String GLTool_obj_sStaticFields[] = {
	HX_("clearGlErrorQueue",5b,38,d2,aa),
	HX_("getLastGlError",b7,02,4f,2c),
	HX_("rEmptylines",64,0b,e4,bb),
	HX_("rStartspaces",7d,f3,17,27),
	::String(null())
};

void GLTool_obj::__register()
{
	GLTool_obj _hx_dummy;
	GLTool_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.view.utils.GLTool",00,20,8a,f7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLTool_obj::__GetStatic;
	__mClass->mSetStaticField = &GLTool_obj::__SetStatic;
	__mClass->mMarkFunc = GLTool_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GLTool_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< GLTool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLTool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLTool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLTool_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GLTool_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_bf925d96d6510923_130_boot)
HXDLIN( 130)		rEmptylines =  ::EReg_obj::__alloc( HX_CTX ,HX_("([ \t]*\r?\n)+",71,83,57,6a),HX_("g",67,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_bf925d96d6510923_131_boot)
HXDLIN( 131)		rStartspaces =  ::EReg_obj::__alloc( HX_CTX ,HX_("^([ \t]*\r?\n)+",d3,c3,a1,8e),HX_("g",67,00,00,00));
            	}
}

} // end namespace peote
} // end namespace view
} // end namespace utils
