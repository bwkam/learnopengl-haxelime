// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_peote_view_Precision
#include <peote/view/Precision.h>
#endif
#ifndef INCLUDED_peote_view_utils_Background
#include <peote/view/utils/Background.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0bc4826f1883e5c7_22_new,"peote.view.utils.Background","new",0xec6256e3,"peote.view.utils.Background.new","peote/view/utils/Background.hx",22,0xa96688ec)
HX_LOCAL_STACK_FRAME(_hx_pos_0bc4826f1883e5c7_29_createBuffer,"peote.view.utils.Background","createBuffer",0x75f60e39,"peote.view.utils.Background.createBuffer","peote/view/utils/Background.hx",29,0xa96688ec)
HX_LOCAL_STACK_FRAME(_hx_pos_0bc4826f1883e5c7_44_createProgram,"peote.view.utils.Background","createProgram",0x03bf0b2b,"peote.view.utils.Background.createProgram","peote/view/utils/Background.hx",44,0xa96688ec)
HX_LOCAL_STACK_FRAME(_hx_pos_0bc4826f1883e5c7_97_render,"peote.view.utils.Background","render",0x7f0998b3,"peote.view.utils.Background.render","peote/view/utils/Background.hx",97,0xa96688ec)
namespace peote{
namespace view{
namespace utils{

void Background_obj::__construct( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl){
            	HX_STACKFRAME(&_hx_pos_0bc4826f1883e5c7_22_new)
HXLINE(  23)		this->gl = gl;
HXLINE(  24)		this->createBuffer();
HXLINE(  25)		this->createProgram();
            	}

Dynamic Background_obj::__CreateEmpty() { return new Background_obj; }

void *Background_obj::_hx_vtable = 0;

Dynamic Background_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Background_obj > _hx_result = new Background_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Background_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x52fe7cb3;
}

void Background_obj::createBuffer(){
            	HX_GC_STACKFRAME(&_hx_pos_0bc4826f1883e5c7_29_createBuffer)
HXLINE(  30)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(32);
HXLINE(  32)		bytes->setFloat(0,( (Float)(1) ));
HXDLIN(  32)		bytes->setFloat(4,( (Float)(1) ));
HXLINE(  33)		bytes->setFloat(8,( (Float)(0) ));
HXDLIN(  33)		bytes->setFloat(12,( (Float)(1) ));
HXLINE(  34)		bytes->setFloat(16,( (Float)(1) ));
HXDLIN(  34)		bytes->setFloat(20,( (Float)(0) ));
HXLINE(  35)		bytes->setFloat(24,( (Float)(0) ));
HXDLIN(  35)		bytes->setFloat(28,( (Float)(0) ));
HXLINE(  37)		this->buffer = this->gl->createBuffer();
HXLINE(  38)		this->gl->bindBuffer(this->gl->ARRAY_BUFFER,this->buffer);
HXLINE(  39)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext _hx_tmp = this->gl;
HXDLIN(  39)		int _hx_tmp1 = this->gl->ARRAY_BUFFER;
HXDLIN(  39)		Float _hx_tmp2 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer( ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,bytes,0));
HXDLIN(  39)		_hx_tmp->bufferData(_hx_tmp1,32,_hx_tmp2,this->gl->STATIC_DRAW);
HXLINE(  40)		this->gl->bindBuffer(this->gl->ARRAY_BUFFER,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Background_obj,createBuffer,(void))

void Background_obj::createProgram(){
            	HX_STACKFRAME(&_hx_pos_0bc4826f1883e5c7_44_createProgram)
HXLINE(  45)		::String precision = HX_("",00,00,00,00);
HXLINE(  47)		 ::Dynamic t = ::peote::view::Precision_obj::VertexFloat;
HXDLIN(  47)		::String _hx_tmp;
HXDLIN(  47)		bool _hx_tmp1;
HXDLIN(  47)		if (::hx::IsGreater( t->__Field(HX_("high",62,37,0e,45),::hx::paccDynamic),0 )) {
HXLINE(  47)			_hx_tmp1 = false;
            		}
            		else {
HXLINE(  47)			_hx_tmp1 = false;
            		}
HXDLIN(  47)		if (_hx_tmp1) {
HXLINE(  47)			_hx_tmp = HX_("highp",ce,3e,62,27);
            		}
            		else {
HXLINE(  47)			bool _hx_tmp2;
HXDLIN(  47)			if (::hx::IsGreater( t->__Field(HX_("medium",75,54,c8,fe),::hx::paccDynamic),0 )) {
HXLINE(  47)				_hx_tmp2 = false;
            			}
            			else {
HXLINE(  47)				_hx_tmp2 = false;
            			}
HXDLIN(  47)			if (_hx_tmp2) {
HXLINE(  47)				_hx_tmp = HX_("mediump",5b,92,81,f0);
            			}
            			else {
HXLINE(  47)				if (::hx::IsGreater( t->__Field(HX_("low",94,54,52,00),::hx::paccDynamic),0 )) {
HXLINE(  47)					_hx_tmp = HX_("lowp",5c,ad,b7,47);
            				}
            				else {
HXLINE(  47)					_hx_tmp = null();
            				}
            			}
            		}
HXDLIN(  47)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE(  47)			precision = HX_("precision lowp float;",81,5f,ad,9a);
            		}
            		else {
HXLINE(  48)			 ::Dynamic t1 = ::peote::view::Precision_obj::VertexFloat;
HXDLIN(  48)			::String _hx_tmp3;
HXDLIN(  48)			bool _hx_tmp4;
HXDLIN(  48)			if (::hx::IsGreater( t1->__Field(HX_("high",62,37,0e,45),::hx::paccDynamic),0 )) {
HXLINE(  48)				_hx_tmp4 = false;
            			}
            			else {
HXLINE(  48)				_hx_tmp4 = false;
            			}
HXDLIN(  48)			if (_hx_tmp4) {
HXLINE(  48)				_hx_tmp3 = HX_("highp",ce,3e,62,27);
            			}
            			else {
HXLINE(  48)				if (::hx::IsGreater( t1->__Field(HX_("medium",75,54,c8,fe),::hx::paccDynamic),0 )) {
HXLINE(  48)					_hx_tmp3 = HX_("mediump",5b,92,81,f0);
            				}
            				else {
HXLINE(  48)					if (::hx::IsGreater( t1->__Field(HX_("low",94,54,52,00),::hx::paccDynamic),0 )) {
HXLINE(  48)						_hx_tmp3 = HX_("lowp",5c,ad,b7,47);
            					}
            					else {
HXLINE(  48)						_hx_tmp3 = null();
            					}
            				}
            			}
HXDLIN(  48)			if (::hx::IsNotNull( _hx_tmp3 )) {
HXLINE(  48)				precision = HX_("precision mediump float;",e6,f2,15,86);
            			}
            		}
HXLINE(  50)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->gl;
HXDLIN(  50)		int type = this->gl->VERTEX_SHADER;
HXDLIN(  50)		 ::lime::graphics::opengl::GLObject glShader = gl->createShader(type);
HXDLIN(  50)		gl->shaderSource(glShader,(precision + HX_("\t\n\t\t\tattribute vec2 aPosition;\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tgl_Position = mat4 (\n\t\t\t\t\tvec4(2.0, 0.0, 0.0, 0.0),\n\t\t\t\t\tvec4(0.0, -2.0, 0.0, 0.0),\n\t\t\t\t\tvec4(0.0, 0.0, -1.0, 0.0),\n\t\t\t\t\tvec4(-1.0, 1.0, 0.0, 1.0)\n\t\t\t\t) * vec4 (aPosition, -1.0 ,1.0);\n\t\t\t}\n\t\t",41,09,9d,f9)));
HXDLIN(  50)		gl->compileShader(glShader);
HXDLIN(  50)		 ::lime::graphics::opengl::GLObject glVertexShader;
HXDLIN(  50)		if (::hx::IsEq( gl->getShaderParameter(glShader,gl->COMPILE_STATUS),0 )) {
HXLINE(  50)			::String glVertexShader1;
HXDLIN(  50)			if ((type == gl->VERTEX_SHADER)) {
HXLINE(  50)				glVertexShader1 = HX_("vertex",64,db,47,a1);
            			}
            			else {
HXLINE(  50)				glVertexShader1 = HX_("fragment",d0,5f,e5,ad);
            			}
HXDLIN(  50)			HX_STACK_DO_THROW((((HX_("ERROR compiling ",28,66,70,45) + glVertexShader1) + HX_(" shader\n",25,c5,d4,85)) + gl->getShaderInfoLog(glShader)));
            		}
            		else {
HXLINE(  50)			glVertexShader = glShader;
            		}
HXLINE(  65)		 ::Dynamic t2 = ::peote::view::Precision_obj::FragmentFloat;
HXDLIN(  65)		::String _hx_tmp5;
HXDLIN(  65)		bool _hx_tmp6;
HXDLIN(  65)		if (::hx::IsGreater( t2->__Field(HX_("high",62,37,0e,45),::hx::paccDynamic),0 )) {
HXLINE(  65)			_hx_tmp6 = false;
            		}
            		else {
HXLINE(  65)			_hx_tmp6 = false;
            		}
HXDLIN(  65)		if (_hx_tmp6) {
HXLINE(  65)			_hx_tmp5 = HX_("highp",ce,3e,62,27);
            		}
            		else {
HXLINE(  65)			bool _hx_tmp7;
HXDLIN(  65)			if (::hx::IsGreater( t2->__Field(HX_("medium",75,54,c8,fe),::hx::paccDynamic),0 )) {
HXLINE(  65)				_hx_tmp7 = false;
            			}
            			else {
HXLINE(  65)				_hx_tmp7 = false;
            			}
HXDLIN(  65)			if (_hx_tmp7) {
HXLINE(  65)				_hx_tmp5 = HX_("mediump",5b,92,81,f0);
            			}
            			else {
HXLINE(  65)				if (::hx::IsGreater( t2->__Field(HX_("low",94,54,52,00),::hx::paccDynamic),0 )) {
HXLINE(  65)					_hx_tmp5 = HX_("lowp",5c,ad,b7,47);
            				}
            				else {
HXLINE(  65)					_hx_tmp5 = null();
            				}
            			}
            		}
HXDLIN(  65)		if (::hx::IsNotNull( _hx_tmp5 )) {
HXLINE(  65)			precision = HX_("precision lowp float;",81,5f,ad,9a);
            		}
            		else {
HXLINE(  66)			 ::Dynamic t3 = ::peote::view::Precision_obj::FragmentFloat;
HXDLIN(  66)			::String _hx_tmp8;
HXDLIN(  66)			bool _hx_tmp9;
HXDLIN(  66)			if (::hx::IsGreater( t3->__Field(HX_("high",62,37,0e,45),::hx::paccDynamic),0 )) {
HXLINE(  66)				_hx_tmp9 = false;
            			}
            			else {
HXLINE(  66)				_hx_tmp9 = false;
            			}
HXDLIN(  66)			if (_hx_tmp9) {
HXLINE(  66)				_hx_tmp8 = HX_("highp",ce,3e,62,27);
            			}
            			else {
HXLINE(  66)				if (::hx::IsGreater( t3->__Field(HX_("medium",75,54,c8,fe),::hx::paccDynamic),0 )) {
HXLINE(  66)					_hx_tmp8 = HX_("mediump",5b,92,81,f0);
            				}
            				else {
HXLINE(  66)					if (::hx::IsGreater( t3->__Field(HX_("low",94,54,52,00),::hx::paccDynamic),0 )) {
HXLINE(  66)						_hx_tmp8 = HX_("lowp",5c,ad,b7,47);
            					}
            					else {
HXLINE(  66)						_hx_tmp8 = null();
            					}
            				}
            			}
HXDLIN(  66)			if (::hx::IsNotNull( _hx_tmp8 )) {
HXLINE(  66)				precision = HX_("precision mediump float;",e6,f2,15,86);
            			}
            		}
HXLINE(  68)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl1 = this->gl;
HXDLIN(  68)		int type1 = this->gl->FRAGMENT_SHADER;
HXDLIN(  68)		 ::lime::graphics::opengl::GLObject glShader1 = gl1->createShader(type1);
HXDLIN(  68)		gl1->shaderSource(glShader1,(precision + HX_("\n\t\t\tuniform vec4 uRGBA;\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tgl_FragColor = uRGBA;\n\t\t\t\t\n\t\t\t\t// TODO: Fix for old FF\n\t\t\t\tgl_FragColor.w = clamp(uRGBA.w, 0.003, 1.0);\n\t\t\t}\n\t\t",05,49,66,18)));
HXDLIN(  68)		gl1->compileShader(glShader1);
HXDLIN(  68)		 ::lime::graphics::opengl::GLObject glFragmentShader;
HXDLIN(  68)		if (::hx::IsEq( gl1->getShaderParameter(glShader1,gl1->COMPILE_STATUS),0 )) {
HXLINE(  68)			::String glFragmentShader1;
HXDLIN(  68)			if ((type1 == gl1->VERTEX_SHADER)) {
HXLINE(  68)				glFragmentShader1 = HX_("vertex",64,db,47,a1);
            			}
            			else {
HXLINE(  68)				glFragmentShader1 = HX_("fragment",d0,5f,e5,ad);
            			}
HXDLIN(  68)			HX_STACK_DO_THROW((((HX_("ERROR compiling ",28,66,70,45) + glFragmentShader1) + HX_(" shader\n",25,c5,d4,85)) + gl1->getShaderInfoLog(glShader1)));
            		}
            		else {
HXLINE(  68)			glFragmentShader = glShader1;
            		}
HXLINE(  81)		this->glProgram = this->gl->createProgram();
HXLINE(  83)		this->gl->attachShader(this->glProgram,glVertexShader);
HXLINE(  84)		this->gl->attachShader(this->glProgram,glFragmentShader);
HXLINE(  86)		this->gl->deleteShader(glVertexShader);
HXLINE(  87)		this->gl->deleteShader(glFragmentShader);
HXLINE(  89)		this->gl->bindAttribLocation(this->glProgram,0,HX_("aPosition",2a,26,25,92));
HXLINE(  91)		{
HXLINE(  91)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl2 = this->gl;
HXDLIN(  91)			 ::lime::graphics::opengl::GLObject glProgram = this->glProgram;
HXDLIN(  91)			gl2->linkProgram(glProgram);
HXDLIN(  91)			if (::hx::IsEq( gl2->getProgramParameter(glProgram,gl2->LINK_STATUS),0 )) {
HXLINE(  91)				::String _hx_tmp10 = (gl2->getProgramInfoLog(glProgram) + HX_("VALIDATE_STATUS: ",61,4a,52,b0));
HXDLIN(  91)				::String _hx_tmp11 = ((_hx_tmp10 + ::Std_obj::string(gl2->getProgramParameter(glProgram,gl2->VALIDATE_STATUS))) + HX_("ERROR: ",4e,70,de,69));
HXDLIN(  91)				HX_STACK_DO_THROW((_hx_tmp11 + gl2->getError()));
            			}
            		}
HXLINE(  93)		this->uRGBA = this->gl->getUniformLocation(this->glProgram,HX_("uRGBA",a9,77,4b,94));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Background_obj,createProgram,(void))

void Background_obj::render(Float r,Float g,Float b,Float a){
            	HX_STACKFRAME(&_hx_pos_0bc4826f1883e5c7_97_render)
HXLINE(  98)		this->gl->bindBuffer(this->gl->ARRAY_BUFFER,this->buffer);
HXLINE( 100)		this->gl->enableVertexAttribArray(0);
HXLINE( 101)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext _hx_tmp = this->gl;
HXDLIN( 101)		int _hx_tmp1 = this->gl->FLOAT;
HXDLIN( 101)		_hx_tmp->vertexAttribPointer(0,2,_hx_tmp1,false,8,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
HXLINE( 103)		this->gl->useProgram(this->glProgram);
HXLINE( 104)		this->gl->uniform4f(this->uRGBA,r,g,b,a);
HXLINE( 106)		this->gl->drawArrays(this->gl->TRIANGLE_STRIP,0,4);
HXLINE( 107)		this->gl->disableVertexAttribArray(0);
HXLINE( 109)		this->gl->bindBuffer(this->gl->ARRAY_BUFFER,null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(Background_obj,render,(void))


::hx::ObjectPtr< Background_obj > Background_obj::__new( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl) {
	::hx::ObjectPtr< Background_obj > __this = new Background_obj();
	__this->__construct(gl);
	return __this;
}

::hx::ObjectPtr< Background_obj > Background_obj::__alloc(::hx::Ctx *_hx_ctx, ::lime::_internal::backend::native::NativeOpenGLRenderContext gl) {
	Background_obj *__this = (Background_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Background_obj), true, "peote.view.utils.Background"));
	*(void **)__this = Background_obj::_hx_vtable;
	__this->__construct(gl);
	return __this;
}

Background_obj::Background_obj()
{
}

void Background_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Background);
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(glProgram,"glProgram");
	HX_MARK_MEMBER_NAME(uRGBA,"uRGBA");
	HX_MARK_END_CLASS();
}

void Background_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(glProgram,"glProgram");
	HX_VISIT_MEMBER_NAME(uRGBA,"uRGBA");
}

::hx::Val Background_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return ::hx::Val( gl ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"uRGBA") ) { return ::hx::Val( uRGBA ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return ::hx::Val( buffer ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glProgram") ) { return ::hx::Val( glProgram ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createBuffer") ) { return ::hx::Val( createBuffer_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createProgram") ) { return ::hx::Val( createProgram_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Background_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"uRGBA") ) { uRGBA=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glProgram") ) { glProgram=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Background_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("gl",25,5a,00,00));
	outFields->push(HX_("buffer",00,bd,94,d0));
	outFields->push(HX_("glProgram",df,d6,b3,c1));
	outFields->push(HX_("uRGBA",a9,77,4b,94));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Background_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::lime::_internal::backend::native::NativeOpenGLRenderContext */ ,(int)offsetof(Background_obj,gl),HX_("gl",25,5a,00,00)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Background_obj,buffer),HX_("buffer",00,bd,94,d0)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Background_obj,glProgram),HX_("glProgram",df,d6,b3,c1)},
	{::hx::fsInt,(int)offsetof(Background_obj,uRGBA),HX_("uRGBA",a9,77,4b,94)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Background_obj_sStaticStorageInfo = 0;
#endif

static ::String Background_obj_sMemberFields[] = {
	HX_("gl",25,5a,00,00),
	HX_("buffer",00,bd,94,d0),
	HX_("glProgram",df,d6,b3,c1),
	HX_("uRGBA",a9,77,4b,94),
	HX_("createBuffer",1c,fd,e9,f2),
	HX_("createProgram",e8,22,3c,dc),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class Background_obj::__mClass;

void Background_obj::__register()
{
	Background_obj _hx_dummy;
	Background_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.view.utils.Background",71,a9,56,22);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Background_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Background_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Background_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Background_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace peote
} // end namespace view
} // end namespace utils
