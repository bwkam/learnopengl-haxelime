// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_peote_view_UniformFloat
#include <peote/view/UniformFloat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1fb9e961772ea334_11_new,"peote.view.UniformFloat","new",0x9bd45320,"peote.view.UniformFloat.new","peote/view/UniformFloat.hx",11,0x252dfff0)
namespace peote{
namespace view{

void UniformFloat_obj::__construct(::String name,Float value){
            	HX_STACKFRAME(&_hx_pos_1fb9e961772ea334_11_new)
HXLINE(  12)		this->name = name;
HXLINE(  13)		this->value = value;
            	}

Dynamic UniformFloat_obj::__CreateEmpty() { return new UniformFloat_obj; }

void *UniformFloat_obj::_hx_vtable = 0;

Dynamic UniformFloat_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< UniformFloat_obj > _hx_result = new UniformFloat_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool UniformFloat_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x40d77e34;
}


UniformFloat_obj::UniformFloat_obj()
{
}

void UniformFloat_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UniformFloat);
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_END_CLASS();
}

void UniformFloat_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(name,"name");
}

::hx::Val UniformFloat_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val UniformFloat_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UniformFloat_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("name",4b,72,ff,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo UniformFloat_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(UniformFloat_obj,value),HX_("value",71,7f,b8,31)},
	{::hx::fsString,(int)offsetof(UniformFloat_obj,name),HX_("name",4b,72,ff,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *UniformFloat_obj_sStaticStorageInfo = 0;
#endif

static ::String UniformFloat_obj_sMemberFields[] = {
	HX_("value",71,7f,b8,31),
	HX_("name",4b,72,ff,48),
	::String(null()) };

::hx::Class UniformFloat_obj::__mClass;

void UniformFloat_obj::__register()
{
	UniformFloat_obj _hx_dummy;
	UniformFloat_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.view.UniformFloat",2e,83,ac,bc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(UniformFloat_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< UniformFloat_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UniformFloat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UniformFloat_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace peote
} // end namespace view
