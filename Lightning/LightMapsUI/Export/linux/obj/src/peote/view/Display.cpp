// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_peote_view_BufferInterface
#include <peote/view/BufferInterface.h>
#endif
#ifndef INCLUDED_peote_view_Display
#include <peote/view/Display.h>
#endif
#ifndef INCLUDED_peote_view_PeoteView
#include <peote/view/PeoteView.h>
#endif
#ifndef INCLUDED_peote_view_Program
#include <peote/view/Program.h>
#endif
#ifndef INCLUDED_peote_view_Texture
#include <peote/view/Texture.h>
#endif
#ifndef INCLUDED_peote_view_Version
#include <peote/view/Version.h>
#endif
#ifndef INCLUDED_peote_view__TextureData_TextureDataImpl
#include <peote/view/_TextureData/TextureDataImpl.h>
#endif
#ifndef INCLUDED_peote_view_utils_GLTool
#include <peote/view/utils/GLTool.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderListItem_peote_view_Program
#include <peote/view/utils/RenderListItem_peote_view_Program.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderList_peote_view_Display
#include <peote/view/utils/RenderList_peote_view_Display.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderList_peote_view_Program
#include <peote/view/utils/RenderList_peote_view_Program.h>
#endif
#ifndef INCLUDED_peote_view_utils_TexUtils
#include <peote/view/utils/TexUtils.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_44dd2369b30b5038_8_new,"peote.view.Display","new",0xea5e978e,"peote.view.Display.new","peote/view/Display.hx",8,0xf9e5a802)
HX_LOCAL_STACK_FRAME(_hx_pos_44dd2369b30b5038_148_addToPeoteView,"peote.view.Display","addToPeoteView",0xdde90ac6,"peote.view.Display.addToPeoteView","peote/view/Display.hx",148,0xf9e5a802)
HX_LOCAL_STACK_FRAME(_hx_pos_44dd2369b30b5038_234_setNewGLContext,"peote.view.Display","setNewGLContext",0xf73b88da,"peote.view.Display.setNewGLContext","peote/view/Display.hx",234,0xf9e5a802)
HX_LOCAL_STACK_FRAME(_hx_pos_44dd2369b30b5038_282_addProgram,"peote.view.Display","addProgram",0xa48010f5,"peote.view.Display.addProgram","peote/view/Display.hx",282,0xf9e5a802)
namespace peote{
namespace view{

void Display_obj::__construct(int x,int y,int width,int height,::hx::Null< int >  __o_color){
            		int color = __o_color.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_44dd2369b30b5038_8_new)
HXLINE( 344)		this->renderFramebufferFrame = 0;
HXLINE( 343)		this->renderFramebufferSkipFrames = 0;
HXLINE( 341)		this->_renderFramebufferEnabled = false;
HXLINE( 333)		this->framebufferTextureSlot = 0;
HXLINE( 106)		this->fbTexture = null();
HXLINE(  98)		this->gl = null();
HXLINE(  97)		this->peoteView = null();
HXLINE(  94)		this->alpha = ((Float)1.0);
HXLINE(  93)		this->blue = ((Float)0.0);
HXLINE(  92)		this->green = ((Float)0.0);
HXLINE(  91)		this->red = ((Float)0.0);
HXLINE(  89)		this->backgroundEnabled = false;
HXLINE(  88)		this->backgroundDepth = false;
HXLINE(  87)		this->backgroundAlpha = false;
HXLINE(  83)		this->isVisible = true;
HXLINE(  41)		this->yz = ((Float)1.0);
HXLINE(  40)		this->xz = ((Float)1.0);
HXLINE(  31)		this->yOffset = ((Float)0);
HXLINE(  23)		this->xOffset = ((Float)0);
HXLINE(  18)		this->y = 0;
HXLINE(  13)		this->x = 0;
HXLINE(  11)		this->height = 0;
HXLINE(  10)		this->width = 0;
HXLINE( 119)		this->x = x;
HXLINE( 120)		this->y = y;
HXLINE( 121)		this->width = width;
HXLINE( 122)		this->height = height;
HXLINE( 123)		{
HXLINE( 123)			this->red = (( (Float)(((color >> 24) & 255)) ) / ((Float)255.0));
HXDLIN( 123)			this->green = (( (Float)(((color >> 16) & 255)) ) / ((Float)255.0));
HXDLIN( 123)			this->blue = (( (Float)(((color >> 8) & 255)) ) / ((Float)255.0));
HXDLIN( 123)			this->alpha = (( (Float)((color & 255)) ) / ((Float)255.0));
HXDLIN( 123)			bool _hx_tmp;
HXDLIN( 123)			if ((this->alpha > ((Float)0.0))) {
HXLINE( 123)				_hx_tmp = true;
            			}
            			else {
HXLINE( 123)				_hx_tmp = false;
            			}
HXDLIN( 123)			this->backgroundEnabled = _hx_tmp;
HXDLIN( 123)			bool _hx_tmp1;
HXDLIN( 123)			if ((this->alpha < ((Float)1.0))) {
HXLINE( 123)				_hx_tmp1 = true;
            			}
            			else {
HXLINE( 123)				_hx_tmp1 = false;
            			}
HXDLIN( 123)			this->backgroundAlpha = _hx_tmp1;
            		}
HXLINE( 125)		this->programList =  ::peote::view::utils::RenderList_peote_view_Program_obj::__alloc( HX_CTX , ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX ));
            	}

Dynamic Display_obj::__CreateEmpty() { return new Display_obj; }

void *Display_obj::_hx_vtable = 0;

Dynamic Display_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Display_obj > _hx_result = new Display_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Display_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0fddc6ba;
}

void Display_obj::addToPeoteView( ::peote::view::PeoteView peoteView, ::peote::view::Display atDisplay,::hx::Null< bool >  __o_addBefore){
            		bool addBefore = __o_addBefore.Default(false);
            	HX_STACKFRAME(&_hx_pos_44dd2369b30b5038_148_addToPeoteView)
HXLINE( 149)		if (::hx::IsInstanceNotEq( this->peoteView,peoteView )) {
HXLINE( 153)			this->peoteView = peoteView;
HXLINE( 154)			this->setNewGLContext(peoteView->gl);
            		}
HXLINE( 159)		peoteView->displayList->add(::hx::ObjectPtr<OBJ_>(this),atDisplay,addBefore);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Display_obj,addToPeoteView,(void))

void Display_obj::setNewGLContext( ::lime::_internal::backend::native::NativeOpenGLRenderContext newGl){
            	HX_STACKFRAME(&_hx_pos_44dd2369b30b5038_234_setNewGLContext)
HXDLIN( 234)		bool _hx_tmp;
HXDLIN( 234)		if (::hx::IsNotNull( newGl )) {
HXDLIN( 234)			_hx_tmp = ::hx::IsInstanceNotEq( newGl,this->gl );
            		}
            		else {
HXDLIN( 234)			_hx_tmp = false;
            		}
HXDLIN( 234)		if (_hx_tmp) {
HXLINE( 237)			bool _hx_tmp1 = ::hx::IsNotNull( this->gl );
HXLINE( 241)			this->gl = newGl;
HXLINE( 249)			{
HXLINE( 249)				 ::peote::view::utils::RenderListItem_peote_view_Program _g_item = this->programList->first;
HXDLIN( 249)				while(::hx::IsNotNull( _g_item )){
HXLINE( 249)					 ::peote::view::Program value = _g_item->value;
HXDLIN( 249)					_g_item = _g_item->next;
HXDLIN( 249)					 ::peote::view::Program program = value;
HXDLIN( 249)					bool _hx_tmp2;
HXDLIN( 249)					if (::hx::IsNotNull( newGl )) {
HXLINE( 249)						_hx_tmp2 = ::hx::IsInstanceNotEq( newGl,program->gl );
            					}
            					else {
HXLINE( 249)						_hx_tmp2 = false;
            					}
HXDLIN( 249)					if (_hx_tmp2) {
HXLINE( 249)						{
HXLINE( 249)							int _g = 0;
HXDLIN( 249)							::Array< ::Dynamic> _g1 = program->displays;
HXDLIN( 249)							while((_g < _g1->length)){
HXLINE( 249)								 ::peote::view::Display d = _g1->__get(_g).StaticCast<  ::peote::view::Display >();
HXDLIN( 249)								_g = (_g + 1);
HXDLIN( 249)								bool _hx_tmp3;
HXDLIN( 249)								if (::hx::IsNotNull( d->gl )) {
HXLINE( 249)									_hx_tmp3 = ::hx::IsInstanceNotEq( d->gl,newGl );
            								}
            								else {
HXLINE( 249)									_hx_tmp3 = false;
            								}
HXDLIN( 249)								if (_hx_tmp3) {
HXLINE( 249)									HX_STACK_DO_THROW(HX_("Error, program can not used inside different gl-contexts",ef,f8,25,08));
            								}
            							}
            						}
HXDLIN( 249)						if (::hx::IsNotNull( program->gl )) {
HXLINE( 249)							program->gl->deleteShader(program->glVertexShader);
HXDLIN( 249)							program->gl->deleteShader(program->glFragmentShader);
HXDLIN( 249)							program->gl->deleteProgram(program->glProgram);
HXDLIN( 249)							if (::peote::view::BufferInterface_obj::hasPicking(program->buffer)) {
HXLINE( 249)								program->gl->deleteShader(program->glVertexShaderPicking);
HXDLIN( 249)								program->gl->deleteShader(program->glFragmentShaderPicking);
HXDLIN( 249)								program->gl->deleteProgram(program->glProgramPicking);
            							}
            						}
HXDLIN( 249)						program->gl = newGl;
HXDLIN( 249)						if (::peote::view::Version_obj::isES3) {
HXLINE( 249)							program->glShaderConfig->__SetField(HX_("isES3",5b,16,4b,c1),true,::hx::paccDynamic);
HXDLIN( 249)							program->glShaderConfig->__SetField(HX_("IN",e5,3f,00,00),HX_("in",e5,5b,00,00),::hx::paccDynamic);
HXDLIN( 249)							program->glShaderConfig->__SetField(HX_("VARIN",6c,3a,ab,af),HX_("in",e5,5b,00,00),::hx::paccDynamic);
HXDLIN( 249)							program->glShaderConfig->__SetField(HX_("VAROUT",07,78,2c,06),HX_("out",8e,a0,54,00),::hx::paccDynamic);
            						}
HXDLIN( 249)						program->glShaderConfig->__SetField(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
HXDLIN( 249)						if (::hx::IsNotNull( program->gl->getExtension(HX_("OES_standard_derivatives",8c,cb,00,04)) )) {
HXLINE( 249)							( (::Array< ::Dynamic>)(program->glShaderConfig->__Field(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::hx::paccDynamic)) )->push( ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("EXTENSION",5f,03,69,e0),HX_("GL_OES_standard_derivatives",26,6c,66,da))));
            						}
HXDLIN( 249)						if (::hx::IsNotNull( program->gl->getExtension(HX_("EXT_color_buffer_float",b7,19,0b,dd)) )) {
HXLINE( 249)							( (::Array< ::Dynamic>)(program->glShaderConfig->__Field(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::hx::paccDynamic)) )->push( ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("EXTENSION",5f,03,69,e0),HX_("EXT_color_buffer_float",b7,19,0b,dd))));
            						}
            						else {
HXLINE( 249)							if (::hx::IsNotNull( program->gl->getExtension(HX_("OES_texture_float",76,0b,21,02)) )) {
HXLINE( 249)								( (::Array< ::Dynamic>)(program->glShaderConfig->__Field(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::hx::paccDynamic)) )->push( ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("EXTENSION",5f,03,69,e0),HX_("OES_texture_float",76,0b,21,02))));
            							}
            						}
HXDLIN( 249)						::peote::view::BufferInterface_obj::setNewGLContext(program->buffer,program->gl);
HXDLIN( 249)						{
HXLINE( 249)							program->createProg(null());
HXDLIN( 249)							if (::peote::view::BufferInterface_obj::hasPicking(program->buffer)) {
HXLINE( 249)								program->createProg(true);
            							}
            						}
HXDLIN( 249)						{
HXLINE( 249)							int _g2 = 0;
HXDLIN( 249)							::Array< ::Dynamic> _g3 = program->activeTextures;
HXDLIN( 249)							while((_g2 < _g3->length)){
HXLINE( 249)								 ::peote::view::Texture t = _g3->__get(_g2).StaticCast<  ::peote::view::Texture >();
HXDLIN( 249)								_g2 = (_g2 + 1);
HXDLIN( 249)								{
HXLINE( 249)									 ::lime::_internal::backend::native::NativeOpenGLRenderContext newGl1 = program->gl;
HXDLIN( 249)									bool _hx_tmp4;
HXDLIN( 249)									if (::hx::IsNotNull( newGl1 )) {
HXLINE( 249)										_hx_tmp4 = ::hx::IsInstanceNotEq( newGl1,t->gl );
            									}
            									else {
HXLINE( 249)										_hx_tmp4 = false;
            									}
HXDLIN( 249)									if (_hx_tmp4) {
HXLINE( 249)										{
HXLINE( 249)											int _g4 = 0;
HXDLIN( 249)											::Array< ::Dynamic> _g5 = t->programs;
HXDLIN( 249)											while((_g4 < _g5->length)){
HXLINE( 249)												 ::peote::view::Program p = _g5->__get(_g4).StaticCast<  ::peote::view::Program >();
HXDLIN( 249)												_g4 = (_g4 + 1);
HXDLIN( 249)												bool _hx_tmp5;
HXDLIN( 249)												if (::hx::IsNotNull( p->gl )) {
HXLINE( 249)													_hx_tmp5 = ::hx::IsInstanceNotEq( p->gl,newGl1 );
            												}
            												else {
HXLINE( 249)													_hx_tmp5 = false;
            												}
HXDLIN( 249)												if (_hx_tmp5) {
HXLINE( 249)													HX_STACK_DO_THROW(HX_("Error, texture can not used inside different gl-contexts",06,26,7d,73));
            												}
            											}
            										}
HXDLIN( 249)										{
HXLINE( 249)											int _g6 = 0;
HXDLIN( 249)											::Array< ::Dynamic> _g7 = t->displays;
HXDLIN( 249)											while((_g6 < _g7->length)){
HXLINE( 249)												 ::peote::view::Display d1 = _g7->__get(_g6).StaticCast<  ::peote::view::Display >();
HXDLIN( 249)												_g6 = (_g6 + 1);
HXDLIN( 249)												bool _hx_tmp6;
HXDLIN( 249)												if (::hx::IsNotNull( d1->gl )) {
HXLINE( 249)													_hx_tmp6 = ::hx::IsInstanceNotEq( d1->gl,newGl1 );
            												}
            												else {
HXLINE( 249)													_hx_tmp6 = false;
            												}
HXDLIN( 249)												if (_hx_tmp6) {
HXLINE( 249)													HX_STACK_DO_THROW(HX_("Error, texture can not used inside different gl-contexts",06,26,7d,73));
            												}
            											}
            										}
HXDLIN( 249)										if (::hx::IsNotNull( t->gl )) {
HXLINE( 249)											t->gl->deleteTexture(t->glTexture);
HXDLIN( 249)											t->glTexture = null();
HXDLIN( 249)											bool _hx_tmp7;
HXDLIN( 249)											if ((t->displays->length == 0)) {
HXLINE( 249)												_hx_tmp7 = ::hx::IsNotNull( t->framebuffer );
            											}
            											else {
HXLINE( 249)												_hx_tmp7 = false;
            											}
HXDLIN( 249)											if (_hx_tmp7) {
HXLINE( 249)												t->gl->deleteFramebuffer(t->framebuffer);
HXDLIN( 249)												t->framebuffer = null();
HXDLIN( 249)												if (::hx::IsNotNull( t->glDepthBuffer )) {
HXLINE( 249)													t->gl->deleteRenderbuffer(t->glDepthBuffer);
            												}
HXDLIN( 249)												t->glDepthBuffer = null();
            											}
            										}
HXDLIN( 249)										t->gl = newGl1;
HXDLIN( 249)										{
HXLINE( 249)											bool _hx_tmp8;
HXDLIN( 249)											int t1 = t->width;
HXDLIN( 249)											if (!(::hx::IsGreater( t1,t->gl->getParameter(t->gl->MAX_TEXTURE_SIZE) ))) {
HXLINE( 249)												int t2 = t->height;
HXDLIN( 249)												_hx_tmp8 = ::hx::IsGreater( t2,t->gl->getParameter(t->gl->MAX_TEXTURE_SIZE) );
            											}
            											else {
HXLINE( 249)												_hx_tmp8 = true;
            											}
HXDLIN( 249)											if (_hx_tmp8) {
HXLINE( 249)												HX_STACK_DO_THROW(HX_("Error, texture size is greater then gl.MAX_TEXTURE_SIZE",84,65,32,52));
            											}
HXDLIN( 249)											t->glTexture = ::peote::view::utils::TexUtils_obj::createEmptyTexture(t->gl,t->width,t->height,t->colorChannels,t->createMipmaps,t->magFilter,t->minFilter,t->useFloat);
            										}
HXDLIN( 249)										bool _hx_tmp9;
HXDLIN( 249)										if ((t->displays->length > 0)) {
HXLINE( 249)											_hx_tmp9 = ::hx::IsNull( t->framebuffer );
            										}
            										else {
HXLINE( 249)											_hx_tmp9 = false;
            										}
HXDLIN( 249)										if (_hx_tmp9) {
HXLINE( 249)											t->glDepthBuffer = t->gl->createRenderbuffer();
HXDLIN( 249)											 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = t->gl;
HXDLIN( 249)											 ::lime::graphics::opengl::GLObject texture = t->glTexture;
HXDLIN( 249)											 ::lime::graphics::opengl::GLObject depthBuffer = t->glDepthBuffer;
HXDLIN( 249)											int width = t->width;
HXDLIN( 249)											int height = t->height;
HXDLIN( 249)											 ::lime::graphics::opengl::GLObject framebuffer = gl->createFramebuffer();
HXDLIN( 249)											gl->bindRenderbuffer(gl->RENDERBUFFER,depthBuffer);
HXDLIN( 249)											::peote::view::utils::GLTool_obj::clearGlErrorQueue(gl);
HXDLIN( 249)											gl->renderbufferStorage(gl->RENDERBUFFER,gl->DEPTH_COMPONENT24,width,height);
HXDLIN( 249)											int _hx_tmp10 = ::peote::view::utils::GLTool_obj::getLastGlError(gl);
HXDLIN( 249)											if ((_hx_tmp10 == gl->INVALID_ENUM)) {
HXLINE( 249)												::haxe::Log_obj::trace(HX_("switching to DEPTH_COMPONENT16 for framebuffer",69,ed,16,03),::hx::SourceInfo(HX_("peote/view/utils/GLTool.hx",3d,2a,d3,ba),41,HX_("peote.view.utils.GLTool",00,20,8a,f7),HX_("createFramebuffer",51,ef,e8,cc)));
HXDLIN( 249)												gl->renderbufferStorage(gl->RENDERBUFFER,gl->DEPTH_COMPONENT16,width,height);
            											}
HXDLIN( 249)											gl->bindFramebuffer(gl->FRAMEBUFFER,framebuffer);
HXDLIN( 249)											gl->framebufferRenderbuffer(gl->FRAMEBUFFER,gl->DEPTH_ATTACHMENT,gl->RENDERBUFFER,depthBuffer);
HXDLIN( 249)											gl->framebufferTexture2D(gl->FRAMEBUFFER,gl->COLOR_ATTACHMENT0,gl->TEXTURE_2D,texture,0);
HXDLIN( 249)											int _hx_tmp11 = gl->checkFramebufferStatus(gl->FRAMEBUFFER);
HXDLIN( 249)											if ((_hx_tmp11 != gl->FRAMEBUFFER_COMPLETE)) {
HXLINE( 249)												HX_STACK_DO_THROW(HX_("Error: Framebuffer not complete!",5a,13,e6,19));
            											}
HXDLIN( 249)											gl->bindFramebuffer(gl->FRAMEBUFFER,null());
HXDLIN( 249)											gl->bindRenderbuffer(gl->RENDERBUFFER,null());
HXDLIN( 249)											t->framebuffer = framebuffer;
HXDLIN( 249)											t->updated = true;
            										}
HXDLIN( 249)										{
HXLINE( 249)											 ::Dynamic image = t->images->keys();
HXDLIN( 249)											while(( (bool)(image->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 249)												 ::peote::view::_TextureData::TextureDataImpl image1 = ( ( ::peote::view::_TextureData::TextureDataImpl)(image->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 249)												t->bufferImage(image1,t->images->get(image1));
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 250)			if (::hx::IsNotNull( this->fbTexture )) {
HXLINE( 250)				 ::peote::view::Texture _this = this->fbTexture;
HXDLIN( 250)				bool _hx_tmp12;
HXDLIN( 250)				if (::hx::IsNotNull( newGl )) {
HXLINE( 250)					_hx_tmp12 = ::hx::IsInstanceNotEq( newGl,_this->gl );
            				}
            				else {
HXLINE( 250)					_hx_tmp12 = false;
            				}
HXDLIN( 250)				if (_hx_tmp12) {
HXLINE( 250)					{
HXLINE( 250)						int _g8 = 0;
HXDLIN( 250)						::Array< ::Dynamic> _g9 = _this->programs;
HXDLIN( 250)						while((_g8 < _g9->length)){
HXLINE( 250)							 ::peote::view::Program p1 = _g9->__get(_g8).StaticCast<  ::peote::view::Program >();
HXDLIN( 250)							_g8 = (_g8 + 1);
HXDLIN( 250)							bool _hx_tmp13;
HXDLIN( 250)							if (::hx::IsNotNull( p1->gl )) {
HXLINE( 250)								_hx_tmp13 = ::hx::IsInstanceNotEq( p1->gl,newGl );
            							}
            							else {
HXLINE( 250)								_hx_tmp13 = false;
            							}
HXDLIN( 250)							if (_hx_tmp13) {
HXLINE( 250)								HX_STACK_DO_THROW(HX_("Error, texture can not used inside different gl-contexts",06,26,7d,73));
            							}
            						}
            					}
HXDLIN( 250)					{
HXLINE( 250)						int _g10 = 0;
HXDLIN( 250)						::Array< ::Dynamic> _g11 = _this->displays;
HXDLIN( 250)						while((_g10 < _g11->length)){
HXLINE( 250)							 ::peote::view::Display d2 = _g11->__get(_g10).StaticCast<  ::peote::view::Display >();
HXDLIN( 250)							_g10 = (_g10 + 1);
HXDLIN( 250)							bool _hx_tmp14;
HXDLIN( 250)							if (::hx::IsNotNull( d2->gl )) {
HXLINE( 250)								_hx_tmp14 = ::hx::IsInstanceNotEq( d2->gl,newGl );
            							}
            							else {
HXLINE( 250)								_hx_tmp14 = false;
            							}
HXDLIN( 250)							if (_hx_tmp14) {
HXLINE( 250)								HX_STACK_DO_THROW(HX_("Error, texture can not used inside different gl-contexts",06,26,7d,73));
            							}
            						}
            					}
HXDLIN( 250)					if (::hx::IsNotNull( _this->gl )) {
HXLINE( 250)						_this->gl->deleteTexture(_this->glTexture);
HXDLIN( 250)						_this->glTexture = null();
HXDLIN( 250)						bool _hx_tmp15;
HXDLIN( 250)						if ((_this->displays->length == 0)) {
HXLINE( 250)							_hx_tmp15 = ::hx::IsNotNull( _this->framebuffer );
            						}
            						else {
HXLINE( 250)							_hx_tmp15 = false;
            						}
HXDLIN( 250)						if (_hx_tmp15) {
HXLINE( 250)							_this->gl->deleteFramebuffer(_this->framebuffer);
HXDLIN( 250)							_this->framebuffer = null();
HXDLIN( 250)							if (::hx::IsNotNull( _this->glDepthBuffer )) {
HXLINE( 250)								_this->gl->deleteRenderbuffer(_this->glDepthBuffer);
            							}
HXDLIN( 250)							_this->glDepthBuffer = null();
            						}
            					}
HXDLIN( 250)					_this->gl = newGl;
HXDLIN( 250)					{
HXLINE( 250)						bool _hx_tmp16;
HXDLIN( 250)						int _this1 = _this->width;
HXDLIN( 250)						if (!(::hx::IsGreater( _this1,_this->gl->getParameter(_this->gl->MAX_TEXTURE_SIZE) ))) {
HXLINE( 250)							int _this2 = _this->height;
HXDLIN( 250)							_hx_tmp16 = ::hx::IsGreater( _this2,_this->gl->getParameter(_this->gl->MAX_TEXTURE_SIZE) );
            						}
            						else {
HXLINE( 250)							_hx_tmp16 = true;
            						}
HXDLIN( 250)						if (_hx_tmp16) {
HXLINE( 250)							HX_STACK_DO_THROW(HX_("Error, texture size is greater then gl.MAX_TEXTURE_SIZE",84,65,32,52));
            						}
HXDLIN( 250)						_this->glTexture = ::peote::view::utils::TexUtils_obj::createEmptyTexture(_this->gl,_this->width,_this->height,_this->colorChannels,_this->createMipmaps,_this->magFilter,_this->minFilter,_this->useFloat);
            					}
HXDLIN( 250)					bool _hx_tmp17;
HXDLIN( 250)					if ((_this->displays->length > 0)) {
HXLINE( 250)						_hx_tmp17 = ::hx::IsNull( _this->framebuffer );
            					}
            					else {
HXLINE( 250)						_hx_tmp17 = false;
            					}
HXDLIN( 250)					if (_hx_tmp17) {
HXLINE( 250)						_this->glDepthBuffer = _this->gl->createRenderbuffer();
HXDLIN( 250)						 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl1 = _this->gl;
HXDLIN( 250)						 ::lime::graphics::opengl::GLObject texture1 = _this->glTexture;
HXDLIN( 250)						 ::lime::graphics::opengl::GLObject depthBuffer1 = _this->glDepthBuffer;
HXDLIN( 250)						int width1 = _this->width;
HXDLIN( 250)						int height1 = _this->height;
HXDLIN( 250)						 ::lime::graphics::opengl::GLObject framebuffer1 = gl1->createFramebuffer();
HXDLIN( 250)						gl1->bindRenderbuffer(gl1->RENDERBUFFER,depthBuffer1);
HXDLIN( 250)						::peote::view::utils::GLTool_obj::clearGlErrorQueue(gl1);
HXDLIN( 250)						gl1->renderbufferStorage(gl1->RENDERBUFFER,gl1->DEPTH_COMPONENT24,width1,height1);
HXDLIN( 250)						int _hx_tmp18 = ::peote::view::utils::GLTool_obj::getLastGlError(gl1);
HXDLIN( 250)						if ((_hx_tmp18 == gl1->INVALID_ENUM)) {
HXLINE( 250)							::haxe::Log_obj::trace(HX_("switching to DEPTH_COMPONENT16 for framebuffer",69,ed,16,03),::hx::SourceInfo(HX_("peote/view/utils/GLTool.hx",3d,2a,d3,ba),41,HX_("peote.view.utils.GLTool",00,20,8a,f7),HX_("createFramebuffer",51,ef,e8,cc)));
HXDLIN( 250)							gl1->renderbufferStorage(gl1->RENDERBUFFER,gl1->DEPTH_COMPONENT16,width1,height1);
            						}
HXDLIN( 250)						gl1->bindFramebuffer(gl1->FRAMEBUFFER,framebuffer1);
HXDLIN( 250)						gl1->framebufferRenderbuffer(gl1->FRAMEBUFFER,gl1->DEPTH_ATTACHMENT,gl1->RENDERBUFFER,depthBuffer1);
HXDLIN( 250)						gl1->framebufferTexture2D(gl1->FRAMEBUFFER,gl1->COLOR_ATTACHMENT0,gl1->TEXTURE_2D,texture1,0);
HXDLIN( 250)						int _hx_tmp19 = gl1->checkFramebufferStatus(gl1->FRAMEBUFFER);
HXDLIN( 250)						if ((_hx_tmp19 != gl1->FRAMEBUFFER_COMPLETE)) {
HXLINE( 250)							HX_STACK_DO_THROW(HX_("Error: Framebuffer not complete!",5a,13,e6,19));
            						}
HXDLIN( 250)						gl1->bindFramebuffer(gl1->FRAMEBUFFER,null());
HXDLIN( 250)						gl1->bindRenderbuffer(gl1->RENDERBUFFER,null());
HXDLIN( 250)						_this->framebuffer = framebuffer1;
HXDLIN( 250)						_this->updated = true;
            					}
HXDLIN( 250)					{
HXLINE( 250)						 ::Dynamic image2 = _this->images->keys();
HXDLIN( 250)						while(( (bool)(image2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 250)							 ::peote::view::_TextureData::TextureDataImpl image3 = ( ( ::peote::view::_TextureData::TextureDataImpl)(image2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 250)							_this->bufferImage(image3,_this->images->get(image3));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Display_obj,setNewGLContext,(void))

void Display_obj::addProgram( ::peote::view::Program program, ::peote::view::Program atProgram,::hx::Null< bool >  __o_addBefore){
            		bool addBefore = __o_addBefore.Default(false);
            	HX_STACKFRAME(&_hx_pos_44dd2369b30b5038_282_addProgram)
HXDLIN( 282)		program->addToDisplay(::hx::ObjectPtr<OBJ_>(this),atProgram,addBefore);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Display_obj,addProgram,(void))


::hx::ObjectPtr< Display_obj > Display_obj::__new(int x,int y,int width,int height,::hx::Null< int >  __o_color) {
	::hx::ObjectPtr< Display_obj > __this = new Display_obj();
	__this->__construct(x,y,width,height,__o_color);
	return __this;
}

::hx::ObjectPtr< Display_obj > Display_obj::__alloc(::hx::Ctx *_hx_ctx,int x,int y,int width,int height,::hx::Null< int >  __o_color) {
	Display_obj *__this = (Display_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Display_obj), true, "peote.view.Display"));
	*(void **)__this = Display_obj::_hx_vtable;
	__this->__construct(x,y,width,height,__o_color);
	return __this;
}

Display_obj::Display_obj()
{
}

void Display_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Display);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(xOffset,"xOffset");
	HX_MARK_MEMBER_NAME(yOffset,"yOffset");
	HX_MARK_MEMBER_NAME(xz,"xz");
	HX_MARK_MEMBER_NAME(yz,"yz");
	HX_MARK_MEMBER_NAME(isVisible,"isVisible");
	HX_MARK_MEMBER_NAME(backgroundAlpha,"backgroundAlpha");
	HX_MARK_MEMBER_NAME(backgroundDepth,"backgroundDepth");
	HX_MARK_MEMBER_NAME(backgroundEnabled,"backgroundEnabled");
	HX_MARK_MEMBER_NAME(red,"red");
	HX_MARK_MEMBER_NAME(green,"green");
	HX_MARK_MEMBER_NAME(blue,"blue");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(peoteView,"peoteView");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(programList,"programList");
	HX_MARK_MEMBER_NAME(fbTexture,"fbTexture");
	HX_MARK_MEMBER_NAME(framebufferTextureSlot,"framebufferTextureSlot");
	HX_MARK_MEMBER_NAME(_renderFramebufferEnabled,"_renderFramebufferEnabled");
	HX_MARK_MEMBER_NAME(renderFramebufferSkipFrames,"renderFramebufferSkipFrames");
	HX_MARK_MEMBER_NAME(renderFramebufferFrame,"renderFramebufferFrame");
	HX_MARK_MEMBER_NAME(programListItem,"programListItem");
	HX_MARK_END_CLASS();
}

void Display_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(xOffset,"xOffset");
	HX_VISIT_MEMBER_NAME(yOffset,"yOffset");
	HX_VISIT_MEMBER_NAME(xz,"xz");
	HX_VISIT_MEMBER_NAME(yz,"yz");
	HX_VISIT_MEMBER_NAME(isVisible,"isVisible");
	HX_VISIT_MEMBER_NAME(backgroundAlpha,"backgroundAlpha");
	HX_VISIT_MEMBER_NAME(backgroundDepth,"backgroundDepth");
	HX_VISIT_MEMBER_NAME(backgroundEnabled,"backgroundEnabled");
	HX_VISIT_MEMBER_NAME(red,"red");
	HX_VISIT_MEMBER_NAME(green,"green");
	HX_VISIT_MEMBER_NAME(blue,"blue");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(peoteView,"peoteView");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(programList,"programList");
	HX_VISIT_MEMBER_NAME(fbTexture,"fbTexture");
	HX_VISIT_MEMBER_NAME(framebufferTextureSlot,"framebufferTextureSlot");
	HX_VISIT_MEMBER_NAME(_renderFramebufferEnabled,"_renderFramebufferEnabled");
	HX_VISIT_MEMBER_NAME(renderFramebufferSkipFrames,"renderFramebufferSkipFrames");
	HX_VISIT_MEMBER_NAME(renderFramebufferFrame,"renderFramebufferFrame");
	HX_VISIT_MEMBER_NAME(programListItem,"programListItem");
}

::hx::Val Display_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"xz") ) { return ::hx::Val( xz ); }
		if (HX_FIELD_EQ(inName,"yz") ) { return ::hx::Val( yz ); }
		if (HX_FIELD_EQ(inName,"gl") ) { return ::hx::Val( gl ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"red") ) { return ::hx::Val( red ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"blue") ) { return ::hx::Val( blue ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"green") ) { return ::hx::Val( green ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return ::hx::Val( alpha ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xOffset") ) { return ::hx::Val( xOffset ); }
		if (HX_FIELD_EQ(inName,"yOffset") ) { return ::hx::Val( yOffset ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isVisible") ) { return ::hx::Val( isVisible ); }
		if (HX_FIELD_EQ(inName,"peoteView") ) { return ::hx::Val( peoteView ); }
		if (HX_FIELD_EQ(inName,"fbTexture") ) { return ::hx::Val( fbTexture ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addProgram") ) { return ::hx::Val( addProgram_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"programList") ) { return ::hx::Val( programList ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"addToPeoteView") ) { return ::hx::Val( addToPeoteView_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundAlpha") ) { return ::hx::Val( backgroundAlpha ); }
		if (HX_FIELD_EQ(inName,"backgroundDepth") ) { return ::hx::Val( backgroundDepth ); }
		if (HX_FIELD_EQ(inName,"setNewGLContext") ) { return ::hx::Val( setNewGLContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"programListItem") ) { return ::hx::Val( programListItem ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"backgroundEnabled") ) { return ::hx::Val( backgroundEnabled ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"framebufferTextureSlot") ) { return ::hx::Val( framebufferTextureSlot ); }
		if (HX_FIELD_EQ(inName,"renderFramebufferFrame") ) { return ::hx::Val( renderFramebufferFrame ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_renderFramebufferEnabled") ) { return ::hx::Val( _renderFramebufferEnabled ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"renderFramebufferSkipFrames") ) { return ::hx::Val( renderFramebufferSkipFrames ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Display_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"xz") ) { xz=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yz") ) { yz=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"red") ) { red=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"blue") ) { blue=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"green") ) { green=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { alpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xOffset") ) { xOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yOffset") ) { yOffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isVisible") ) { isVisible=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"peoteView") ) { peoteView=inValue.Cast<  ::peote::view::PeoteView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fbTexture") ) { fbTexture=inValue.Cast<  ::peote::view::Texture >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"programList") ) { programList=inValue.Cast<  ::peote::view::utils::RenderList_peote_view_Program >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundAlpha") ) { backgroundAlpha=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundDepth") ) { backgroundDepth=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"programListItem") ) { programListItem=inValue.Cast<  ::peote::view::utils::RenderListItem_peote_view_Program >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"backgroundEnabled") ) { backgroundEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"framebufferTextureSlot") ) { framebufferTextureSlot=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderFramebufferFrame") ) { renderFramebufferFrame=inValue.Cast< int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_renderFramebufferEnabled") ) { _renderFramebufferEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"renderFramebufferSkipFrames") ) { renderFramebufferSkipFrames=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Display_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("xOffset",2b,b6,e3,12));
	outFields->push(HX_("yOffset",ec,2c,79,3c));
	outFields->push(HX_("xz",02,69,00,00));
	outFields->push(HX_("yz",e1,69,00,00));
	outFields->push(HX_("isVisible",a8,f5,22,a7));
	outFields->push(HX_("backgroundAlpha",90,84,81,e4));
	outFields->push(HX_("backgroundDepth",35,ce,14,9a));
	outFields->push(HX_("backgroundEnabled",33,12,73,f7));
	outFields->push(HX_("red",51,d9,56,00));
	outFields->push(HX_("green",c3,0e,ed,99));
	outFields->push(HX_("blue",9a,42,19,41));
	outFields->push(HX_("alpha",5e,a7,96,21));
	outFields->push(HX_("peoteView",d0,44,5a,a4));
	outFields->push(HX_("gl",25,5a,00,00));
	outFields->push(HX_("programList",02,25,d7,be));
	outFields->push(HX_("fbTexture",ff,76,b1,5d));
	outFields->push(HX_("framebufferTextureSlot",8c,5c,88,54));
	outFields->push(HX_("_renderFramebufferEnabled",69,41,4e,c9));
	outFields->push(HX_("renderFramebufferSkipFrames",9c,e7,f9,17));
	outFields->push(HX_("renderFramebufferFrame",76,ab,07,68));
	outFields->push(HX_("programListItem",35,bf,33,a1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Display_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Display_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(Display_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsInt,(int)offsetof(Display_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(Display_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Display_obj,xOffset),HX_("xOffset",2b,b6,e3,12)},
	{::hx::fsFloat,(int)offsetof(Display_obj,yOffset),HX_("yOffset",ec,2c,79,3c)},
	{::hx::fsFloat,(int)offsetof(Display_obj,xz),HX_("xz",02,69,00,00)},
	{::hx::fsFloat,(int)offsetof(Display_obj,yz),HX_("yz",e1,69,00,00)},
	{::hx::fsBool,(int)offsetof(Display_obj,isVisible),HX_("isVisible",a8,f5,22,a7)},
	{::hx::fsBool,(int)offsetof(Display_obj,backgroundAlpha),HX_("backgroundAlpha",90,84,81,e4)},
	{::hx::fsBool,(int)offsetof(Display_obj,backgroundDepth),HX_("backgroundDepth",35,ce,14,9a)},
	{::hx::fsBool,(int)offsetof(Display_obj,backgroundEnabled),HX_("backgroundEnabled",33,12,73,f7)},
	{::hx::fsFloat,(int)offsetof(Display_obj,red),HX_("red",51,d9,56,00)},
	{::hx::fsFloat,(int)offsetof(Display_obj,green),HX_("green",c3,0e,ed,99)},
	{::hx::fsFloat,(int)offsetof(Display_obj,blue),HX_("blue",9a,42,19,41)},
	{::hx::fsFloat,(int)offsetof(Display_obj,alpha),HX_("alpha",5e,a7,96,21)},
	{::hx::fsObject /*  ::peote::view::PeoteView */ ,(int)offsetof(Display_obj,peoteView),HX_("peoteView",d0,44,5a,a4)},
	{::hx::fsObject /*  ::lime::_internal::backend::native::NativeOpenGLRenderContext */ ,(int)offsetof(Display_obj,gl),HX_("gl",25,5a,00,00)},
	{::hx::fsObject /*  ::peote::view::utils::RenderList_peote_view_Program */ ,(int)offsetof(Display_obj,programList),HX_("programList",02,25,d7,be)},
	{::hx::fsObject /*  ::peote::view::Texture */ ,(int)offsetof(Display_obj,fbTexture),HX_("fbTexture",ff,76,b1,5d)},
	{::hx::fsInt,(int)offsetof(Display_obj,framebufferTextureSlot),HX_("framebufferTextureSlot",8c,5c,88,54)},
	{::hx::fsBool,(int)offsetof(Display_obj,_renderFramebufferEnabled),HX_("_renderFramebufferEnabled",69,41,4e,c9)},
	{::hx::fsInt,(int)offsetof(Display_obj,renderFramebufferSkipFrames),HX_("renderFramebufferSkipFrames",9c,e7,f9,17)},
	{::hx::fsInt,(int)offsetof(Display_obj,renderFramebufferFrame),HX_("renderFramebufferFrame",76,ab,07,68)},
	{::hx::fsObject /*  ::peote::view::utils::RenderListItem_peote_view_Program */ ,(int)offsetof(Display_obj,programListItem),HX_("programListItem",35,bf,33,a1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Display_obj_sStaticStorageInfo = 0;
#endif

static ::String Display_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("xOffset",2b,b6,e3,12),
	HX_("yOffset",ec,2c,79,3c),
	HX_("xz",02,69,00,00),
	HX_("yz",e1,69,00,00),
	HX_("isVisible",a8,f5,22,a7),
	HX_("backgroundAlpha",90,84,81,e4),
	HX_("backgroundDepth",35,ce,14,9a),
	HX_("backgroundEnabled",33,12,73,f7),
	HX_("red",51,d9,56,00),
	HX_("green",c3,0e,ed,99),
	HX_("blue",9a,42,19,41),
	HX_("alpha",5e,a7,96,21),
	HX_("peoteView",d0,44,5a,a4),
	HX_("gl",25,5a,00,00),
	HX_("programList",02,25,d7,be),
	HX_("fbTexture",ff,76,b1,5d),
	HX_("addToPeoteView",34,bf,16,a1),
	HX_("setNewGLContext",ac,b4,0b,fc),
	HX_("addProgram",63,76,83,5b),
	HX_("framebufferTextureSlot",8c,5c,88,54),
	HX_("_renderFramebufferEnabled",69,41,4e,c9),
	HX_("renderFramebufferSkipFrames",9c,e7,f9,17),
	HX_("renderFramebufferFrame",76,ab,07,68),
	HX_("programListItem",35,bf,33,a1),
	::String(null()) };

::hx::Class Display_obj::__mClass;

void Display_obj::__register()
{
	Display_obj _hx_dummy;
	Display_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.view.Display",9c,78,84,d1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Display_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Display_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Display_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Display_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace peote
} // end namespace view
