// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_peote_ui_PeoteUIDisplay
#include <peote/ui/PeoteUIDisplay.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_Interactive
#include <peote/ui/interactive/Interactive.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_Pickable
#include <peote/ui/interactive/Pickable.h>
#endif
#ifndef INCLUDED_peote_view_BufferInterface
#include <peote/view/BufferInterface.h>
#endif
#ifndef INCLUDED_peote_view_Buffer_Pickable
#include <peote/view/Buffer_Pickable.h>
#endif
#ifndef INCLUDED_peote_view_Display
#include <peote/view/Display.h>
#endif
#ifndef INCLUDED_peote_view_PeoteView
#include <peote/view/PeoteView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_77_new,"peote.ui.interactive.Interactive","new",0x2d871a51,"peote.ui.interactive.Interactive.new","peote/ui/interactive/Interactive.hx",77,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_91_intoOverOutEventBubbleOf,"peote.ui.interactive.Interactive","intoOverOutEventBubbleOf",0x6d696d32,"peote.ui.interactive.Interactive.intoOverOutEventBubbleOf","peote/ui/interactive/Interactive.hx",91,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_111_intoUpDownEventBubbleOf,"peote.ui.interactive.Interactive","intoUpDownEventBubbleOf",0x24b6f311,"peote.ui.interactive.Interactive.intoUpDownEventBubbleOf","peote/ui/interactive/Interactive.hx",111,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_292_updateLayout,"peote.ui.interactive.Interactive","updateLayout",0xaf32c582,"peote.ui.interactive.Interactive.updateLayout","peote/ui/interactive/Interactive.hx",292,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_298_update,"peote.ui.interactive.Interactive","update",0x3b9248b8,"peote.ui.interactive.Interactive.update","peote/ui/interactive/Interactive.hx",298,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_305_updateVisibleLayout,"peote.ui.interactive.Interactive","updateVisibleLayout",0x1ccf70e4,"peote.ui.interactive.Interactive.updateVisibleLayout","peote/ui/interactive/Interactive.hx",305,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_306_updateVisible,"peote.ui.interactive.Interactive","updateVisible",0xf77e5e9a,"peote.ui.interactive.Interactive.updateVisible","peote/ui/interactive/Interactive.hx",306,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_331_onAddVisibleToDisplay,"peote.ui.interactive.Interactive","onAddVisibleToDisplay",0x21954bc8,"peote.ui.interactive.Interactive.onAddVisibleToDisplay","peote/ui/interactive/Interactive.hx",331,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_344_onRemoveVisibleFromDisplay,"peote.ui.interactive.Interactive","onRemoveVisibleFromDisplay",0x9399f678,"peote.ui.interactive.Interactive.onRemoveVisibleFromDisplay","peote/ui/interactive/Interactive.hx",344,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_409_startDragging,"peote.ui.interactive.Interactive","startDragging",0xc5332082,"peote.ui.interactive.Interactive.startDragging","peote/ui/interactive/Interactive.hx",409,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_418_stopDragging,"peote.ui.interactive.Interactive","stopDragging",0xffa32ae0,"peote.ui.interactive.Interactive.stopDragging","peote/ui/interactive/Interactive.hx",418,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_591_addPickableMove,"peote.ui.interactive.Interactive","addPickableMove",0x0941dede,"peote.ui.interactive.Interactive.addPickableMove","peote/ui/interactive/Interactive.hx",591,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_600_removePickableMove,"peote.ui.interactive.Interactive","removePickableMove",0x77b34f3f,"peote.ui.interactive.Interactive.removePickableMove","peote/ui/interactive/Interactive.hx",600,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_618_addPickableClick,"peote.ui.interactive.Interactive","addPickableClick",0x4c59d3db,"peote.ui.interactive.Interactive.addPickableClick","peote/ui/interactive/Interactive.hx",618,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_627_removePickableClick,"peote.ui.interactive.Interactive","removePickableClick",0x812ab85a,"peote.ui.interactive.Interactive.removePickableClick","peote/ui/interactive/Interactive.hx",627,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_250_noOperation,"peote.ui.interactive.Interactive","noOperation",0x86579697,"peote.ui.interactive.Interactive.noOperation","peote/ui/interactive/Interactive.hx",250,0x2212f8a0)
HX_LOCAL_STACK_FRAME(_hx_pos_464f8a9b20bdecb5_251_noWheelOperation,"peote.ui.interactive.Interactive","noWheelOperation",0xd9895b9c,"peote.ui.interactive.Interactive.noWheelOperation","peote/ui/interactive/Interactive.hx",251,0x2212f8a0)
namespace peote{
namespace ui{
namespace interactive{

void Interactive_obj::__construct(int xPosition,int yPosition,int width,int height,int zIndex){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_77_new)
HXLINE( 373)		this->dragOriginY = 0;
HXLINE( 372)		this->dragOriginX = 0;
HXLINE( 370)		this->isDragging = false;
HXLINE( 368)		this->dragMaxY = 32767;
HXLINE( 367)		this->dragMaxX = 32767;
HXLINE( 366)		this->dragMinY = -32767;
HXLINE( 365)		this->dragMinX = -32767;
HXLINE( 259)		this->resizeHeight = null();
HXLINE( 258)		this->resizeWidth = null();
HXLINE( 254)		this->drag = null();
HXLINE( 248)		this->hasClickEvent = 0;
HXLINE( 231)		this->hasMoveEvent = 0;
HXLINE( 219)		this->maskY = 0;
HXLINE( 218)		this->maskX = 0;
HXLINE( 217)		this->masked = false;
HXLINE( 156)		this->changeZIndex = null();
HXLINE( 120)		this->wheelEventsBubbleTo = null();
HXLINE( 110)		this->upDownEventsBubbleTo = null();
HXLINE( 109)		this->upDownEventsBubbleToDisplay = false;
HXLINE( 100)		this->moveEventsBubbleTo = null();
HXLINE(  99)		this->moveEventsBubbleToDisplay = false;
HXLINE(  90)		this->overOutEventsBubbleTo = null();
HXLINE(  89)		this->overOutEventsBubbleToDisplay = true;
HXLINE(  87)		this->pickableClick = null();
HXLINE(  86)		this->pickableMove = null();
HXLINE(  84)		this->isVisible = false;
HXLINE(  83)		this->uiDisplay = null();
HXLINE( 263)		this->x = xPosition;
HXLINE( 264)		this->y = yPosition;
HXLINE( 266)		if ((width != this->width)) {
HXLINE( 266)			if (::hx::IsNotNull( this->resizeWidth )) {
HXLINE( 266)				int oldWidth = this->width;
HXDLIN( 266)				this->resizeWidth((this->width = width),(width - oldWidth));
            			}
            			else {
HXLINE( 266)				this->width = width;
            			}
            		}
HXLINE( 267)		if ((height != this->height)) {
HXLINE( 267)			if (::hx::IsNotNull( this->resizeHeight )) {
HXLINE( 267)				int oldHeight = this->height;
HXDLIN( 267)				this->resizeHeight((this->height = height),(height - oldHeight));
            			}
            			else {
HXLINE( 267)				this->height = height;
            			}
            		}
HXLINE( 270)		this->maskWidth = width;
HXLINE( 271)		this->maskHeight = height;
HXLINE( 273)		if ((zIndex != this->z)) {
HXLINE( 273)			if (::hx::IsNotNull( this->changeZIndex )) {
HXLINE( 273)				int oldZ = this->z;
HXDLIN( 273)				this->changeZIndex((this->z = zIndex),(zIndex - oldZ));
            			}
            			else {
HXLINE( 273)				this->z = zIndex;
            			}
            		}
HXLINE( 275)		this->pointerOver = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
HXLINE( 276)		this->pointerOut = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
HXLINE( 277)		this->pointerMove = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
HXLINE( 278)		this->mouseWheel = ::peote::ui::interactive::Interactive_obj::noWheelOperation_dyn();
HXLINE( 280)		this->pointerDown = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
HXLINE( 281)		this->pointerUp = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
HXLINE( 282)		this->pointerClick = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
            	}

Dynamic Interactive_obj::__CreateEmpty() { return new Interactive_obj; }

void *Interactive_obj::_hx_vtable = 0;

Dynamic Interactive_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Interactive_obj > _hx_result = new Interactive_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Interactive_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x314a7f1b;
}

bool Interactive_obj::intoOverOutEventBubbleOf( ::peote::ui::interactive::Interactive e){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_91_intoOverOutEventBubbleOf)
HXLINE(  92)		while(::hx::IsNotNull( e->overOutEventsBubbleTo )){
HXLINE(  93)			if (::hx::IsInstanceEq( e->overOutEventsBubbleTo,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  93)				return true;
            			}
HXLINE(  94)			e = e->overOutEventsBubbleTo;
            		}
HXLINE(  96)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interactive_obj,intoOverOutEventBubbleOf,return )

bool Interactive_obj::intoUpDownEventBubbleOf( ::peote::ui::interactive::Interactive e){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_111_intoUpDownEventBubbleOf)
HXLINE( 112)		while(::hx::IsNotNull( e->upDownEventsBubbleTo )){
HXLINE( 113)			if (::hx::IsInstanceEq( e->upDownEventsBubbleTo,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 113)				return true;
            			}
HXLINE( 114)			e = e->upDownEventsBubbleTo;
            		}
HXLINE( 116)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interactive_obj,intoUpDownEventBubbleOf,return )

void Interactive_obj::updateLayout(){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_292_updateLayout)
HXLINE( 293)		this->updateVisibleLayout();
HXLINE( 294)		{
HXLINE( 294)			if ((this->hasMoveEvent != 0)) {
HXLINE( 294)				{
HXLINE( 294)					 ::peote::ui::interactive::Pickable _this = this->pickableMove;
HXDLIN( 294)					_this->uiElement = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 294)					_this->z = this->z;
HXDLIN( 294)					if (this->masked) {
HXLINE( 294)						_this->x = (this->x + this->maskX);
HXDLIN( 294)						_this->y = (this->y + this->maskY);
HXDLIN( 294)						_this->w = this->maskWidth;
HXDLIN( 294)						_this->h = this->maskHeight;
            					}
            					else {
HXLINE( 294)						_this->x = this->x;
HXDLIN( 294)						_this->y = this->y;
HXDLIN( 294)						_this->w = this->width;
HXDLIN( 294)						_this->h = this->height;
            					}
            				}
HXDLIN( 294)				if (this->isVisible) {
HXLINE( 294)					this->uiDisplay->movePickBuffer->updateElement(this->pickableMove);
            				}
            			}
HXDLIN( 294)			if ((this->hasClickEvent != 0)) {
HXLINE( 294)				{
HXLINE( 294)					 ::peote::ui::interactive::Pickable _this1 = this->pickableClick;
HXDLIN( 294)					_this1->uiElement = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 294)					_this1->z = this->z;
HXDLIN( 294)					if (this->masked) {
HXLINE( 294)						_this1->x = (this->x + this->maskX);
HXDLIN( 294)						_this1->y = (this->y + this->maskY);
HXDLIN( 294)						_this1->w = this->maskWidth;
HXDLIN( 294)						_this1->h = this->maskHeight;
            					}
            					else {
HXLINE( 294)						_this1->x = this->x;
HXDLIN( 294)						_this1->y = this->y;
HXDLIN( 294)						_this1->w = this->width;
HXDLIN( 294)						_this1->h = this->height;
            					}
            				}
HXDLIN( 294)				if (this->isVisible) {
HXLINE( 294)					this->uiDisplay->clickPickBuffer->updateElement(this->pickableClick);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interactive_obj,updateLayout,(void))

void Interactive_obj::update(){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_298_update)
HXLINE( 299)		this->updateVisible();
HXLINE( 300)		{
HXLINE( 300)			if ((this->hasMoveEvent != 0)) {
HXLINE( 300)				{
HXLINE( 300)					 ::peote::ui::interactive::Pickable _this = this->pickableMove;
HXDLIN( 300)					_this->uiElement = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 300)					_this->z = this->z;
HXDLIN( 300)					if (this->masked) {
HXLINE( 300)						_this->x = (this->x + this->maskX);
HXDLIN( 300)						_this->y = (this->y + this->maskY);
HXDLIN( 300)						_this->w = this->maskWidth;
HXDLIN( 300)						_this->h = this->maskHeight;
            					}
            					else {
HXLINE( 300)						_this->x = this->x;
HXDLIN( 300)						_this->y = this->y;
HXDLIN( 300)						_this->w = this->width;
HXDLIN( 300)						_this->h = this->height;
            					}
            				}
HXDLIN( 300)				if (this->isVisible) {
HXLINE( 300)					this->uiDisplay->movePickBuffer->updateElement(this->pickableMove);
            				}
            			}
HXDLIN( 300)			if ((this->hasClickEvent != 0)) {
HXLINE( 300)				{
HXLINE( 300)					 ::peote::ui::interactive::Pickable _this1 = this->pickableClick;
HXDLIN( 300)					_this1->uiElement = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 300)					_this1->z = this->z;
HXDLIN( 300)					if (this->masked) {
HXLINE( 300)						_this1->x = (this->x + this->maskX);
HXDLIN( 300)						_this1->y = (this->y + this->maskY);
HXDLIN( 300)						_this1->w = this->maskWidth;
HXDLIN( 300)						_this1->h = this->maskHeight;
            					}
            					else {
HXLINE( 300)						_this1->x = this->x;
HXDLIN( 300)						_this1->y = this->y;
HXDLIN( 300)						_this1->w = this->width;
HXDLIN( 300)						_this1->h = this->height;
            					}
            				}
HXDLIN( 300)				if (this->isVisible) {
HXLINE( 300)					this->uiDisplay->clickPickBuffer->updateElement(this->pickableClick);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interactive_obj,update,(void))

void Interactive_obj::updateVisibleLayout(){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_305_updateVisibleLayout)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interactive_obj,updateVisibleLayout,(void))

void Interactive_obj::updateVisible(){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_306_updateVisible)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interactive_obj,updateVisible,(void))

void Interactive_obj::onAddVisibleToDisplay(){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_331_onAddVisibleToDisplay)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interactive_obj,onAddVisibleToDisplay,(void))

void Interactive_obj::onRemoveVisibleFromDisplay(){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_344_onRemoveVisibleFromDisplay)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interactive_obj,onRemoveVisibleFromDisplay,(void))

void Interactive_obj::startDragging( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_409_startDragging)
HXDLIN( 409)		if (this->isVisible) {
HXLINE( 410)			int _hx_tmp = ::Std_obj::_hx_int(((( (Float)(e->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) ) / this->uiDisplay->peoteView->xz) / this->uiDisplay->xz));
HXDLIN( 410)			this->dragOriginX = (_hx_tmp - this->x);
HXLINE( 411)			int _hx_tmp1 = ::Std_obj::_hx_int(((( (Float)(e->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ) / this->uiDisplay->peoteView->yz) / this->uiDisplay->yz));
HXDLIN( 411)			this->dragOriginY = (_hx_tmp1 - this->y);
HXLINE( 412)			this->uiDisplay->startDraggingElement(::hx::ObjectPtr<OBJ_>(this),e);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interactive_obj,startDragging,(void))

void Interactive_obj::stopDragging( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_418_stopDragging)
HXDLIN( 418)		if (this->isVisible) {
HXDLIN( 418)			this->uiDisplay->stopDraggingElement(::hx::ObjectPtr<OBJ_>(this),e);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interactive_obj,stopDragging,(void))

void Interactive_obj::addPickableMove(){
            	HX_GC_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_591_addPickableMove)
HXLINE( 593)		if (::hx::IsNull( this->pickableMove )) {
HXLINE( 593)			this->pickableMove =  ::peote::ui::interactive::Pickable_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 594)		if (this->isVisible) {
HXLINE( 594)			this->uiDisplay->movePickBuffer->addElement(this->pickableMove);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interactive_obj,addPickableMove,(void))

void Interactive_obj::removePickableMove(){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_600_removePickableMove)
HXDLIN( 600)		if (this->isVisible) {
HXLINE( 601)			int index = this->uiDisplay->movePickBuffer->getElementIndex(this->pickableMove);
HXLINE( 603)			if ((index < (this->uiDisplay->movePickBuffer->_maxElements - 1))) {
HXLINE( 604)				bool _hx_tmp;
HXDLIN( 604)				if (this->uiDisplay->mouseEnabled) {
HXLINE( 604)					_hx_tmp = (this->uiDisplay->lastMouseOverIndex == (this->uiDisplay->movePickBuffer->_maxElements - 1));
            				}
            				else {
HXLINE( 604)					_hx_tmp = false;
            				}
HXDLIN( 604)				if (_hx_tmp) {
HXLINE( 605)					this->uiDisplay->lastMouseOverIndex = index;
            				}
HXLINE( 606)				if (this->uiDisplay->touchEnabled) {
HXLINE( 607)					int _g = 0;
HXDLIN( 607)					int _g1 = this->uiDisplay->lastTouchOverIndex->length;
HXDLIN( 607)					while((_g < _g1)){
HXLINE( 607)						_g = (_g + 1);
HXDLIN( 607)						int i = (_g - 1);
HXLINE( 608)						int _hx_tmp1 = ( (int)(_hx_array_unsafe_get(this->uiDisplay->lastTouchOverIndex,i)) );
HXDLIN( 608)						if ((_hx_tmp1 == (this->uiDisplay->movePickBuffer->_maxElements - 1))) {
HXLINE( 609)							this->uiDisplay->lastTouchOverIndex->__unsafe_set(i,index);
            						}
            					}
            				}
            			}
HXLINE( 613)			this->uiDisplay->movePickBuffer->removeElement(this->pickableMove);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interactive_obj,removePickableMove,(void))

void Interactive_obj::addPickableClick(){
            	HX_GC_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_618_addPickableClick)
HXLINE( 620)		if (::hx::IsNull( this->pickableClick )) {
HXLINE( 620)			this->pickableClick =  ::peote::ui::interactive::Pickable_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 621)		if (this->isVisible) {
HXLINE( 621)			this->uiDisplay->clickPickBuffer->addElement(this->pickableClick);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interactive_obj,addPickableClick,(void))

void Interactive_obj::removePickableClick(){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_627_removePickableClick)
HXDLIN( 627)		if (this->isVisible) {
HXLINE( 628)			int index = this->uiDisplay->clickPickBuffer->getElementIndex(this->pickableClick);
HXLINE( 630)			if ((index < (this->uiDisplay->clickPickBuffer->_maxElements - 1))) {
HXLINE( 631)				if (this->uiDisplay->mouseEnabled) {
HXLINE( 632)					int _g = 0;
HXDLIN( 632)					int _g1 = this->uiDisplay->lastMouseDownIndex->length;
HXDLIN( 632)					while((_g < _g1)){
HXLINE( 632)						_g = (_g + 1);
HXDLIN( 632)						int i = (_g - 1);
HXLINE( 633)						int _hx_tmp = ( (int)(_hx_array_unsafe_get(this->uiDisplay->lastMouseDownIndex,i)) );
HXDLIN( 633)						if ((_hx_tmp == (this->uiDisplay->clickPickBuffer->_maxElements - 1))) {
HXLINE( 634)							this->uiDisplay->lastMouseDownIndex->__unsafe_set(i,index);
            						}
            					}
            				}
HXLINE( 637)				if (this->uiDisplay->touchEnabled) {
HXLINE( 638)					int _g2 = 0;
HXDLIN( 638)					int _g3 = this->uiDisplay->lastTouchDownIndex->length;
HXDLIN( 638)					while((_g2 < _g3)){
HXLINE( 638)						_g2 = (_g2 + 1);
HXDLIN( 638)						int i1 = (_g2 - 1);
HXLINE( 639)						int _hx_tmp1 = ( (int)(_hx_array_unsafe_get(this->uiDisplay->lastTouchDownIndex,i1)) );
HXDLIN( 639)						if ((_hx_tmp1 == (this->uiDisplay->clickPickBuffer->_maxElements - 1))) {
HXLINE( 640)							this->uiDisplay->lastTouchDownIndex->__unsafe_set(i1,index);
            						}
            					}
            				}
            			}
HXLINE( 644)			this->uiDisplay->clickPickBuffer->removeElement(this->pickableClick);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interactive_obj,removePickableClick,(void))

void Interactive_obj::noOperation( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_250_noOperation)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Interactive_obj,noOperation,(void))

void Interactive_obj::noWheelOperation( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_464f8a9b20bdecb5_251_noWheelOperation)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Interactive_obj,noWheelOperation,(void))


::hx::ObjectPtr< Interactive_obj > Interactive_obj::__new(int xPosition,int yPosition,int width,int height,int zIndex) {
	::hx::ObjectPtr< Interactive_obj > __this = new Interactive_obj();
	__this->__construct(xPosition,yPosition,width,height,zIndex);
	return __this;
}

::hx::ObjectPtr< Interactive_obj > Interactive_obj::__alloc(::hx::Ctx *_hx_ctx,int xPosition,int yPosition,int width,int height,int zIndex) {
	Interactive_obj *__this = (Interactive_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Interactive_obj), true, "peote.ui.interactive.Interactive"));
	*(void **)__this = Interactive_obj::_hx_vtable;
	__this->__construct(xPosition,yPosition,width,height,zIndex);
	return __this;
}

Interactive_obj::Interactive_obj()
{
}

void Interactive_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Interactive);
	HX_MARK_MEMBER_NAME(uiDisplay,"uiDisplay");
	HX_MARK_MEMBER_NAME(isVisible,"isVisible");
	HX_MARK_MEMBER_NAME(pickableMove,"pickableMove");
	HX_MARK_MEMBER_NAME(pickableClick,"pickableClick");
	HX_MARK_MEMBER_NAME(overOutEventsBubbleToDisplay,"overOutEventsBubbleToDisplay");
	HX_MARK_MEMBER_NAME(overOutEventsBubbleTo,"overOutEventsBubbleTo");
	HX_MARK_MEMBER_NAME(moveEventsBubbleToDisplay,"moveEventsBubbleToDisplay");
	HX_MARK_MEMBER_NAME(moveEventsBubbleTo,"moveEventsBubbleTo");
	HX_MARK_MEMBER_NAME(upDownEventsBubbleToDisplay,"upDownEventsBubbleToDisplay");
	HX_MARK_MEMBER_NAME(upDownEventsBubbleTo,"upDownEventsBubbleTo");
	HX_MARK_MEMBER_NAME(wheelEventsBubbleTo,"wheelEventsBubbleTo");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(z,"z");
	HX_MARK_MEMBER_NAME(changeZIndex,"changeZIndex");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(masked,"masked");
	HX_MARK_MEMBER_NAME(maskX,"maskX");
	HX_MARK_MEMBER_NAME(maskY,"maskY");
	HX_MARK_MEMBER_NAME(maskWidth,"maskWidth");
	HX_MARK_MEMBER_NAME(maskHeight,"maskHeight");
	HX_MARK_MEMBER_NAME(pointerOver,"pointerOver");
	HX_MARK_MEMBER_NAME(pointerOut,"pointerOut");
	HX_MARK_MEMBER_NAME(pointerMove,"pointerMove");
	HX_MARK_MEMBER_NAME(mouseWheel,"mouseWheel");
	HX_MARK_MEMBER_NAME(hasMoveEvent,"hasMoveEvent");
	HX_MARK_MEMBER_NAME(pointerUp,"pointerUp");
	HX_MARK_MEMBER_NAME(pointerDown,"pointerDown");
	HX_MARK_MEMBER_NAME(pointerClick,"pointerClick");
	HX_MARK_MEMBER_NAME(hasClickEvent,"hasClickEvent");
	HX_MARK_MEMBER_NAME(drag,"drag");
	HX_MARK_MEMBER_NAME(resizeWidth,"resizeWidth");
	HX_MARK_MEMBER_NAME(resizeHeight,"resizeHeight");
	HX_MARK_MEMBER_NAME(dragMinX,"dragMinX");
	HX_MARK_MEMBER_NAME(dragMinY,"dragMinY");
	HX_MARK_MEMBER_NAME(dragMaxX,"dragMaxX");
	HX_MARK_MEMBER_NAME(dragMaxY,"dragMaxY");
	HX_MARK_MEMBER_NAME(isDragging,"isDragging");
	HX_MARK_MEMBER_NAME(dragOriginX,"dragOriginX");
	HX_MARK_MEMBER_NAME(dragOriginY,"dragOriginY");
	HX_MARK_END_CLASS();
}

void Interactive_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(uiDisplay,"uiDisplay");
	HX_VISIT_MEMBER_NAME(isVisible,"isVisible");
	HX_VISIT_MEMBER_NAME(pickableMove,"pickableMove");
	HX_VISIT_MEMBER_NAME(pickableClick,"pickableClick");
	HX_VISIT_MEMBER_NAME(overOutEventsBubbleToDisplay,"overOutEventsBubbleToDisplay");
	HX_VISIT_MEMBER_NAME(overOutEventsBubbleTo,"overOutEventsBubbleTo");
	HX_VISIT_MEMBER_NAME(moveEventsBubbleToDisplay,"moveEventsBubbleToDisplay");
	HX_VISIT_MEMBER_NAME(moveEventsBubbleTo,"moveEventsBubbleTo");
	HX_VISIT_MEMBER_NAME(upDownEventsBubbleToDisplay,"upDownEventsBubbleToDisplay");
	HX_VISIT_MEMBER_NAME(upDownEventsBubbleTo,"upDownEventsBubbleTo");
	HX_VISIT_MEMBER_NAME(wheelEventsBubbleTo,"wheelEventsBubbleTo");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(z,"z");
	HX_VISIT_MEMBER_NAME(changeZIndex,"changeZIndex");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(masked,"masked");
	HX_VISIT_MEMBER_NAME(maskX,"maskX");
	HX_VISIT_MEMBER_NAME(maskY,"maskY");
	HX_VISIT_MEMBER_NAME(maskWidth,"maskWidth");
	HX_VISIT_MEMBER_NAME(maskHeight,"maskHeight");
	HX_VISIT_MEMBER_NAME(pointerOver,"pointerOver");
	HX_VISIT_MEMBER_NAME(pointerOut,"pointerOut");
	HX_VISIT_MEMBER_NAME(pointerMove,"pointerMove");
	HX_VISIT_MEMBER_NAME(mouseWheel,"mouseWheel");
	HX_VISIT_MEMBER_NAME(hasMoveEvent,"hasMoveEvent");
	HX_VISIT_MEMBER_NAME(pointerUp,"pointerUp");
	HX_VISIT_MEMBER_NAME(pointerDown,"pointerDown");
	HX_VISIT_MEMBER_NAME(pointerClick,"pointerClick");
	HX_VISIT_MEMBER_NAME(hasClickEvent,"hasClickEvent");
	HX_VISIT_MEMBER_NAME(drag,"drag");
	HX_VISIT_MEMBER_NAME(resizeWidth,"resizeWidth");
	HX_VISIT_MEMBER_NAME(resizeHeight,"resizeHeight");
	HX_VISIT_MEMBER_NAME(dragMinX,"dragMinX");
	HX_VISIT_MEMBER_NAME(dragMinY,"dragMinY");
	HX_VISIT_MEMBER_NAME(dragMaxX,"dragMaxX");
	HX_VISIT_MEMBER_NAME(dragMaxY,"dragMaxY");
	HX_VISIT_MEMBER_NAME(isDragging,"isDragging");
	HX_VISIT_MEMBER_NAME(dragOriginX,"dragOriginX");
	HX_VISIT_MEMBER_NAME(dragOriginY,"dragOriginY");
}

::hx::Val Interactive_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return ::hx::Val( z ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"drag") ) { return ::hx::Val( drag ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"maskX") ) { return ::hx::Val( maskX ); }
		if (HX_FIELD_EQ(inName,"maskY") ) { return ::hx::Val( maskY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"masked") ) { return ::hx::Val( masked ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dragMinX") ) { return ::hx::Val( dragMinX ); }
		if (HX_FIELD_EQ(inName,"dragMinY") ) { return ::hx::Val( dragMinY ); }
		if (HX_FIELD_EQ(inName,"dragMaxX") ) { return ::hx::Val( dragMaxX ); }
		if (HX_FIELD_EQ(inName,"dragMaxY") ) { return ::hx::Val( dragMaxY ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"uiDisplay") ) { return ::hx::Val( uiDisplay ); }
		if (HX_FIELD_EQ(inName,"isVisible") ) { return ::hx::Val( isVisible ); }
		if (HX_FIELD_EQ(inName,"maskWidth") ) { return ::hx::Val( maskWidth ); }
		if (HX_FIELD_EQ(inName,"pointerUp") ) { return ::hx::Val( pointerUp ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maskHeight") ) { return ::hx::Val( maskHeight ); }
		if (HX_FIELD_EQ(inName,"pointerOut") ) { return ::hx::Val( pointerOut ); }
		if (HX_FIELD_EQ(inName,"mouseWheel") ) { return ::hx::Val( mouseWheel ); }
		if (HX_FIELD_EQ(inName,"isDragging") ) { return ::hx::Val( isDragging ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pointerOver") ) { return ::hx::Val( pointerOver ); }
		if (HX_FIELD_EQ(inName,"pointerMove") ) { return ::hx::Val( pointerMove ); }
		if (HX_FIELD_EQ(inName,"pointerDown") ) { return ::hx::Val( pointerDown ); }
		if (HX_FIELD_EQ(inName,"resizeWidth") ) { return ::hx::Val( resizeWidth ); }
		if (HX_FIELD_EQ(inName,"dragOriginX") ) { return ::hx::Val( dragOriginX ); }
		if (HX_FIELD_EQ(inName,"dragOriginY") ) { return ::hx::Val( dragOriginY ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pickableMove") ) { return ::hx::Val( pickableMove ); }
		if (HX_FIELD_EQ(inName,"changeZIndex") ) { return ::hx::Val( changeZIndex ); }
		if (HX_FIELD_EQ(inName,"hasMoveEvent") ) { return ::hx::Val( hasMoveEvent ); }
		if (HX_FIELD_EQ(inName,"pointerClick") ) { return ::hx::Val( pointerClick ); }
		if (HX_FIELD_EQ(inName,"resizeHeight") ) { return ::hx::Val( resizeHeight ); }
		if (HX_FIELD_EQ(inName,"updateLayout") ) { return ::hx::Val( updateLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopDragging") ) { return ::hx::Val( stopDragging_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pickableClick") ) { return ::hx::Val( pickableClick ); }
		if (HX_FIELD_EQ(inName,"hasClickEvent") ) { return ::hx::Val( hasClickEvent ); }
		if (HX_FIELD_EQ(inName,"updateVisible") ) { return ::hx::Val( updateVisible_dyn() ); }
		if (HX_FIELD_EQ(inName,"startDragging") ) { return ::hx::Val( startDragging_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"addPickableMove") ) { return ::hx::Val( addPickableMove_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addPickableClick") ) { return ::hx::Val( addPickableClick_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"moveEventsBubbleTo") ) { return ::hx::Val( moveEventsBubbleTo ); }
		if (HX_FIELD_EQ(inName,"removePickableMove") ) { return ::hx::Val( removePickableMove_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"wheelEventsBubbleTo") ) { return ::hx::Val( wheelEventsBubbleTo ); }
		if (HX_FIELD_EQ(inName,"updateVisibleLayout") ) { return ::hx::Val( updateVisibleLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"removePickableClick") ) { return ::hx::Val( removePickableClick_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"upDownEventsBubbleTo") ) { return ::hx::Val( upDownEventsBubbleTo ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"overOutEventsBubbleTo") ) { return ::hx::Val( overOutEventsBubbleTo ); }
		if (HX_FIELD_EQ(inName,"onAddVisibleToDisplay") ) { return ::hx::Val( onAddVisibleToDisplay_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"intoUpDownEventBubbleOf") ) { return ::hx::Val( intoUpDownEventBubbleOf_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"intoOverOutEventBubbleOf") ) { return ::hx::Val( intoOverOutEventBubbleOf_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"moveEventsBubbleToDisplay") ) { return ::hx::Val( moveEventsBubbleToDisplay ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"onRemoveVisibleFromDisplay") ) { return ::hx::Val( onRemoveVisibleFromDisplay_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"upDownEventsBubbleToDisplay") ) { return ::hx::Val( upDownEventsBubbleToDisplay ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"overOutEventsBubbleToDisplay") ) { return ::hx::Val( overOutEventsBubbleToDisplay ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Interactive_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"noOperation") ) { outValue = noOperation_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"noWheelOperation") ) { outValue = noWheelOperation_dyn(); return true; }
	}
	return false;
}

::hx::Val Interactive_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"drag") ) { drag=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maskX") ) { maskX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maskY") ) { maskY=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"masked") ) { masked=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dragMinX") ) { dragMinX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragMinY") ) { dragMinY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragMaxX") ) { dragMaxX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragMaxY") ) { dragMaxY=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"uiDisplay") ) { uiDisplay=inValue.Cast<  ::peote::ui::PeoteUIDisplay >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isVisible") ) { isVisible=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maskWidth") ) { maskWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerUp") ) { pointerUp=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maskHeight") ) { maskHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerOut") ) { pointerOut=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseWheel") ) { mouseWheel=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDragging") ) { isDragging=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pointerOver") ) { pointerOver=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerMove") ) { pointerMove=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerDown") ) { pointerDown=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resizeWidth") ) { resizeWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragOriginX") ) { dragOriginX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragOriginY") ) { dragOriginY=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pickableMove") ) { pickableMove=inValue.Cast<  ::peote::ui::interactive::Pickable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"changeZIndex") ) { changeZIndex=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasMoveEvent") ) { hasMoveEvent=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerClick") ) { pointerClick=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resizeHeight") ) { resizeHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pickableClick") ) { pickableClick=inValue.Cast<  ::peote::ui::interactive::Pickable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasClickEvent") ) { hasClickEvent=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"moveEventsBubbleTo") ) { moveEventsBubbleTo=inValue.Cast<  ::peote::ui::interactive::Interactive >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"wheelEventsBubbleTo") ) { wheelEventsBubbleTo=inValue.Cast<  ::peote::ui::interactive::Interactive >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"upDownEventsBubbleTo") ) { upDownEventsBubbleTo=inValue.Cast<  ::peote::ui::interactive::Interactive >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"overOutEventsBubbleTo") ) { overOutEventsBubbleTo=inValue.Cast<  ::peote::ui::interactive::Interactive >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"moveEventsBubbleToDisplay") ) { moveEventsBubbleToDisplay=inValue.Cast< bool >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"upDownEventsBubbleToDisplay") ) { upDownEventsBubbleToDisplay=inValue.Cast< bool >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"overOutEventsBubbleToDisplay") ) { overOutEventsBubbleToDisplay=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Interactive_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("uiDisplay",4e,1e,a1,66));
	outFields->push(HX_("isVisible",a8,f5,22,a7));
	outFields->push(HX_("pickableMove",ac,83,3f,47));
	outFields->push(HX_("pickableClick",4d,63,4c,4c));
	outFields->push(HX_("overOutEventsBubbleToDisplay",c8,67,bf,c6));
	outFields->push(HX_("overOutEventsBubbleTo",9a,b1,9c,56));
	outFields->push(HX_("moveEventsBubbleToDisplay",f1,0a,89,e5));
	outFields->push(HX_("moveEventsBubbleTo",51,c3,b6,ab));
	outFields->push(HX_("upDownEventsBubbleToDisplay",25,0e,13,75));
	outFields->push(HX_("upDownEventsBubbleTo",9d,61,76,bf));
	outFields->push(HX_("wheelEventsBubbleTo",5b,f2,ff,63));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("masked",4b,ac,19,bb));
	outFields->push(HX_("maskX",ec,8d,22,03));
	outFields->push(HX_("maskY",ed,8d,22,03));
	outFields->push(HX_("maskWidth",7a,0d,cb,50));
	outFields->push(HX_("maskHeight",f3,35,30,17));
	outFields->push(HX_("hasMoveEvent",8f,7c,dd,c0));
	outFields->push(HX_("hasClickEvent",ac,ee,9a,d0));
	outFields->push(HX_("dragMinX",9a,b0,5c,26));
	outFields->push(HX_("dragMinY",9b,b0,5c,26));
	outFields->push(HX_("dragMaxX",48,a7,56,26));
	outFields->push(HX_("dragMaxY",49,a7,56,26));
	outFields->push(HX_("isDragging",d9,4e,3b,b2));
	outFields->push(HX_("dragOriginX",1e,b2,16,0c));
	outFields->push(HX_("dragOriginY",1f,b2,16,0c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Interactive_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::peote::ui::PeoteUIDisplay */ ,(int)offsetof(Interactive_obj,uiDisplay),HX_("uiDisplay",4e,1e,a1,66)},
	{::hx::fsBool,(int)offsetof(Interactive_obj,isVisible),HX_("isVisible",a8,f5,22,a7)},
	{::hx::fsObject /*  ::peote::ui::interactive::Pickable */ ,(int)offsetof(Interactive_obj,pickableMove),HX_("pickableMove",ac,83,3f,47)},
	{::hx::fsObject /*  ::peote::ui::interactive::Pickable */ ,(int)offsetof(Interactive_obj,pickableClick),HX_("pickableClick",4d,63,4c,4c)},
	{::hx::fsBool,(int)offsetof(Interactive_obj,overOutEventsBubbleToDisplay),HX_("overOutEventsBubbleToDisplay",c8,67,bf,c6)},
	{::hx::fsObject /*  ::peote::ui::interactive::Interactive */ ,(int)offsetof(Interactive_obj,overOutEventsBubbleTo),HX_("overOutEventsBubbleTo",9a,b1,9c,56)},
	{::hx::fsBool,(int)offsetof(Interactive_obj,moveEventsBubbleToDisplay),HX_("moveEventsBubbleToDisplay",f1,0a,89,e5)},
	{::hx::fsObject /*  ::peote::ui::interactive::Interactive */ ,(int)offsetof(Interactive_obj,moveEventsBubbleTo),HX_("moveEventsBubbleTo",51,c3,b6,ab)},
	{::hx::fsBool,(int)offsetof(Interactive_obj,upDownEventsBubbleToDisplay),HX_("upDownEventsBubbleToDisplay",25,0e,13,75)},
	{::hx::fsObject /*  ::peote::ui::interactive::Interactive */ ,(int)offsetof(Interactive_obj,upDownEventsBubbleTo),HX_("upDownEventsBubbleTo",9d,61,76,bf)},
	{::hx::fsObject /*  ::peote::ui::interactive::Interactive */ ,(int)offsetof(Interactive_obj,wheelEventsBubbleTo),HX_("wheelEventsBubbleTo",5b,f2,ff,63)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,z),HX_("z",7a,00,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interactive_obj,changeZIndex),HX_("changeZIndex",c8,c9,f9,ff)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsBool,(int)offsetof(Interactive_obj,masked),HX_("masked",4b,ac,19,bb)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,maskX),HX_("maskX",ec,8d,22,03)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,maskY),HX_("maskY",ed,8d,22,03)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,maskWidth),HX_("maskWidth",7a,0d,cb,50)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,maskHeight),HX_("maskHeight",f3,35,30,17)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interactive_obj,pointerOver),HX_("pointerOver",b1,20,4f,ec)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interactive_obj,pointerOut),HX_("pointerOut",d1,eb,9f,bf)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interactive_obj,pointerMove),HX_("pointerMove",6e,72,f7,ea)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interactive_obj,mouseWheel),HX_("mouseWheel",36,28,87,e7)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,hasMoveEvent),HX_("hasMoveEvent",8f,7c,dd,c0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interactive_obj,pointerUp),HX_("pointerUp",78,74,a1,2d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interactive_obj,pointerDown),HX_("pointerDown",bf,87,04,e5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interactive_obj,pointerClick),HX_("pointerClick",4b,5e,85,e9)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,hasClickEvent),HX_("hasClickEvent",ac,ee,9a,d0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interactive_obj,drag),HX_("drag",f4,2b,70,42)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interactive_obj,resizeWidth),HX_("resizeWidth",72,37,66,09)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interactive_obj,resizeHeight),HX_("resizeHeight",fb,c4,59,e6)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,dragMinX),HX_("dragMinX",9a,b0,5c,26)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,dragMinY),HX_("dragMinY",9b,b0,5c,26)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,dragMaxX),HX_("dragMaxX",48,a7,56,26)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,dragMaxY),HX_("dragMaxY",49,a7,56,26)},
	{::hx::fsBool,(int)offsetof(Interactive_obj,isDragging),HX_("isDragging",d9,4e,3b,b2)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,dragOriginX),HX_("dragOriginX",1e,b2,16,0c)},
	{::hx::fsInt,(int)offsetof(Interactive_obj,dragOriginY),HX_("dragOriginY",1f,b2,16,0c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Interactive_obj_sStaticStorageInfo = 0;
#endif

static ::String Interactive_obj_sMemberFields[] = {
	HX_("uiDisplay",4e,1e,a1,66),
	HX_("isVisible",a8,f5,22,a7),
	HX_("pickableMove",ac,83,3f,47),
	HX_("pickableClick",4d,63,4c,4c),
	HX_("overOutEventsBubbleToDisplay",c8,67,bf,c6),
	HX_("overOutEventsBubbleTo",9a,b1,9c,56),
	HX_("intoOverOutEventBubbleOf",c3,52,93,48),
	HX_("moveEventsBubbleToDisplay",f1,0a,89,e5),
	HX_("moveEventsBubbleTo",51,c3,b6,ab),
	HX_("upDownEventsBubbleToDisplay",25,0e,13,75),
	HX_("upDownEventsBubbleTo",9d,61,76,bf),
	HX_("intoUpDownEventBubbleOf",a0,aa,6d,69),
	HX_("wheelEventsBubbleTo",5b,f2,ff,63),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("changeZIndex",c8,c9,f9,ff),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("masked",4b,ac,19,bb),
	HX_("maskX",ec,8d,22,03),
	HX_("maskY",ed,8d,22,03),
	HX_("maskWidth",7a,0d,cb,50),
	HX_("maskHeight",f3,35,30,17),
	HX_("pointerOver",b1,20,4f,ec),
	HX_("pointerOut",d1,eb,9f,bf),
	HX_("pointerMove",6e,72,f7,ea),
	HX_("mouseWheel",36,28,87,e7),
	HX_("hasMoveEvent",8f,7c,dd,c0),
	HX_("pointerUp",78,74,a1,2d),
	HX_("pointerDown",bf,87,04,e5),
	HX_("pointerClick",4b,5e,85,e9),
	HX_("hasClickEvent",ac,ee,9a,d0),
	HX_("drag",f4,2b,70,42),
	HX_("resizeWidth",72,37,66,09),
	HX_("resizeHeight",fb,c4,59,e6),
	HX_("updateLayout",93,55,7c,58),
	HX_("update",09,86,05,87),
	HX_("updateVisibleLayout",f3,74,31,4b),
	HX_("updateVisible",69,dd,92,6e),
	HX_("onAddVisibleToDisplay",97,b1,8b,2f),
	HX_("onRemoveVisibleFromDisplay",49,22,35,f9),
	HX_("dragMinX",9a,b0,5c,26),
	HX_("dragMinY",9b,b0,5c,26),
	HX_("dragMaxX",48,a7,56,26),
	HX_("dragMaxY",49,a7,56,26),
	HX_("isDragging",d9,4e,3b,b2),
	HX_("dragOriginX",1e,b2,16,0c),
	HX_("dragOriginY",1f,b2,16,0c),
	HX_("startDragging",51,9f,47,3c),
	HX_("stopDragging",f1,ba,ec,a8),
	HX_("addPickableMove",6d,ef,8e,cd),
	HX_("removePickableMove",10,c2,75,93),
	HX_("addPickableClick",6c,40,7b,4b),
	HX_("removePickableClick",69,bc,8c,af),
	::String(null()) };

::hx::Class Interactive_obj::__mClass;

static ::String Interactive_obj_sStaticFields[] = {
	HX_("noOperation",a6,73,ef,01),
	HX_("noWheelOperation",2d,c8,aa,d8),
	::String(null())
};

void Interactive_obj::__register()
{
	Interactive_obj _hx_dummy;
	Interactive_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.ui.interactive.Interactive",df,9d,dd,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Interactive_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Interactive_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Interactive_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Interactive_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interactive_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interactive_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace peote
} // end namespace ui
} // end namespace interactive
