// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_peote_ui_config_Space
#include <peote/ui/config/Space.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_Interactive
#include <peote/ui/interactive/Interactive.h>
#endif
#ifndef INCLUDED_peote_ui_style_RoundBorderStyleElement
#include <peote/ui/style/RoundBorderStyleElement.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_StyleElement
#include <peote/ui/style/interfaces/StyleElement.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_071c8e4729125833_33_new,"peote.ui.style.RoundBorderStyleElement","new",0xa8518903,"peote.ui.style.RoundBorderStyleElement.new","peote/ui/style/RoundBorderStyle.hx",33,0x1deb3332)
HX_LOCAL_STACK_FRAME(_hx_pos_071c8e4729125833_64_setStyle,"peote.ui.style.RoundBorderStyleElement","setStyle",0xabc526ac,"peote.ui.style.RoundBorderStyleElement.setStyle","peote/ui/style/RoundBorderStyle.hx",64,0x1deb3332)
HX_LOCAL_STACK_FRAME(_hx_pos_071c8e4729125833_72_setLayout,"peote.ui.style.RoundBorderStyleElement","setLayout",0xe3a278cf,"peote.ui.style.RoundBorderStyleElement.setLayout","peote/ui/style/RoundBorderStyle.hx",72,0x1deb3332)
HX_LOCAL_STACK_FRAME(_hx_pos_071c8e4729125833_33_boot,"peote.ui.style.RoundBorderStyleElement","boot",0x971f5a2f,"peote.ui.style.RoundBorderStyleElement.boot","peote/ui/style/RoundBorderStyle.hx",33,0x1deb3332)
HX_LOCAL_STACK_FRAME(_hx_pos_06c9ee724d52d799_920_boot,"peote.ui.style.RoundBorderStyleElement","boot",0x971f5a2f,"peote.ui.style.RoundBorderStyleElement.boot","peote/view/Element.hx",920,0x41e9abc8)
HX_LOCAL_STACK_FRAME(_hx_pos_06c9ee724d52d799_1142_boot,"peote.ui.style.RoundBorderStyleElement","boot",0x971f5a2f,"peote.ui.style.RoundBorderStyleElement.boot","peote/view/Element.hx",1142,0x41e9abc8)
HX_LOCAL_STACK_FRAME(_hx_pos_06c9ee724d52d799_1151_boot,"peote.ui.style.RoundBorderStyleElement","boot",0x971f5a2f,"peote.ui.style.RoundBorderStyleElement.boot","peote/view/Element.hx",1151,0x41e9abc8)
HX_LOCAL_STACK_FRAME(_hx_pos_06c9ee724d52d799_1396_boot,"peote.ui.style.RoundBorderStyleElement","boot",0x971f5a2f,"peote.ui.style.RoundBorderStyleElement.boot","peote/view/Element.hx",1396,0x41e9abc8)
namespace peote{
namespace ui{
namespace style{

void RoundBorderStyleElement_obj::__construct( ::Dynamic style, ::peote::ui::interactive::Interactive uiElement, ::peote::ui::config::Space space){
            	HX_STACKFRAME(&_hx_pos_071c8e4729125833_33_new)
HXLINE(1647)		this->bytePos = -1;
HXLINE(  52)		this->mh = 0;
HXLINE(  51)		this->mw = 0;
HXLINE(  50)		this->my = 0;
HXLINE(  49)		this->mx = 0;
HXLINE(  46)		this->z = 0;
HXLINE(  45)		this->h = 100;
HXLINE(  44)		this->w = 100;
HXLINE(  43)		this->y = 0;
HXLINE(  42)		this->x = 0;
HXLINE( 337)		this->borderRadius = ((Float)0);
HXDLIN( 337)		this->borderSize = ((Float)0);
HXDLIN( 337)		this->borderColor = -16776961;
HXDLIN( 337)		this->color = -16776961;
HXLINE(  59)		{
HXLINE(  59)			this->color = ( (int)(style->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic)) );
HXDLIN(  59)			this->borderColor = ( (int)(style->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic)) );
HXDLIN(  59)			this->borderSize = ( (Float)(style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) );
HXDLIN(  59)			this->borderRadius = ( (Float)(style->__Field(HX_("borderRadius",5e,0a,30,0e),::hx::paccDynamic)) );
            		}
HXLINE(  60)		if (::hx::IsNotNull( uiElement )) {
HXLINE(  60)			this->z = uiElement->z;
HXDLIN(  60)			if (::hx::IsNotNull( space )) {
HXLINE(  60)				this->x = (uiElement->x + space->left);
HXDLIN(  60)				this->y = (uiElement->y + space->top);
HXDLIN(  60)				this->w = ((uiElement->width - space->left) - space->right);
HXDLIN(  60)				this->h = ((uiElement->height - space->top) - space->bottom);
            			}
            			else {
HXLINE(  60)				this->x = uiElement->x;
HXDLIN(  60)				this->y = uiElement->y;
HXDLIN(  60)				this->w = uiElement->width;
HXDLIN(  60)				this->h = uiElement->height;
            			}
HXDLIN(  60)			if (uiElement->masked) {
HXLINE(  60)				this->mx = uiElement->maskX;
HXDLIN(  60)				this->my = uiElement->maskY;
HXDLIN(  60)				this->mw = (this->mx + uiElement->maskWidth);
HXDLIN(  60)				this->mh = (this->my + uiElement->maskHeight);
            			}
            			else {
HXLINE(  60)				this->mx = 0;
HXDLIN(  60)				this->my = 0;
HXDLIN(  60)				this->mw = this->w;
HXDLIN(  60)				this->mh = this->h;
            			}
            		}
            	}

Dynamic RoundBorderStyleElement_obj::__CreateEmpty() { return new RoundBorderStyleElement_obj; }

void *RoundBorderStyleElement_obj::_hx_vtable = 0;

Dynamic RoundBorderStyleElement_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RoundBorderStyleElement_obj > _hx_result = new RoundBorderStyleElement_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool RoundBorderStyleElement_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x543387b3;
}

static ::peote::ui::style::interfaces::StyleElement_obj _hx_peote_ui_style_RoundBorderStyleElement__hx_peote_ui_style_interfaces_StyleElement= {
	( void (::hx::Object::*)( ::Dynamic))&::peote::ui::style::RoundBorderStyleElement_obj::setStyle,
	( void (::hx::Object::*)( ::peote::ui::interactive::Interactive, ::peote::ui::config::Space))&::peote::ui::style::RoundBorderStyleElement_obj::setLayout,
};

void *RoundBorderStyleElement_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x98d510b7: return &_hx_peote_ui_style_RoundBorderStyleElement__hx_peote_ui_style_interfaces_StyleElement;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void RoundBorderStyleElement_obj::setStyle( ::Dynamic style){
            	HX_STACKFRAME(&_hx_pos_071c8e4729125833_64_setStyle)
HXLINE(  65)		this->color = ( (int)(style->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic)) );
HXLINE(  66)		this->borderColor = ( (int)(style->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic)) );
HXLINE(  67)		this->borderSize = ( (Float)(style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) );
HXLINE(  68)		this->borderRadius = ( (Float)(style->__Field(HX_("borderRadius",5e,0a,30,0e),::hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(RoundBorderStyleElement_obj,setStyle,(void))

void RoundBorderStyleElement_obj::setLayout( ::peote::ui::interactive::Interactive uiElement, ::peote::ui::config::Space space){
            	HX_STACKFRAME(&_hx_pos_071c8e4729125833_72_setLayout)
HXLINE(  73)		this->z = uiElement->z;
HXLINE(  75)		if (::hx::IsNotNull( space )) {
HXLINE(  76)			this->x = (uiElement->x + space->left);
HXLINE(  77)			this->y = (uiElement->y + space->top);
HXLINE(  78)			this->w = ((uiElement->width - space->left) - space->right);
HXLINE(  79)			this->h = ((uiElement->height - space->top) - space->bottom);
            		}
            		else {
HXLINE(  81)			this->x = uiElement->x;
HXLINE(  82)			this->y = uiElement->y;
HXLINE(  83)			this->w = uiElement->width;
HXLINE(  84)			this->h = uiElement->height;
            		}
HXLINE(  88)		if (uiElement->masked) {
HXLINE(  89)			this->mx = uiElement->maskX;
HXLINE(  90)			this->my = uiElement->maskY;
HXLINE(  91)			this->mw = (this->mx + uiElement->maskWidth);
HXLINE(  92)			this->mh = (this->my + uiElement->maskHeight);
            		}
            		else {
HXLINE(  94)			this->mx = 0;
HXLINE(  95)			this->my = 0;
HXLINE(  96)			this->mw = this->w;
HXLINE(  97)			this->mh = this->h;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(RoundBorderStyleElement_obj,setLayout,(void))

 ::haxe::ds::StringMap RoundBorderStyleElement_obj::FORMULAS;

 ::haxe::ds::StringMap RoundBorderStyleElement_obj::ATTRIBUTES;

 ::haxe::ds::StringMap RoundBorderStyleElement_obj::FORMULA_NAMES;

::String RoundBorderStyleElement_obj::FORMULA_VARYINGS;

::String RoundBorderStyleElement_obj::FORMULA_CONSTANTS;

 ::haxe::ds::StringMap RoundBorderStyleElement_obj::DEFAULT_FORMULA_VARS;


::hx::ObjectPtr< RoundBorderStyleElement_obj > RoundBorderStyleElement_obj::__new( ::Dynamic style, ::peote::ui::interactive::Interactive uiElement, ::peote::ui::config::Space space) {
	::hx::ObjectPtr< RoundBorderStyleElement_obj > __this = new RoundBorderStyleElement_obj();
	__this->__construct(style,uiElement,space);
	return __this;
}

::hx::ObjectPtr< RoundBorderStyleElement_obj > RoundBorderStyleElement_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic style, ::peote::ui::interactive::Interactive uiElement, ::peote::ui::config::Space space) {
	RoundBorderStyleElement_obj *__this = (RoundBorderStyleElement_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RoundBorderStyleElement_obj), false, "peote.ui.style.RoundBorderStyleElement"));
	*(void **)__this = RoundBorderStyleElement_obj::_hx_vtable;
	__this->__construct(style,uiElement,space);
	return __this;
}

RoundBorderStyleElement_obj::RoundBorderStyleElement_obj()
{
}

::hx::Val RoundBorderStyleElement_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"w") ) { return ::hx::Val( w ); }
		if (HX_FIELD_EQ(inName,"h") ) { return ::hx::Val( h ); }
		if (HX_FIELD_EQ(inName,"z") ) { return ::hx::Val( z ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"mx") ) { return ::hx::Val( mx ); }
		if (HX_FIELD_EQ(inName,"my") ) { return ::hx::Val( my ); }
		if (HX_FIELD_EQ(inName,"mw") ) { return ::hx::Val( mw ); }
		if (HX_FIELD_EQ(inName,"mh") ) { return ::hx::Val( mh ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bytePos") ) { return ::hx::Val( bytePos ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setStyle") ) { return ::hx::Val( setStyle_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setLayout") ) { return ::hx::Val( setLayout_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"borderSize") ) { return ::hx::Val( borderSize ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return ::hx::Val( borderColor ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"borderRadius") ) { return ::hx::Val( borderRadius ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bufferPointer") ) { return ::hx::Val( bufferPointer ); }
	}
	return super::__Field(inName,inCallProp);
}

bool RoundBorderStyleElement_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"FORMULAS") ) { outValue = ( FORMULAS ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"ATTRIBUTES") ) { outValue = ( ATTRIBUTES ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"FORMULA_NAMES") ) { outValue = ( FORMULA_NAMES ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"FORMULA_VARYINGS") ) { outValue = ( FORMULA_VARYINGS ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"FORMULA_CONSTANTS") ) { outValue = ( FORMULA_CONSTANTS ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"DEFAULT_FORMULA_VARS") ) { outValue = ( DEFAULT_FORMULA_VARS ); return true; }
	}
	return false;
}

::hx::Val RoundBorderStyleElement_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"h") ) { h=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< int >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"mx") ) { mx=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"my") ) { my=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mw") ) { mw=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mh") ) { mh=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bytePos") ) { bytePos=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"borderSize") ) { borderSize=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"borderRadius") ) { borderRadius=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bufferPointer") ) { bufferPointer=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool RoundBorderStyleElement_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"FORMULAS") ) { FORMULAS=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"ATTRIBUTES") ) { ATTRIBUTES=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"FORMULA_NAMES") ) { FORMULA_NAMES=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"FORMULA_VARYINGS") ) { FORMULA_VARYINGS=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"FORMULA_CONSTANTS") ) { FORMULA_CONSTANTS=ioValue.Cast< ::String >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"DEFAULT_FORMULA_VARS") ) { DEFAULT_FORMULA_VARS=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void RoundBorderStyleElement_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("borderSize",cd,ff,ed,06));
	outFields->push(HX_("borderRadius",5e,0a,30,0e));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("w",77,00,00,00));
	outFields->push(HX_("h",68,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	outFields->push(HX_("mx",6b,5f,00,00));
	outFields->push(HX_("my",6c,5f,00,00));
	outFields->push(HX_("mw",6a,5f,00,00));
	outFields->push(HX_("mh",5b,5f,00,00));
	outFields->push(HX_("bytePos",6c,0b,e1,59));
	outFields->push(HX_("bufferPointer",9d,cb,9f,86));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RoundBorderStyleElement_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,color),HX_("color",63,71,5c,4a)},
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,borderColor),HX_("borderColor",d7,3c,d5,d6)},
	{::hx::fsFloat,(int)offsetof(RoundBorderStyleElement_obj,borderSize),HX_("borderSize",cd,ff,ed,06)},
	{::hx::fsFloat,(int)offsetof(RoundBorderStyleElement_obj,borderRadius),HX_("borderRadius",5e,0a,30,0e)},
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,w),HX_("w",77,00,00,00)},
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,h),HX_("h",68,00,00,00)},
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,z),HX_("z",7a,00,00,00)},
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,mx),HX_("mx",6b,5f,00,00)},
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,my),HX_("my",6c,5f,00,00)},
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,mw),HX_("mw",6a,5f,00,00)},
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,mh),HX_("mh",5b,5f,00,00)},
	{::hx::fsInt,(int)offsetof(RoundBorderStyleElement_obj,bytePos),HX_("bytePos",6c,0b,e1,59)},
	{::hx::fsFloat,(int)offsetof(RoundBorderStyleElement_obj,bufferPointer),HX_("bufferPointer",9d,cb,9f,86)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo RoundBorderStyleElement_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &RoundBorderStyleElement_obj::FORMULAS,HX_("FORMULAS",4d,22,72,d0)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &RoundBorderStyleElement_obj::ATTRIBUTES,HX_("ATTRIBUTES",d7,1c,7b,89)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &RoundBorderStyleElement_obj::FORMULA_NAMES,HX_("FORMULA_NAMES",af,82,c8,1e)},
	{::hx::fsString,(void *) &RoundBorderStyleElement_obj::FORMULA_VARYINGS,HX_("FORMULA_VARYINGS",5c,59,a0,f6)},
	{::hx::fsString,(void *) &RoundBorderStyleElement_obj::FORMULA_CONSTANTS,HX_("FORMULA_CONSTANTS",f6,30,e1,8e)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &RoundBorderStyleElement_obj::DEFAULT_FORMULA_VARS,HX_("DEFAULT_FORMULA_VARS",23,8c,5b,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String RoundBorderStyleElement_obj_sMemberFields[] = {
	HX_("color",63,71,5c,4a),
	HX_("borderColor",d7,3c,d5,d6),
	HX_("borderSize",cd,ff,ed,06),
	HX_("borderRadius",5e,0a,30,0e),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("w",77,00,00,00),
	HX_("h",68,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("mx",6b,5f,00,00),
	HX_("my",6c,5f,00,00),
	HX_("mw",6a,5f,00,00),
	HX_("mh",5b,5f,00,00),
	HX_("setStyle",2f,0e,52,92),
	HX_("setLayout",ec,23,60,b8),
	HX_("bytePos",6c,0b,e1,59),
	HX_("bufferPointer",9d,cb,9f,86),
	::String(null()) };

static void RoundBorderStyleElement_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RoundBorderStyleElement_obj::FORMULAS,"FORMULAS");
	HX_MARK_MEMBER_NAME(RoundBorderStyleElement_obj::ATTRIBUTES,"ATTRIBUTES");
	HX_MARK_MEMBER_NAME(RoundBorderStyleElement_obj::FORMULA_NAMES,"FORMULA_NAMES");
	HX_MARK_MEMBER_NAME(RoundBorderStyleElement_obj::FORMULA_VARYINGS,"FORMULA_VARYINGS");
	HX_MARK_MEMBER_NAME(RoundBorderStyleElement_obj::FORMULA_CONSTANTS,"FORMULA_CONSTANTS");
	HX_MARK_MEMBER_NAME(RoundBorderStyleElement_obj::DEFAULT_FORMULA_VARS,"DEFAULT_FORMULA_VARS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RoundBorderStyleElement_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RoundBorderStyleElement_obj::FORMULAS,"FORMULAS");
	HX_VISIT_MEMBER_NAME(RoundBorderStyleElement_obj::ATTRIBUTES,"ATTRIBUTES");
	HX_VISIT_MEMBER_NAME(RoundBorderStyleElement_obj::FORMULA_NAMES,"FORMULA_NAMES");
	HX_VISIT_MEMBER_NAME(RoundBorderStyleElement_obj::FORMULA_VARYINGS,"FORMULA_VARYINGS");
	HX_VISIT_MEMBER_NAME(RoundBorderStyleElement_obj::FORMULA_CONSTANTS,"FORMULA_CONSTANTS");
	HX_VISIT_MEMBER_NAME(RoundBorderStyleElement_obj::DEFAULT_FORMULA_VARS,"DEFAULT_FORMULA_VARS");
};

#endif

::hx::Class RoundBorderStyleElement_obj::__mClass;

static ::String RoundBorderStyleElement_obj_sStaticFields[] = {
	HX_("FORMULAS",4d,22,72,d0),
	HX_("ATTRIBUTES",d7,1c,7b,89),
	HX_("FORMULA_NAMES",af,82,c8,1e),
	HX_("FORMULA_VARYINGS",5c,59,a0,f6),
	HX_("FORMULA_CONSTANTS",f6,30,e1,8e),
	HX_("DEFAULT_FORMULA_VARS",23,8c,5b,00),
	::String(null())
};

void RoundBorderStyleElement_obj::__register()
{
	RoundBorderStyleElement_obj _hx_dummy;
	RoundBorderStyleElement_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.ui.style.RoundBorderStyleElement",91,4b,fa,79);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RoundBorderStyleElement_obj::__GetStatic;
	__mClass->mSetStaticField = &RoundBorderStyleElement_obj::__SetStatic;
	__mClass->mMarkFunc = RoundBorderStyleElement_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(RoundBorderStyleElement_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RoundBorderStyleElement_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RoundBorderStyleElement_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RoundBorderStyleElement_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RoundBorderStyleElement_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RoundBorderStyleElement_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RoundBorderStyleElement_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_071c8e4729125833_33_boot)
HXDLIN(  33)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(13)
            				->setFixed(0,HX_("borderColor",d7,3c,d5,d6), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("color",63,71,5c,4a),null())))
            				->setFixed(1,HX_("h",68,00,00,00), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("varying",70,bc,7b,e7),null())
            					->setFixed(1,HX_("sizeY",78,08,d9,7c),null())))
            				->setFixed(2,HX_("w",77,00,00,00), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("varying",70,bc,7b,e7),null())
            					->setFixed(1,HX_("sizeX",77,08,d9,7c),null())))
            				->setFixed(3,HX_("x",78,00,00,00), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("posX",44,84,5c,4a),null())))
            				->setFixed(4,HX_("y",79,00,00,00), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("posY",45,84,5c,4a),null())))
            				->setFixed(5,HX_("z",7a,00,00,00), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("zIndex",38,10,cc,18),null())))
            				->setFixed(6,HX_("mh",5b,5f,00,00), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("varying",70,bc,7b,e7),null())
            					->setFixed(1,HX_("custom",b1,87,92,3f),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("mh",5b,5f,00,00)))))
            				->setFixed(7,HX_("mw",6a,5f,00,00), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("varying",70,bc,7b,e7),null())
            					->setFixed(1,HX_("custom",b1,87,92,3f),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("mw",6a,5f,00,00)))))
            				->setFixed(8,HX_("mx",6b,5f,00,00), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("varying",70,bc,7b,e7),null())
            					->setFixed(1,HX_("custom",b1,87,92,3f),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("mx",6b,5f,00,00)))))
            				->setFixed(9,HX_("my",6c,5f,00,00), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("varying",70,bc,7b,e7),null())
            					->setFixed(1,HX_("custom",b1,87,92,3f),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("my",6c,5f,00,00)))))
            				->setFixed(10,HX_("borderSize",cd,ff,ed,06), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("varying",70,bc,7b,e7),null())
            					->setFixed(1,HX_("custom",b1,87,92,3f),null())))
            				->setFixed(11,HX_("borderRadius",5e,0a,30,0e), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("varying",70,bc,7b,e7),null())
            					->setFixed(1,HX_("custom",b1,87,92,3f),null())))
            				->setFixed(12,HX_("color",63,71,5c,4a), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("color",63,71,5c,4a),null()))))));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_06c9ee724d52d799_920_boot)
HXDLIN( 920)		FORMULAS =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_071c8e4729125833_33_boot)
HXLINE( 928)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 928)			_g->set(HX_("zStart",88,e9,c2,de),HX_("aRotZ",64,63,66,10));
HXDLIN( 928)			_g->set(HX_("zEnd",81,c3,d8,50),HX_("aRotZ",64,63,66,10));
HXDLIN( 928)			_g->set(HX_("z",7a,00,00,00),HX_("aRotZ",64,63,66,10));
HXDLIN( 928)			_g->set(HX_("yStart",29,8d,67,78),HX_("aPos.y",fe,82,62,22));
HXDLIN( 928)			_g->set(HX_("yEnd",e2,8c,2f,50),HX_("aPos.y",fe,82,62,22));
HXDLIN( 928)			_g->set(HX_("y",79,00,00,00),HX_("aPos.y",fe,82,62,22));
HXDLIN( 928)			_g->set(HX_("xStart",ca,30,0c,12),HX_("aPos.x",fd,82,62,22));
HXDLIN( 928)			_g->set(HX_("xEnd",43,56,86,4f),HX_("aPos.x",fd,82,62,22));
HXDLIN( 928)			_g->set(HX_("x",78,00,00,00),HX_("aPos.x",fd,82,62,22));
HXDLIN( 928)			_g->set(HX_("wStart",6b,d4,b0,ab),HX_("aSize.x",cc,ae,44,b7));
HXDLIN( 928)			_g->set(HX_("wEnd",a4,1f,dd,4e),HX_("aSize.x",cc,ae,44,b7));
HXDLIN( 928)			_g->set(HX_("w",77,00,00,00),HX_("aSize.x",cc,ae,44,b7));
HXDLIN( 928)			_g->set(HX_("myStart",56,1d,0b,2d),HX_("aShort0.y",40,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("myEnd",cf,c7,dc,12),HX_("aShort0.y",40,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("my",6c,5f,00,00),HX_("aShort0.y",40,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("mxStart",f7,c0,af,c6),HX_("aShort0.x",3f,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("mxEnd",30,91,33,12),HX_("aShort0.x",3f,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("mx",6b,5f,00,00),HX_("aShort0.x",3f,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("mwStart",98,64,54,60),HX_("aShort0.z",41,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("mwEnd",91,5a,8a,11),HX_("aShort0.z",41,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("mw",6a,5f,00,00),HX_("aShort0.z",41,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("mhStart",07,fb,f9,60),HX_("aShort0.w",3e,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("mhEnd",40,27,a0,07),HX_("aShort0.w",3e,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("mh",5b,5f,00,00),HX_("aShort0.w",3e,8b,a8,af));
HXDLIN( 928)			_g->set(HX_("hStart",da,6a,56,ac),HX_("aSize.y",cd,ae,44,b7));
HXDLIN( 928)			_g->set(HX_("hEnd",53,ec,f2,44),HX_("aSize.y",cd,ae,44,b7));
HXDLIN( 928)			_g->set(HX_("h",68,00,00,00),HX_("aSize.y",cd,ae,44,b7));
HXDLIN( 928)			_g->set(HX_("borderSizeStart",55,7d,57,cd),HX_("aFloat0.x",1f,be,9e,a4));
HXDLIN( 928)			_g->set(HX_("borderSizeEnd",0e,da,50,60),HX_("aFloat0.x",1f,be,9e,a4));
HXDLIN( 928)			_g->set(HX_("borderSize",cd,ff,ed,06),HX_("aFloat0.x",1f,be,9e,a4));
HXDLIN( 928)			_g->set(HX_("borderRadiusStart",24,85,30,c2),HX_("aFloat0.y",20,be,9e,a4));
HXDLIN( 928)			_g->set(HX_("borderRadiusEnd",1d,00,49,ca),HX_("aFloat0.y",20,be,9e,a4));
HXDLIN( 928)			_g->set(HX_("borderRadius",5e,0a,30,0e),HX_("aFloat0.y",20,be,9e,a4));
HXLINE(  33)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_071c8e4729125833_33_boot)
HXDLIN(  33)		ATTRIBUTES = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_071c8e4729125833_33_boot)
HXLINE( 947)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 947)			_g->set(HX_("sizeX",77,08,d9,7c),HX_("w",77,00,00,00));
HXDLIN( 947)			_g->set(HX_("sizeY",78,08,d9,7c),HX_("h",68,00,00,00));
HXDLIN( 947)			_g->set(HX_("posX",44,84,5c,4a),HX_("x",78,00,00,00));
HXDLIN( 947)			_g->set(HX_("posY",45,84,5c,4a),HX_("y",79,00,00,00));
HXDLIN( 947)			_g->set(HX_("zIndex",38,10,cc,18),HX_("z",7a,00,00,00));
HXLINE(  33)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_071c8e4729125833_33_boot)
HXDLIN(  33)		FORMULA_NAMES = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_06c9ee724d52d799_1142_boot)
HXDLIN(1142)		FORMULA_VARYINGS = HX_("borderSize,borderRadius,mx,my,mw,mh",ef,b0,68,59);
            	}
{
            	HX_STACKFRAME(&_hx_pos_06c9ee724d52d799_1151_boot)
HXDLIN(1151)		FORMULA_CONSTANTS = HX_("",00,00,00,00);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_06c9ee724d52d799_1396_boot)
HXDLIN(1396)		DEFAULT_FORMULA_VARS =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace peote
} // end namespace ui
} // end namespace style
