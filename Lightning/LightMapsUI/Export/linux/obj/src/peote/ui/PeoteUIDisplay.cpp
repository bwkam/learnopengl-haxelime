// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_input2action_ActionConfigItem
#include <input2action/ActionConfigItem.h>
#endif
#ifndef INCLUDED_input2action_Input2Action
#include <input2action/Input2Action.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeWindow
#include <lime/_internal/backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Int_Void
#include <lime/app/_Event_Float_Float_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Void
#include <lime/app/_Event_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_lime_ui_MouseButton_Void
#include <lime/app/_Event_Float_Float_lime_ui_MouseButton_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_lime_ui_MouseWheelMode_Void
#include <lime/app/_Event_Float_Float_lime_ui_MouseWheelMode_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_graphics_RenderContext_Void
#include <lime/app/_Event_lime_graphics_RenderContext_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Touch_Void
#include <lime/app/_Event_lime_ui_Touch_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_ui_MouseWheelMode
#include <lime/ui/MouseWheelMode.h>
#endif
#ifndef INCLUDED_lime_ui_Touch
#include <lime/ui/Touch.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_peote_ui_PeoteUIDisplay
#include <peote/ui/PeoteUIDisplay.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_Interactive
#include <peote/ui/interactive/Interactive.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_Pickable
#include <peote/ui/interactive/Pickable.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_input2action_InputTextLine
#include <peote/ui/interactive/input2action/InputTextLine.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_input2action_InputTextPage
#include <peote/ui/interactive/input2action/InputTextPage.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_interfaces_InputFocus
#include <peote/ui/interactive/interfaces/InputFocus.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_interfaces_InputText
#include <peote/ui/interactive/interfaces/InputText.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_StyleID
#include <peote/ui/style/interfaces/StyleID.h>
#endif
#ifndef INCLUDED_peote_view_BufferInterface
#include <peote/view/BufferInterface.h>
#endif
#ifndef INCLUDED_peote_view_Buffer_Pickable
#include <peote/view/Buffer_Pickable.h>
#endif
#ifndef INCLUDED_peote_view_Display
#include <peote/view/Display.h>
#endif
#ifndef INCLUDED_peote_view_PeoteView
#include <peote/view/PeoteView.h>
#endif
#ifndef INCLUDED_peote_view_Program
#include <peote/view/Program.h>
#endif
#ifndef INCLUDED_peote_view_Texture
#include <peote/view/Texture.h>
#endif
#ifndef INCLUDED_peote_view_Version
#include <peote/view/Version.h>
#endif
#ifndef INCLUDED_peote_view__TextureData_TextureDataImpl
#include <peote/view/_TextureData/TextureDataImpl.h>
#endif
#ifndef INCLUDED_peote_view_utils_GLTool
#include <peote/view/utils/GLTool.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderListItem_peote_view_Display
#include <peote/view/utils/RenderListItem_peote_view_Display.h>
#endif
#ifndef INCLUDED_peote_view_utils_RenderList_peote_view_Display
#include <peote/view/utils/RenderList_peote_view_Display.h>
#endif
#ifndef INCLUDED_peote_view_utils_TexUtils
#include <peote/view/utils/TexUtils.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c7537b15687821b9_37_new,"peote.ui.PeoteUIDisplay","new",0x27bceaac,"peote.ui.PeoteUIDisplay.new","peote/ui/PeoteUIDisplay.hx",37,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_133_addToPeoteView,"peote.ui.PeoteUIDisplay","addToPeoteView",0xc6447068,"peote.ui.PeoteUIDisplay.addToPeoteView","peote/ui/PeoteUIDisplay.hx",133,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_299_add,"peote.ui.PeoteUIDisplay","add",0x27b30c6d,"peote.ui.PeoteUIDisplay.add","peote/ui/PeoteUIDisplay.hx",299,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_310_remove,"peote.ui.PeoteUIDisplay","remove",0x0687f978,"peote.ui.PeoteUIDisplay.remove","peote/ui/PeoteUIDisplay.hx",310,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_342_update,"peote.ui.PeoteUIDisplay","update",0x8904e33d,"peote.ui.PeoteUIDisplay.update","peote/ui/PeoteUIDisplay.hx",342,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_355_startDraggingElement,"peote.ui.PeoteUIDisplay","startDraggingElement",0xba7ac39f,"peote.ui.PeoteUIDisplay.startDraggingElement","peote/ui/PeoteUIDisplay.hx",355,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_368_stopDraggingElement,"peote.ui.PeoteUIDisplay","stopDraggingElement",0xccc13e17,"peote.ui.PeoteUIDisplay.stopDraggingElement","peote/ui/PeoteUIDisplay.hx",368,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_49_getFreeNumber,"peote.ui.PeoteUIDisplay","getFreeNumber",0x76222e17,"peote.ui.PeoteUIDisplay.getFreeNumber","peote/ui/PeoteUIDisplay.hx",49,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1401_mouseDownActive,"peote.ui.PeoteUIDisplay","mouseDownActive",0xc6ca9a99,"peote.ui.PeoteUIDisplay.mouseDownActive","peote/ui/PeoteUIDisplay.hx",1401,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1402_mouseUpActive,"peote.ui.PeoteUIDisplay","mouseUpActive",0xece34312,"peote.ui.PeoteUIDisplay.mouseUpActive","peote/ui/PeoteUIDisplay.hx",1402,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1403_mouseWheelActive,"peote.ui.PeoteUIDisplay","mouseWheelActive",0x429a50d0,"peote.ui.PeoteUIDisplay.mouseWheelActive","peote/ui/PeoteUIDisplay.hx",1403,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1405_touchMoveActive,"peote.ui.PeoteUIDisplay","touchMoveActive",0x537af8a2,"peote.ui.PeoteUIDisplay.touchMoveActive","peote/ui/PeoteUIDisplay.hx",1405,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1412_touchStartActive,"peote.ui.PeoteUIDisplay","touchStartActive",0x069bb07d,"peote.ui.PeoteUIDisplay.touchStartActive","peote/ui/PeoteUIDisplay.hx",1412,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1413_touchEndActive,"peote.ui.PeoteUIDisplay","touchEndActive",0x92ea9976,"peote.ui.PeoteUIDisplay.touchEndActive","peote/ui/PeoteUIDisplay.hx",1413,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1414_touchCancelActive,"peote.ui.PeoteUIDisplay","touchCancelActive",0xc438888b,"peote.ui.PeoteUIDisplay.touchCancelActive","peote/ui/PeoteUIDisplay.hx",1414,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1416_keyDownActive,"peote.ui.PeoteUIDisplay","keyDownActive",0x08abff93,"peote.ui.PeoteUIDisplay.keyDownActive","peote/ui/PeoteUIDisplay.hx",1416,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1417_keyUpActive,"peote.ui.PeoteUIDisplay","keyUpActive",0x452f958c,"peote.ui.PeoteUIDisplay.keyUpActive","peote/ui/PeoteUIDisplay.hx",1417,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1418_textInputActive,"peote.ui.PeoteUIDisplay","textInputActive",0x1fd8da0f,"peote.ui.PeoteUIDisplay.textInputActive","peote/ui/PeoteUIDisplay.hx",1418,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1425_registerEvents,"peote.ui.PeoteUIDisplay","registerEvents",0x81d98710,"peote.ui.PeoteUIDisplay.registerEvents","peote/ui/PeoteUIDisplay.hx",1425,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1468__mouseMove,"peote.ui.PeoteUIDisplay","_mouseMove",0xf2a01ecb,"peote.ui.PeoteUIDisplay._mouseMove","peote/ui/PeoteUIDisplay.hx",1468,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1475__mouseMoveFrameSynced,"peote.ui.PeoteUIDisplay","_mouseMoveFrameSynced",0x1506927c,"peote.ui.PeoteUIDisplay._mouseMoveFrameSynced","peote/ui/PeoteUIDisplay.hx",1475,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1481__windowLeave,"peote.ui.PeoteUIDisplay","_windowLeave",0x92eeb51c,"peote.ui.PeoteUIDisplay._windowLeave","peote/ui/PeoteUIDisplay.hx",1481,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_48_boot,"peote.ui.PeoteUIDisplay","boot",0x95a96c66,"peote.ui.PeoteUIDisplay.boot","peote/ui/PeoteUIDisplay.hx",48,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1119_boot,"peote.ui.PeoteUIDisplay","boot",0x95a96c66,"peote.ui.PeoteUIDisplay.boot","peote/ui/PeoteUIDisplay.hx",1119,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1143_boot,"peote.ui.PeoteUIDisplay","boot",0x95a96c66,"peote.ui.PeoteUIDisplay.boot","peote/ui/PeoteUIDisplay.hx",1143,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1281_boot,"peote.ui.PeoteUIDisplay","boot",0x95a96c66,"peote.ui.PeoteUIDisplay.boot","peote/ui/PeoteUIDisplay.hx",1281,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1282_boot,"peote.ui.PeoteUIDisplay","boot",0x95a96c66,"peote.ui.PeoteUIDisplay.boot","peote/ui/PeoteUIDisplay.hx",1282,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1349_boot,"peote.ui.PeoteUIDisplay","boot",0x95a96c66,"peote.ui.PeoteUIDisplay.boot","peote/ui/PeoteUIDisplay.hx",1349,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1350_boot,"peote.ui.PeoteUIDisplay","boot",0x95a96c66,"peote.ui.PeoteUIDisplay.boot","peote/ui/PeoteUIDisplay.hx",1350,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1464_boot,"peote.ui.PeoteUIDisplay","boot",0x95a96c66,"peote.ui.PeoteUIDisplay.boot","peote/ui/PeoteUIDisplay.hx",1464,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1465_boot,"peote.ui.PeoteUIDisplay","boot",0x95a96c66,"peote.ui.PeoteUIDisplay.boot","peote/ui/PeoteUIDisplay.hx",1465,0xb5e363a4)
HX_LOCAL_STACK_FRAME(_hx_pos_c7537b15687821b9_1466_boot,"peote.ui.PeoteUIDisplay","boot",0x95a96c66,"peote.ui.PeoteUIDisplay.boot","peote/ui/PeoteUIDisplay.hx",1466,0xb5e363a4)
namespace peote{
namespace ui{

void PeoteUIDisplay_obj::__construct(int x,int y,int width,int height,::hx::Null< int >  __o_color,::hx::Null< int >  __o_maxTouchpoints,::Array< ::Dynamic> availableStyles, ::Dynamic autoAddStyles){
            		int color = __o_color.Default(0);
            		int maxTouchpoints = __o_maxTouchpoints.Default(3);
            	HX_GC_STACKFRAME(&_hx_pos_c7537b15687821b9_37_new)
HXLINE(1280)		this->activeIndex = 0;
HXLINE(1174)		this->dragOriginY = 0;
HXLINE(1173)		this->dragOriginX = 0;
HXLINE(1163)		this->dragMaxY = 32767;
HXLINE(1162)		this->dragMaxX = 32767;
HXLINE(1161)		this->dragMinY = -32767;
HXLINE(1160)		this->dragMinX = -32767;
HXLINE(1120)		this->inputFocusElement = null();
HXLINE( 797)		this->isTouchDown = 0;
HXLINE( 752)		this->isMouseDown = 0;
HXLINE( 592)		this->isTouchOver = false;
HXLINE( 591)		this->isTouchInside = false;
HXLINE( 421)		this->isTriggerMouse = false;
HXLINE( 419)		this->lastMouseY = ((Float)0.0);
HXLINE( 418)		this->lastMouseX = ((Float)0.0);
HXLINE( 416)		this->isMouseOver = false;
HXLINE( 415)		this->isMouseInside = false;
HXLINE( 408)		this->onPointerMove = null();
HXLINE( 407)		this->onPointerClick = null();
HXLINE( 406)		this->onPointerUp = null();
HXLINE( 405)		this->onPointerDown = null();
HXLINE( 404)		this->onPointerOut = null();
HXLINE( 403)		this->onPointerOver = null();
HXLINE( 398)		this->lockMouseDown = 0;
HXLINE( 396)		this->lastMouseOverIndex = -1;
HXLINE( 394)		this->lockTouchDown = 0;
HXLINE( 389)		this->touchEnabled = true;
HXLINE( 388)		this->mouseEnabled = true;
HXLINE(  83)		this->autoAddStyles = true;
HXLINE(  82)		this->stylePosBeforeFont = 0;
HXLINE(  81)		this->usedStyleID = ::Array_obj< int >::__new();
HXLINE(  80)		this->usedStyleProgram = ::Array_obj< ::Dynamic>::__new();
HXLINE(  64)		this->upDownEventsBubble = false;
HXLINE(  63)		this->moveEventsBubble = false;
HXLINE(  62)		this->overOutEventsBubble = false;
HXLINE(  87)		this->number = ::peote::ui::PeoteUIDisplay_obj::getFreeNumber();
HXLINE(  89)		super::__construct(x,y,width,height,color);
HXLINE(  91)		if (::hx::IsNull( availableStyles )) {
HXLINE(  91)			bool _hx_tmp;
HXDLIN(  91)			if (::hx::IsNull( autoAddStyles )) {
HXLINE(  91)				_hx_tmp = true;
            			}
            			else {
HXLINE(  91)				_hx_tmp = ( (bool)(autoAddStyles) );
            			}
HXDLIN(  91)			this->autoAddStyles = _hx_tmp;
HXDLIN(  91)			this->usedStyleProgram = ::Array_obj< ::Dynamic>::__new();
            		}
            		else {
HXLINE(  91)			bool _hx_tmp1;
HXDLIN(  91)			if (::hx::IsNull( autoAddStyles )) {
HXLINE(  91)				_hx_tmp1 = false;
            			}
            			else {
HXLINE(  91)				_hx_tmp1 = ( (bool)(autoAddStyles) );
            			}
HXDLIN(  91)			this->autoAddStyles = _hx_tmp1;
HXDLIN(  91)			bool noFontYet = true;
HXDLIN(  91)			{
HXLINE(  91)				int _g = 0;
HXDLIN(  91)				while((_g < availableStyles->length)){
HXLINE(  91)					::Dynamic style = availableStyles->__get(_g);
HXDLIN(  91)					_g = (_g + 1);
HXDLIN(  91)					int id = ::peote::ui::style::interfaces::StyleID_obj::getUUID(style);
HXDLIN(  91)					if (this->usedStyleID->contains(id)) {
HXLINE(  91)						HX_STACK_DO_THROW(((HX_("Error by creating new UIDisplay. Give each of the styles \"",c2,1d,09,02) + ::Type_obj::getClassName(::Type_obj::getClass(style))) + HX_("\" an unique ID to have multiple of them into the availableStyles list!",0c,47,41,e9)));
            					}
HXDLIN(  91)					this->usedStyleID->push(id);
HXDLIN(  91)					if (::peote::ui::style::interfaces::StyleID_obj::isFontStyle(style)) {
HXLINE(  91)						this->usedStyleProgram->push(null());
HXDLIN(  91)						noFontYet = false;
            					}
            					else {
HXLINE(  91)						 ::peote::view::Program program = ( ( ::peote::view::Program)(style->__Field(HX_("createStyleProgram",6f,82,21,1b),::hx::paccDynamic)()) );
HXDLIN(  91)						this->usedStyleProgram->push(program);
HXDLIN(  91)						this->addProgram(program,null(),null());
HXDLIN(  91)						if (noFontYet) {
HXLINE(  91)							this->stylePosBeforeFont++;
            						}
            					}
            				}
            			}
            		}
HXLINE(  94)		this->movePickBuffer =  ::peote::view::Buffer_Pickable_obj::__alloc( HX_CTX ,1024,1024,null());
HXLINE(  95)		this->movePickProgram =  ::peote::view::Program_obj::__alloc( HX_CTX ,this->movePickBuffer);
HXLINE(  98)		this->clickPickBuffer =  ::peote::view::Buffer_Pickable_obj::__alloc( HX_CTX ,1024,1024,null());
HXLINE(  99)		this->clickPickProgram =  ::peote::view::Program_obj::__alloc( HX_CTX ,this->clickPickBuffer);
HXLINE( 101)		this->uiElements = ::Array_obj< ::Dynamic>::__new();
HXLINE( 104)		this->lastMouseDownIndex = ::Array_obj< int >::__new(3);
HXLINE( 105)		{
HXLINE( 105)			int _g1 = 0;
HXDLIN( 105)			int _g2 = this->lastMouseDownIndex->length;
HXDLIN( 105)			while((_g1 < _g2)){
HXLINE( 105)				_g1 = (_g1 + 1);
HXDLIN( 105)				int i = (_g1 - 1);
HXLINE( 106)				this->lastMouseDownIndex->__unsafe_set(i,-1);
            			}
            		}
HXLINE( 109)		this->draggingMouseElements = ::Array_obj< ::Dynamic>::__new();
HXLINE( 111)		this->maxTouchpoints = maxTouchpoints;
HXLINE( 112)		this->lastTouchOverIndex = ::Array_obj< int >::__new(maxTouchpoints);
HXLINE( 113)		this->lastTouchDownIndex = ::Array_obj< int >::__new(maxTouchpoints);
HXLINE( 115)		this->draggingTouchElements = ::Array_obj< ::Dynamic>::__new(maxTouchpoints);
HXLINE( 117)		{
HXLINE( 117)			int _g3 = 0;
HXDLIN( 117)			int _g4 = maxTouchpoints;
HXDLIN( 117)			while((_g3 < _g4)){
HXLINE( 117)				_g3 = (_g3 + 1);
HXDLIN( 117)				int i1 = (_g3 - 1);
HXLINE( 118)				this->lastTouchOverIndex->__unsafe_set(i1,-1);
HXLINE( 119)				this->lastTouchDownIndex->__unsafe_set(i1,-1);
HXLINE( 120)				{
HXLINE( 120)					::Array< ::Dynamic> this1 = this->draggingTouchElements;
HXDLIN( 120)					::Array< ::Dynamic> val = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 120)					this1->__unsafe_set(i1,val);
            				}
            			}
            		}
HXLINE( 123)		{
HXLINE( 123)			::peote::ui::interactive::input2action::InputTextLine_obj::input2Action =  ::input2action::Input2Action_obj::__alloc( HX_CTX ,::peote::ui::interactive::input2action::InputTextLine_obj::actionConfig,::peote::ui::interactive::input2action::InputTextLine_obj::actionMap);
HXDLIN( 123)			::peote::ui::interactive::input2action::InputTextLine_obj::input2Action->setKeyboard(null(),null());
            		}
HXLINE( 124)		{
HXLINE( 124)			::peote::ui::interactive::input2action::InputTextPage_obj::input2Action =  ::input2action::Input2Action_obj::__alloc( HX_CTX ,::peote::ui::interactive::input2action::InputTextPage_obj::actionConfig,::peote::ui::interactive::input2action::InputTextPage_obj::actionMap);
HXDLIN( 124)			::peote::ui::interactive::input2action::InputTextPage_obj::input2Action->setKeyboard(null(),null());
            		}
            	}

Dynamic PeoteUIDisplay_obj::__CreateEmpty() { return new PeoteUIDisplay_obj; }

void *PeoteUIDisplay_obj::_hx_vtable = 0;

Dynamic PeoteUIDisplay_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PeoteUIDisplay_obj > _hx_result = new PeoteUIDisplay_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool PeoteUIDisplay_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0fddc6ba) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0fddc6ba;
	} else {
		return inClassId==(int)0x4746cda2;
	}
}

void PeoteUIDisplay_obj::addToPeoteView( ::peote::view::PeoteView peoteView, ::peote::view::Display atDisplay,::hx::Null< bool >  __o_addBefore){
            		bool addBefore = __o_addBefore.Default(false);
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_133_addToPeoteView)
HXLINE( 134)		if (::hx::IsInstanceEq( this->peoteView,peoteView )) {
HXLINE( 134)			{
HXLINE( 134)				int _g = (this->activeIndex + 1);
HXDLIN( 134)				int _g1 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN( 134)				while((_g < _g1)){
HXLINE( 134)					_g = (_g + 1);
HXDLIN( 134)					int i = (_g - 1);
HXDLIN( 134)					 ::peote::ui::PeoteUIDisplay d = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN( 134)					d->activeIndex = (i - 1);
HXDLIN( 134)					::peote::ui::PeoteUIDisplay_obj::activeUIDisplay->__unsafe_set(d->activeIndex,d);
            				}
            			}
HXDLIN( 134)			::peote::ui::PeoteUIDisplay_obj::maxActiveIndex--;
            		}
HXLINE( 135)		this->super::addToPeoteView(peoteView,atDisplay,addBefore);
HXLINE( 136)		{
HXLINE( 136)			 ::peote::view::Program _this = this->movePickProgram;
HXDLIN( 136)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext newGl = peoteView->gl;
HXDLIN( 136)			bool _hx_tmp;
HXDLIN( 136)			if (::hx::IsNotNull( newGl )) {
HXLINE( 136)				_hx_tmp = ::hx::IsInstanceNotEq( newGl,_this->gl );
            			}
            			else {
HXLINE( 136)				_hx_tmp = false;
            			}
HXDLIN( 136)			if (_hx_tmp) {
HXLINE( 136)				{
HXLINE( 136)					int _g2 = 0;
HXDLIN( 136)					::Array< ::Dynamic> _g3 = _this->displays;
HXDLIN( 136)					while((_g2 < _g3->length)){
HXLINE( 136)						 ::peote::view::Display d1 = _g3->__get(_g2).StaticCast<  ::peote::view::Display >();
HXDLIN( 136)						_g2 = (_g2 + 1);
HXDLIN( 136)						bool _hx_tmp1;
HXDLIN( 136)						if (::hx::IsNotNull( d1->gl )) {
HXLINE( 136)							_hx_tmp1 = ::hx::IsInstanceNotEq( d1->gl,newGl );
            						}
            						else {
HXLINE( 136)							_hx_tmp1 = false;
            						}
HXDLIN( 136)						if (_hx_tmp1) {
HXLINE( 136)							HX_STACK_DO_THROW(HX_("Error, program can not used inside different gl-contexts",ef,f8,25,08));
            						}
            					}
            				}
HXDLIN( 136)				if (::hx::IsNotNull( _this->gl )) {
HXLINE( 136)					_this->gl->deleteShader(_this->glVertexShader);
HXDLIN( 136)					_this->gl->deleteShader(_this->glFragmentShader);
HXDLIN( 136)					_this->gl->deleteProgram(_this->glProgram);
HXDLIN( 136)					if (::peote::view::BufferInterface_obj::hasPicking(_this->buffer)) {
HXLINE( 136)						_this->gl->deleteShader(_this->glVertexShaderPicking);
HXDLIN( 136)						_this->gl->deleteShader(_this->glFragmentShaderPicking);
HXDLIN( 136)						_this->gl->deleteProgram(_this->glProgramPicking);
            					}
            				}
HXDLIN( 136)				_this->gl = newGl;
HXDLIN( 136)				if (::peote::view::Version_obj::isES3) {
HXLINE( 136)					_this->glShaderConfig->__SetField(HX_("isES3",5b,16,4b,c1),true,::hx::paccDynamic);
HXDLIN( 136)					_this->glShaderConfig->__SetField(HX_("IN",e5,3f,00,00),HX_("in",e5,5b,00,00),::hx::paccDynamic);
HXDLIN( 136)					_this->glShaderConfig->__SetField(HX_("VARIN",6c,3a,ab,af),HX_("in",e5,5b,00,00),::hx::paccDynamic);
HXDLIN( 136)					_this->glShaderConfig->__SetField(HX_("VAROUT",07,78,2c,06),HX_("out",8e,a0,54,00),::hx::paccDynamic);
            				}
HXDLIN( 136)				_this->glShaderConfig->__SetField(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
HXDLIN( 136)				if (::hx::IsNotNull( _this->gl->getExtension(HX_("OES_standard_derivatives",8c,cb,00,04)) )) {
HXLINE( 136)					( (::Array< ::Dynamic>)(_this->glShaderConfig->__Field(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::hx::paccDynamic)) )->push( ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("EXTENSION",5f,03,69,e0),HX_("GL_OES_standard_derivatives",26,6c,66,da))));
            				}
HXDLIN( 136)				if (::hx::IsNotNull( _this->gl->getExtension(HX_("EXT_color_buffer_float",b7,19,0b,dd)) )) {
HXLINE( 136)					( (::Array< ::Dynamic>)(_this->glShaderConfig->__Field(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::hx::paccDynamic)) )->push( ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("EXTENSION",5f,03,69,e0),HX_("EXT_color_buffer_float",b7,19,0b,dd))));
            				}
            				else {
HXLINE( 136)					if (::hx::IsNotNull( _this->gl->getExtension(HX_("OES_texture_float",76,0b,21,02)) )) {
HXLINE( 136)						( (::Array< ::Dynamic>)(_this->glShaderConfig->__Field(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::hx::paccDynamic)) )->push( ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("EXTENSION",5f,03,69,e0),HX_("OES_texture_float",76,0b,21,02))));
            					}
            				}
HXDLIN( 136)				::peote::view::BufferInterface_obj::setNewGLContext(_this->buffer,_this->gl);
HXDLIN( 136)				{
HXLINE( 136)					_this->createProg(null());
HXDLIN( 136)					if (::peote::view::BufferInterface_obj::hasPicking(_this->buffer)) {
HXLINE( 136)						_this->createProg(true);
            					}
            				}
HXDLIN( 136)				{
HXLINE( 136)					int _g4 = 0;
HXDLIN( 136)					::Array< ::Dynamic> _g5 = _this->activeTextures;
HXDLIN( 136)					while((_g4 < _g5->length)){
HXLINE( 136)						 ::peote::view::Texture t = _g5->__get(_g4).StaticCast<  ::peote::view::Texture >();
HXDLIN( 136)						_g4 = (_g4 + 1);
HXDLIN( 136)						{
HXLINE( 136)							 ::lime::_internal::backend::native::NativeOpenGLRenderContext newGl1 = _this->gl;
HXDLIN( 136)							bool _hx_tmp2;
HXDLIN( 136)							if (::hx::IsNotNull( newGl1 )) {
HXLINE( 136)								_hx_tmp2 = ::hx::IsInstanceNotEq( newGl1,t->gl );
            							}
            							else {
HXLINE( 136)								_hx_tmp2 = false;
            							}
HXDLIN( 136)							if (_hx_tmp2) {
HXLINE( 136)								{
HXLINE( 136)									int _g6 = 0;
HXDLIN( 136)									::Array< ::Dynamic> _g7 = t->programs;
HXDLIN( 136)									while((_g6 < _g7->length)){
HXLINE( 136)										 ::peote::view::Program p = _g7->__get(_g6).StaticCast<  ::peote::view::Program >();
HXDLIN( 136)										_g6 = (_g6 + 1);
HXDLIN( 136)										bool _hx_tmp3;
HXDLIN( 136)										if (::hx::IsNotNull( p->gl )) {
HXLINE( 136)											_hx_tmp3 = ::hx::IsInstanceNotEq( p->gl,newGl1 );
            										}
            										else {
HXLINE( 136)											_hx_tmp3 = false;
            										}
HXDLIN( 136)										if (_hx_tmp3) {
HXLINE( 136)											HX_STACK_DO_THROW(HX_("Error, texture can not used inside different gl-contexts",06,26,7d,73));
            										}
            									}
            								}
HXDLIN( 136)								{
HXLINE( 136)									int _g8 = 0;
HXDLIN( 136)									::Array< ::Dynamic> _g9 = t->displays;
HXDLIN( 136)									while((_g8 < _g9->length)){
HXLINE( 136)										 ::peote::view::Display d2 = _g9->__get(_g8).StaticCast<  ::peote::view::Display >();
HXDLIN( 136)										_g8 = (_g8 + 1);
HXDLIN( 136)										bool _hx_tmp4;
HXDLIN( 136)										if (::hx::IsNotNull( d2->gl )) {
HXLINE( 136)											_hx_tmp4 = ::hx::IsInstanceNotEq( d2->gl,newGl1 );
            										}
            										else {
HXLINE( 136)											_hx_tmp4 = false;
            										}
HXDLIN( 136)										if (_hx_tmp4) {
HXLINE( 136)											HX_STACK_DO_THROW(HX_("Error, texture can not used inside different gl-contexts",06,26,7d,73));
            										}
            									}
            								}
HXDLIN( 136)								if (::hx::IsNotNull( t->gl )) {
HXLINE( 136)									t->gl->deleteTexture(t->glTexture);
HXDLIN( 136)									t->glTexture = null();
HXDLIN( 136)									bool _hx_tmp5;
HXDLIN( 136)									if ((t->displays->length == 0)) {
HXLINE( 136)										_hx_tmp5 = ::hx::IsNotNull( t->framebuffer );
            									}
            									else {
HXLINE( 136)										_hx_tmp5 = false;
            									}
HXDLIN( 136)									if (_hx_tmp5) {
HXLINE( 136)										t->gl->deleteFramebuffer(t->framebuffer);
HXDLIN( 136)										t->framebuffer = null();
HXDLIN( 136)										if (::hx::IsNotNull( t->glDepthBuffer )) {
HXLINE( 136)											t->gl->deleteRenderbuffer(t->glDepthBuffer);
            										}
HXDLIN( 136)										t->glDepthBuffer = null();
            									}
            								}
HXDLIN( 136)								t->gl = newGl1;
HXDLIN( 136)								{
HXLINE( 136)									bool _hx_tmp6;
HXDLIN( 136)									int t1 = t->width;
HXDLIN( 136)									if (!(::hx::IsGreater( t1,t->gl->getParameter(t->gl->MAX_TEXTURE_SIZE) ))) {
HXLINE( 136)										int t2 = t->height;
HXDLIN( 136)										_hx_tmp6 = ::hx::IsGreater( t2,t->gl->getParameter(t->gl->MAX_TEXTURE_SIZE) );
            									}
            									else {
HXLINE( 136)										_hx_tmp6 = true;
            									}
HXDLIN( 136)									if (_hx_tmp6) {
HXLINE( 136)										HX_STACK_DO_THROW(HX_("Error, texture size is greater then gl.MAX_TEXTURE_SIZE",84,65,32,52));
            									}
HXDLIN( 136)									t->glTexture = ::peote::view::utils::TexUtils_obj::createEmptyTexture(t->gl,t->width,t->height,t->colorChannels,t->createMipmaps,t->magFilter,t->minFilter,t->useFloat);
            								}
HXDLIN( 136)								bool _hx_tmp7;
HXDLIN( 136)								if ((t->displays->length > 0)) {
HXLINE( 136)									_hx_tmp7 = ::hx::IsNull( t->framebuffer );
            								}
            								else {
HXLINE( 136)									_hx_tmp7 = false;
            								}
HXDLIN( 136)								if (_hx_tmp7) {
HXLINE( 136)									t->glDepthBuffer = t->gl->createRenderbuffer();
HXDLIN( 136)									 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = t->gl;
HXDLIN( 136)									 ::lime::graphics::opengl::GLObject texture = t->glTexture;
HXDLIN( 136)									 ::lime::graphics::opengl::GLObject depthBuffer = t->glDepthBuffer;
HXDLIN( 136)									int width = t->width;
HXDLIN( 136)									int height = t->height;
HXDLIN( 136)									 ::lime::graphics::opengl::GLObject framebuffer = gl->createFramebuffer();
HXDLIN( 136)									gl->bindRenderbuffer(gl->RENDERBUFFER,depthBuffer);
HXDLIN( 136)									::peote::view::utils::GLTool_obj::clearGlErrorQueue(gl);
HXDLIN( 136)									gl->renderbufferStorage(gl->RENDERBUFFER,gl->DEPTH_COMPONENT24,width,height);
HXDLIN( 136)									int _hx_tmp8 = ::peote::view::utils::GLTool_obj::getLastGlError(gl);
HXDLIN( 136)									if ((_hx_tmp8 == gl->INVALID_ENUM)) {
HXLINE( 136)										::haxe::Log_obj::trace(HX_("switching to DEPTH_COMPONENT16 for framebuffer",69,ed,16,03),::hx::SourceInfo(HX_("peote/view/utils/GLTool.hx",3d,2a,d3,ba),41,HX_("peote.view.utils.GLTool",00,20,8a,f7),HX_("createFramebuffer",51,ef,e8,cc)));
HXDLIN( 136)										gl->renderbufferStorage(gl->RENDERBUFFER,gl->DEPTH_COMPONENT16,width,height);
            									}
HXDLIN( 136)									gl->bindFramebuffer(gl->FRAMEBUFFER,framebuffer);
HXDLIN( 136)									gl->framebufferRenderbuffer(gl->FRAMEBUFFER,gl->DEPTH_ATTACHMENT,gl->RENDERBUFFER,depthBuffer);
HXDLIN( 136)									gl->framebufferTexture2D(gl->FRAMEBUFFER,gl->COLOR_ATTACHMENT0,gl->TEXTURE_2D,texture,0);
HXDLIN( 136)									int _hx_tmp9 = gl->checkFramebufferStatus(gl->FRAMEBUFFER);
HXDLIN( 136)									if ((_hx_tmp9 != gl->FRAMEBUFFER_COMPLETE)) {
HXLINE( 136)										HX_STACK_DO_THROW(HX_("Error: Framebuffer not complete!",5a,13,e6,19));
            									}
HXDLIN( 136)									gl->bindFramebuffer(gl->FRAMEBUFFER,null());
HXDLIN( 136)									gl->bindRenderbuffer(gl->RENDERBUFFER,null());
HXDLIN( 136)									t->framebuffer = framebuffer;
HXDLIN( 136)									t->updated = true;
            								}
HXDLIN( 136)								{
HXLINE( 136)									 ::Dynamic image = t->images->keys();
HXDLIN( 136)									while(( (bool)(image->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 136)										 ::peote::view::_TextureData::TextureDataImpl image1 = ( ( ::peote::view::_TextureData::TextureDataImpl)(image->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 136)										t->bufferImage(image1,t->images->get(image1));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 137)		{
HXLINE( 137)			 ::peote::view::Program _this1 = this->clickPickProgram;
HXDLIN( 137)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext newGl2 = peoteView->gl;
HXDLIN( 137)			bool _hx_tmp10;
HXDLIN( 137)			if (::hx::IsNotNull( newGl2 )) {
HXLINE( 137)				_hx_tmp10 = ::hx::IsInstanceNotEq( newGl2,_this1->gl );
            			}
            			else {
HXLINE( 137)				_hx_tmp10 = false;
            			}
HXDLIN( 137)			if (_hx_tmp10) {
HXLINE( 137)				{
HXLINE( 137)					int _g10 = 0;
HXDLIN( 137)					::Array< ::Dynamic> _g11 = _this1->displays;
HXDLIN( 137)					while((_g10 < _g11->length)){
HXLINE( 137)						 ::peote::view::Display d3 = _g11->__get(_g10).StaticCast<  ::peote::view::Display >();
HXDLIN( 137)						_g10 = (_g10 + 1);
HXDLIN( 137)						bool _hx_tmp11;
HXDLIN( 137)						if (::hx::IsNotNull( d3->gl )) {
HXLINE( 137)							_hx_tmp11 = ::hx::IsInstanceNotEq( d3->gl,newGl2 );
            						}
            						else {
HXLINE( 137)							_hx_tmp11 = false;
            						}
HXDLIN( 137)						if (_hx_tmp11) {
HXLINE( 137)							HX_STACK_DO_THROW(HX_("Error, program can not used inside different gl-contexts",ef,f8,25,08));
            						}
            					}
            				}
HXDLIN( 137)				if (::hx::IsNotNull( _this1->gl )) {
HXLINE( 137)					_this1->gl->deleteShader(_this1->glVertexShader);
HXDLIN( 137)					_this1->gl->deleteShader(_this1->glFragmentShader);
HXDLIN( 137)					_this1->gl->deleteProgram(_this1->glProgram);
HXDLIN( 137)					if (::peote::view::BufferInterface_obj::hasPicking(_this1->buffer)) {
HXLINE( 137)						_this1->gl->deleteShader(_this1->glVertexShaderPicking);
HXDLIN( 137)						_this1->gl->deleteShader(_this1->glFragmentShaderPicking);
HXDLIN( 137)						_this1->gl->deleteProgram(_this1->glProgramPicking);
            					}
            				}
HXDLIN( 137)				_this1->gl = newGl2;
HXDLIN( 137)				if (::peote::view::Version_obj::isES3) {
HXLINE( 137)					_this1->glShaderConfig->__SetField(HX_("isES3",5b,16,4b,c1),true,::hx::paccDynamic);
HXDLIN( 137)					_this1->glShaderConfig->__SetField(HX_("IN",e5,3f,00,00),HX_("in",e5,5b,00,00),::hx::paccDynamic);
HXDLIN( 137)					_this1->glShaderConfig->__SetField(HX_("VARIN",6c,3a,ab,af),HX_("in",e5,5b,00,00),::hx::paccDynamic);
HXDLIN( 137)					_this1->glShaderConfig->__SetField(HX_("VAROUT",07,78,2c,06),HX_("out",8e,a0,54,00),::hx::paccDynamic);
            				}
HXDLIN( 137)				_this1->glShaderConfig->__SetField(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
HXDLIN( 137)				if (::hx::IsNotNull( _this1->gl->getExtension(HX_("OES_standard_derivatives",8c,cb,00,04)) )) {
HXLINE( 137)					( (::Array< ::Dynamic>)(_this1->glShaderConfig->__Field(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::hx::paccDynamic)) )->push( ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("EXTENSION",5f,03,69,e0),HX_("GL_OES_standard_derivatives",26,6c,66,da))));
            				}
HXDLIN( 137)				if (::hx::IsNotNull( _this1->gl->getExtension(HX_("EXT_color_buffer_float",b7,19,0b,dd)) )) {
HXLINE( 137)					( (::Array< ::Dynamic>)(_this1->glShaderConfig->__Field(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::hx::paccDynamic)) )->push( ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("EXTENSION",5f,03,69,e0),HX_("EXT_color_buffer_float",b7,19,0b,dd))));
            				}
            				else {
HXLINE( 137)					if (::hx::IsNotNull( _this1->gl->getExtension(HX_("OES_texture_float",76,0b,21,02)) )) {
HXLINE( 137)						( (::Array< ::Dynamic>)(_this1->glShaderConfig->__Field(HX_("FRAGMENT_EXTENSIONS",63,3f,ba,2d),::hx::paccDynamic)) )->push( ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("EXTENSION",5f,03,69,e0),HX_("OES_texture_float",76,0b,21,02))));
            					}
            				}
HXDLIN( 137)				::peote::view::BufferInterface_obj::setNewGLContext(_this1->buffer,_this1->gl);
HXDLIN( 137)				{
HXLINE( 137)					_this1->createProg(null());
HXDLIN( 137)					if (::peote::view::BufferInterface_obj::hasPicking(_this1->buffer)) {
HXLINE( 137)						_this1->createProg(true);
            					}
            				}
HXDLIN( 137)				{
HXLINE( 137)					int _g12 = 0;
HXDLIN( 137)					::Array< ::Dynamic> _g13 = _this1->activeTextures;
HXDLIN( 137)					while((_g12 < _g13->length)){
HXLINE( 137)						 ::peote::view::Texture t3 = _g13->__get(_g12).StaticCast<  ::peote::view::Texture >();
HXDLIN( 137)						_g12 = (_g12 + 1);
HXDLIN( 137)						{
HXLINE( 137)							 ::lime::_internal::backend::native::NativeOpenGLRenderContext newGl3 = _this1->gl;
HXDLIN( 137)							bool _hx_tmp12;
HXDLIN( 137)							if (::hx::IsNotNull( newGl3 )) {
HXLINE( 137)								_hx_tmp12 = ::hx::IsInstanceNotEq( newGl3,t3->gl );
            							}
            							else {
HXLINE( 137)								_hx_tmp12 = false;
            							}
HXDLIN( 137)							if (_hx_tmp12) {
HXLINE( 137)								{
HXLINE( 137)									int _g14 = 0;
HXDLIN( 137)									::Array< ::Dynamic> _g15 = t3->programs;
HXDLIN( 137)									while((_g14 < _g15->length)){
HXLINE( 137)										 ::peote::view::Program p1 = _g15->__get(_g14).StaticCast<  ::peote::view::Program >();
HXDLIN( 137)										_g14 = (_g14 + 1);
HXDLIN( 137)										bool _hx_tmp13;
HXDLIN( 137)										if (::hx::IsNotNull( p1->gl )) {
HXLINE( 137)											_hx_tmp13 = ::hx::IsInstanceNotEq( p1->gl,newGl3 );
            										}
            										else {
HXLINE( 137)											_hx_tmp13 = false;
            										}
HXDLIN( 137)										if (_hx_tmp13) {
HXLINE( 137)											HX_STACK_DO_THROW(HX_("Error, texture can not used inside different gl-contexts",06,26,7d,73));
            										}
            									}
            								}
HXDLIN( 137)								{
HXLINE( 137)									int _g16 = 0;
HXDLIN( 137)									::Array< ::Dynamic> _g17 = t3->displays;
HXDLIN( 137)									while((_g16 < _g17->length)){
HXLINE( 137)										 ::peote::view::Display d4 = _g17->__get(_g16).StaticCast<  ::peote::view::Display >();
HXDLIN( 137)										_g16 = (_g16 + 1);
HXDLIN( 137)										bool _hx_tmp14;
HXDLIN( 137)										if (::hx::IsNotNull( d4->gl )) {
HXLINE( 137)											_hx_tmp14 = ::hx::IsInstanceNotEq( d4->gl,newGl3 );
            										}
            										else {
HXLINE( 137)											_hx_tmp14 = false;
            										}
HXDLIN( 137)										if (_hx_tmp14) {
HXLINE( 137)											HX_STACK_DO_THROW(HX_("Error, texture can not used inside different gl-contexts",06,26,7d,73));
            										}
            									}
            								}
HXDLIN( 137)								if (::hx::IsNotNull( t3->gl )) {
HXLINE( 137)									t3->gl->deleteTexture(t3->glTexture);
HXDLIN( 137)									t3->glTexture = null();
HXDLIN( 137)									bool _hx_tmp15;
HXDLIN( 137)									if ((t3->displays->length == 0)) {
HXLINE( 137)										_hx_tmp15 = ::hx::IsNotNull( t3->framebuffer );
            									}
            									else {
HXLINE( 137)										_hx_tmp15 = false;
            									}
HXDLIN( 137)									if (_hx_tmp15) {
HXLINE( 137)										t3->gl->deleteFramebuffer(t3->framebuffer);
HXDLIN( 137)										t3->framebuffer = null();
HXDLIN( 137)										if (::hx::IsNotNull( t3->glDepthBuffer )) {
HXLINE( 137)											t3->gl->deleteRenderbuffer(t3->glDepthBuffer);
            										}
HXDLIN( 137)										t3->glDepthBuffer = null();
            									}
            								}
HXDLIN( 137)								t3->gl = newGl3;
HXDLIN( 137)								{
HXLINE( 137)									bool _hx_tmp16;
HXDLIN( 137)									int t4 = t3->width;
HXDLIN( 137)									if (!(::hx::IsGreater( t4,t3->gl->getParameter(t3->gl->MAX_TEXTURE_SIZE) ))) {
HXLINE( 137)										int t5 = t3->height;
HXDLIN( 137)										_hx_tmp16 = ::hx::IsGreater( t5,t3->gl->getParameter(t3->gl->MAX_TEXTURE_SIZE) );
            									}
            									else {
HXLINE( 137)										_hx_tmp16 = true;
            									}
HXDLIN( 137)									if (_hx_tmp16) {
HXLINE( 137)										HX_STACK_DO_THROW(HX_("Error, texture size is greater then gl.MAX_TEXTURE_SIZE",84,65,32,52));
            									}
HXDLIN( 137)									t3->glTexture = ::peote::view::utils::TexUtils_obj::createEmptyTexture(t3->gl,t3->width,t3->height,t3->colorChannels,t3->createMipmaps,t3->magFilter,t3->minFilter,t3->useFloat);
            								}
HXDLIN( 137)								bool _hx_tmp17;
HXDLIN( 137)								if ((t3->displays->length > 0)) {
HXLINE( 137)									_hx_tmp17 = ::hx::IsNull( t3->framebuffer );
            								}
            								else {
HXLINE( 137)									_hx_tmp17 = false;
            								}
HXDLIN( 137)								if (_hx_tmp17) {
HXLINE( 137)									t3->glDepthBuffer = t3->gl->createRenderbuffer();
HXDLIN( 137)									 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl1 = t3->gl;
HXDLIN( 137)									 ::lime::graphics::opengl::GLObject texture1 = t3->glTexture;
HXDLIN( 137)									 ::lime::graphics::opengl::GLObject depthBuffer1 = t3->glDepthBuffer;
HXDLIN( 137)									int width1 = t3->width;
HXDLIN( 137)									int height1 = t3->height;
HXDLIN( 137)									 ::lime::graphics::opengl::GLObject framebuffer1 = gl1->createFramebuffer();
HXDLIN( 137)									gl1->bindRenderbuffer(gl1->RENDERBUFFER,depthBuffer1);
HXDLIN( 137)									::peote::view::utils::GLTool_obj::clearGlErrorQueue(gl1);
HXDLIN( 137)									gl1->renderbufferStorage(gl1->RENDERBUFFER,gl1->DEPTH_COMPONENT24,width1,height1);
HXDLIN( 137)									int _hx_tmp18 = ::peote::view::utils::GLTool_obj::getLastGlError(gl1);
HXDLIN( 137)									if ((_hx_tmp18 == gl1->INVALID_ENUM)) {
HXLINE( 137)										::haxe::Log_obj::trace(HX_("switching to DEPTH_COMPONENT16 for framebuffer",69,ed,16,03),::hx::SourceInfo(HX_("peote/view/utils/GLTool.hx",3d,2a,d3,ba),41,HX_("peote.view.utils.GLTool",00,20,8a,f7),HX_("createFramebuffer",51,ef,e8,cc)));
HXDLIN( 137)										gl1->renderbufferStorage(gl1->RENDERBUFFER,gl1->DEPTH_COMPONENT16,width1,height1);
            									}
HXDLIN( 137)									gl1->bindFramebuffer(gl1->FRAMEBUFFER,framebuffer1);
HXDLIN( 137)									gl1->framebufferRenderbuffer(gl1->FRAMEBUFFER,gl1->DEPTH_ATTACHMENT,gl1->RENDERBUFFER,depthBuffer1);
HXDLIN( 137)									gl1->framebufferTexture2D(gl1->FRAMEBUFFER,gl1->COLOR_ATTACHMENT0,gl1->TEXTURE_2D,texture1,0);
HXDLIN( 137)									int _hx_tmp19 = gl1->checkFramebufferStatus(gl1->FRAMEBUFFER);
HXDLIN( 137)									if ((_hx_tmp19 != gl1->FRAMEBUFFER_COMPLETE)) {
HXLINE( 137)										HX_STACK_DO_THROW(HX_("Error: Framebuffer not complete!",5a,13,e6,19));
            									}
HXDLIN( 137)									gl1->bindFramebuffer(gl1->FRAMEBUFFER,null());
HXDLIN( 137)									gl1->bindRenderbuffer(gl1->RENDERBUFFER,null());
HXDLIN( 137)									t3->framebuffer = framebuffer1;
HXDLIN( 137)									t3->updated = true;
            								}
HXDLIN( 137)								{
HXLINE( 137)									 ::Dynamic image2 = t3->images->keys();
HXDLIN( 137)									while(( (bool)(image2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 137)										 ::peote::view::_TextureData::TextureDataImpl image3 = ( ( ::peote::view::_TextureData::TextureDataImpl)(image2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 137)										t3->bufferImage(image3,t3->images->get(image3));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 138)		{
HXLINE( 138)			bool _hx_tmp20;
HXDLIN( 138)			if (addBefore) {
HXLINE( 138)				if (::hx::IsNotNull( atDisplay )) {
HXLINE( 138)					_hx_tmp20 = ::hx::IsInstanceEq( atDisplay,this->peoteView->displayList->first->value );
            				}
            				else {
HXLINE( 138)					_hx_tmp20 = true;
            				}
            			}
            			else {
HXLINE( 138)				_hx_tmp20 = false;
            			}
HXDLIN( 138)			if (_hx_tmp20) {
HXLINE( 138)				this->activeIndex = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
            			}
            			else {
HXLINE( 138)				 ::peote::view::utils::RenderListItem_peote_view_Display displayListItem = this->peoteView->displayList->first;
HXDLIN( 138)				 ::peote::view::utils::RenderListItem_peote_view_Display toItem = ( ( ::peote::view::utils::RenderListItem_peote_view_Display)(this->peoteView->displayList->itemMap->get(( ( ::peote::view::Display)(::hx::ObjectPtr<OBJ_>(this)) ))) );
HXDLIN( 138)				int i1 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN( 138)				while(::hx::IsInstanceNotEq( displayListItem,toItem )){
HXLINE( 138)					if (::Std_obj::isOfType(displayListItem->value,::hx::ClassOf< ::peote::ui::PeoteUIDisplay >())) {
HXLINE( 138)						 ::peote::ui::PeoteUIDisplay d5 = ( ( ::peote::ui::PeoteUIDisplay)(displayListItem->value) );
HXDLIN( 138)						i1 = d5->activeIndex;
HXDLIN( 138)						d5->activeIndex = (d5->activeIndex + 1);
HXDLIN( 138)						::peote::ui::PeoteUIDisplay_obj::activeUIDisplay->__unsafe_set(d5->activeIndex,d5);
            					}
HXDLIN( 138)					displayListItem = displayListItem->next;
            				}
HXDLIN( 138)				this->activeIndex = i1;
            			}
HXDLIN( 138)			::peote::ui::PeoteUIDisplay_obj::maxActiveIndex++;
HXDLIN( 138)			::peote::ui::PeoteUIDisplay_obj::activeUIDisplay->__unsafe_set(this->activeIndex,::hx::ObjectPtr<OBJ_>(this));
            		}
            	}


void PeoteUIDisplay_obj::add( ::peote::ui::interactive::Interactive uiElement){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_299_add)
HXLINE( 301)		bool _hx_tmp;
HXDLIN( 301)		if (uiElement->isVisible) {
HXLINE( 301)			_hx_tmp = ::hx::IsNotNull( uiElement->uiDisplay );
            		}
            		else {
HXLINE( 301)			_hx_tmp = false;
            		}
HXDLIN( 301)		if (_hx_tmp) {
HXLINE( 304)			HX_STACK_DO_THROW((HX_("Error, uiElement is already added to UIDisplay ",ed,99,68,2c) + uiElement->uiDisplay->number));
            		}
HXLINE( 306)		this->uiElements->push(uiElement);
HXLINE( 307)		{
HXLINE( 307)			uiElement->uiDisplay = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 307)			uiElement->isVisible = true;
HXDLIN( 307)			uiElement->onAddVisibleToDisplay();
HXDLIN( 307)			if ((uiElement->hasMoveEvent != 0)) {
HXLINE( 307)				uiElement->addPickableMove();
            			}
HXDLIN( 307)			if ((uiElement->hasClickEvent != 0)) {
HXLINE( 307)				uiElement->addPickableClick();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PeoteUIDisplay_obj,add,(void))

void PeoteUIDisplay_obj::remove( ::peote::ui::interactive::Interactive uiElement){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_310_remove)
HXLINE( 314)		if ((this->lastMouseOverIndex >= 0)) {
HXLINE( 315)			 ::peote::ui::interactive::Interactive lastElem = this->movePickBuffer->getElement(this->lastMouseOverIndex)->uiElement;
HXLINE( 316)			if (::hx::IsInstanceEq( lastElem,uiElement )) {
HXLINE( 317)				while(::hx::IsNotNull( lastElem )){
HXLINE( 318)					lastElem->pointerOut( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("x",78,00,00,00),-1)
            						->setFixed(1,HX_("y",79,00,00,00),-1)
            						->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXLINE( 319)					lastElem = lastElem->overOutEventsBubbleTo;
            				}
HXLINE( 321)				this->lastMouseOverIndex = -1;
            			}
            		}
HXLINE( 325)		this->uiElements->remove(uiElement);
HXLINE( 326)		{
HXLINE( 326)			if (::hx::IsInstanceNotEq( ::hx::ObjectPtr<OBJ_>(this),uiElement->uiDisplay )) {
HXLINE( 326)				::String _hx_tmp = ((HX_("Error, ",1c,9c,5b,b7) + ::Std_obj::string(uiElement)) + HX_(" is not inside uiDisplay: ",93,3a,74,03));
HXDLIN( 326)				HX_STACK_DO_THROW((_hx_tmp + ::Std_obj::string(::hx::ObjectPtr<OBJ_>(this))));
            			}
HXDLIN( 326)			uiElement->onRemoveVisibleFromDisplay();
HXDLIN( 326)			if ((uiElement->hasMoveEvent != 0)) {
HXLINE( 326)				uiElement->removePickableMove();
            			}
HXDLIN( 326)			if ((uiElement->hasClickEvent != 0)) {
HXLINE( 326)				uiElement->removePickableClick();
            			}
HXDLIN( 326)			uiElement->isVisible = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PeoteUIDisplay_obj,remove,(void))

void PeoteUIDisplay_obj::update( ::peote::ui::interactive::Interactive uiElement){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_342_update)
HXDLIN( 342)		uiElement->update();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PeoteUIDisplay_obj,update,(void))

void PeoteUIDisplay_obj::startDraggingElement( ::peote::ui::interactive::Interactive uiElement, ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_355_startDraggingElement)
HXDLIN( 355)		if (!(uiElement->isDragging)) {
HXLINE( 356)			uiElement->isDragging = true;
HXLINE( 357)			switch((int)(( (int)(e->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))){
            				case (int)0: {
HXLINE( 358)					this->draggingMouseElements->push(uiElement);
            				}
            				break;
            				case (int)1: {
HXLINE( 359)					( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->draggingTouchElements,( ( ::lime::ui::Touch)(e->__Field(HX_("touch",bf,17,33,14),::hx::paccDynamic)) )->id)) )->push(uiElement);
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PeoteUIDisplay_obj,startDraggingElement,(void))

void PeoteUIDisplay_obj::stopDraggingElement( ::peote::ui::interactive::Interactive uiElement, ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_368_stopDraggingElement)
HXDLIN( 368)		if (uiElement->isDragging) {
HXLINE( 369)			uiElement->isDragging = false;
HXLINE( 370)			switch((int)(( (int)(e->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ))){
            				case (int)0: {
HXLINE( 372)					this->draggingMouseElements->remove(uiElement);
HXLINE( 373)					if ((this->draggingMouseElements->length == 0)) {
HXLINE( 373)						Float mouseX = ( (Float)(e->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 373)						Float mouseY = ( (Float)(e->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 373)						int checkForEvent = 3;
HXDLIN( 373)						bool _hx_tmp;
HXDLIN( 373)						if (this->mouseEnabled) {
HXLINE( 373)							_hx_tmp = ::hx::IsNotNull( this->peoteView );
            						}
            						else {
HXLINE( 373)							_hx_tmp = false;
            						}
HXDLIN( 373)						if (_hx_tmp) {
HXLINE( 373)							int x = ::Std_obj::_hx_int((this->lastMouseX = mouseX));
HXDLIN( 373)							int y = ::Std_obj::_hx_int((this->lastMouseY = mouseY));
HXDLIN( 373)							bool isInside = false;
HXDLIN( 373)							int pickedIndex = -1;
HXDLIN( 373)							bool _hx_tmp1;
HXDLIN( 373)							if ((checkForEvent > 0)) {
HXLINE( 373)								int px = x;
HXDLIN( 373)								int py = y;
HXDLIN( 373)								px = ::Std_obj::_hx_int(((( (Float)(px) ) / this->peoteView->xz) - this->peoteView->xOffset));
HXDLIN( 373)								py = ::Std_obj::_hx_int(((( (Float)(py) ) / this->peoteView->yz) - this->peoteView->yOffset));
HXDLIN( 373)								bool _hx_tmp2;
HXDLIN( 373)								bool _hx_tmp3;
HXDLIN( 373)								if ((px >= this->x)) {
HXLINE( 373)									_hx_tmp3 = (px < (this->x + this->width));
            								}
            								else {
HXLINE( 373)									_hx_tmp3 = false;
            								}
HXDLIN( 373)								if (_hx_tmp3) {
HXLINE( 373)									_hx_tmp2 = (py >= this->y);
            								}
            								else {
HXLINE( 373)									_hx_tmp2 = false;
            								}
HXDLIN( 373)								if (_hx_tmp2) {
HXLINE( 373)									_hx_tmp1 = (py < (this->y + this->height));
            								}
            								else {
HXLINE( 373)									_hx_tmp1 = false;
            								}
            							}
            							else {
HXLINE( 373)								_hx_tmp1 = false;
            							}
HXDLIN( 373)							if (_hx_tmp1) {
HXLINE( 373)								isInside = true;
HXDLIN( 373)								pickedIndex = this->peoteView->getElementAt(mouseX,mouseY,::hx::ObjectPtr<OBJ_>(this),this->movePickProgram);
            							}
HXDLIN( 373)							if (::hx::IsNotNull( ::peote::ui::PeoteUIDisplay_obj::intoSelectionTextLine )) {
HXLINE( 373)								::Dynamic _hx_tmp4 = ::peote::ui::PeoteUIDisplay_obj::intoSelectionTextLine;
HXDLIN( 373)								 ::peote::view::PeoteView peoteView = null();
HXDLIN( 373)								if (::hx::IsNull( peoteView )) {
HXLINE( 373)									peoteView = this->peoteView;
            								}
HXDLIN( 373)								Float _hx_tmp5;
HXDLIN( 373)								if (::hx::IsNotNull( peoteView )) {
HXLINE( 373)									_hx_tmp5 = (((((( (Float)(x) ) / peoteView->xz) - peoteView->xOffset) - this->xOffset) - ( (Float)(this->x) )) / this->xz);
            								}
            								else {
HXLINE( 373)									_hx_tmp5 = (((( (Float)(x) ) - this->xOffset) - ( (Float)(this->x) )) / this->xz);
            								}
HXDLIN( 373)								int _hx_tmp6 = ::Std_obj::_hx_int(_hx_tmp5);
HXDLIN( 373)								 ::peote::view::PeoteView peoteView1 = null();
HXDLIN( 373)								if (::hx::IsNull( peoteView1 )) {
HXLINE( 373)									peoteView1 = this->peoteView;
            								}
HXDLIN( 373)								Float _hx_tmp7;
HXDLIN( 373)								if (::hx::IsNotNull( peoteView1 )) {
HXLINE( 373)									_hx_tmp7 = (((((( (Float)(y) ) / peoteView1->xz) - peoteView1->xOffset) - this->xOffset) - ( (Float)(this->x) )) / this->xz);
            								}
            								else {
HXLINE( 373)									_hx_tmp7 = (((( (Float)(y) ) - this->xOffset) - ( (Float)(this->x) )) / this->xz);
            								}
HXDLIN( 373)								::peote::ui::interactive::interfaces::InputText_obj::onSelect(_hx_tmp4, ::Dynamic(::hx::Anon_obj::Create(3)
            									->setFixed(0,HX_("x",78,00,00,00),_hx_tmp6)
            									->setFixed(1,HX_("y",79,00,00,00),::Std_obj::_hx_int(_hx_tmp7))
            									->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            							}
            							else {
HXLINE( 373)								if ((this->draggingMouseElements->length > 0)) {
HXLINE( 373)									int _g = 0;
HXDLIN( 373)									::Array< ::Dynamic> _g1 = this->draggingMouseElements;
HXDLIN( 373)									while((_g < _g1->length)){
HXLINE( 373)										 ::peote::ui::interactive::Interactive uiElement1 = _g1->__get(_g).StaticCast<  ::peote::ui::interactive::Interactive >();
HXDLIN( 373)										_g = (_g + 1);
HXDLIN( 373)										{
HXLINE( 373)											int dragToX = x;
HXDLIN( 373)											int dragToY = y;
HXDLIN( 373)											dragToX = ::Std_obj::_hx_int(((( (Float)(dragToX) ) / uiElement1->uiDisplay->peoteView->xz) / uiElement1->uiDisplay->xz));
HXDLIN( 373)											dragToY = ::Std_obj::_hx_int(((( (Float)(dragToY) ) / uiElement1->uiDisplay->peoteView->yz) / uiElement1->uiDisplay->yz));
HXDLIN( 373)											if ((dragToX >= (uiElement1->dragMinX + uiElement1->dragOriginX))) {
HXLINE( 373)												if ((dragToX < ((uiElement1->dragMaxX - uiElement1->width) + uiElement1->dragOriginX))) {
HXLINE( 373)													uiElement1->x = (dragToX - uiElement1->dragOriginX);
            												}
            												else {
HXLINE( 373)													uiElement1->x = (uiElement1->dragMaxX - uiElement1->width);
            												}
            											}
            											else {
HXLINE( 373)												uiElement1->x = uiElement1->dragMinX;
            											}
HXDLIN( 373)											if ((dragToY >= (uiElement1->dragMinY + uiElement1->dragOriginY))) {
HXLINE( 373)												if ((dragToY < ((uiElement1->dragMaxY - uiElement1->height) + uiElement1->dragOriginY))) {
HXLINE( 373)													uiElement1->y = (dragToY - uiElement1->dragOriginY);
            												}
            												else {
HXLINE( 373)													uiElement1->y = (uiElement1->dragMaxY - uiElement1->height);
            												}
            											}
            											else {
HXLINE( 373)												uiElement1->y = uiElement1->dragMinY;
            											}
HXDLIN( 373)											if (::hx::IsNotNull( uiElement1->drag )) {
HXLINE( 373)												int _dx = ((uiElement1->dragMaxX - uiElement1->dragMinX) - uiElement1->width);
HXDLIN( 373)												int _dy = ((uiElement1->dragMaxY - uiElement1->dragMinY) - uiElement1->height);
HXDLIN( 373)												Float _hx_tmp8;
HXDLIN( 373)												if ((_dx != 0)) {
HXLINE( 373)													_hx_tmp8 = (( (Float)((uiElement1->x - uiElement1->dragMinX)) ) / ( (Float)(_dx) ));
            												}
            												else {
HXLINE( 373)													_hx_tmp8 = ((Float)0.0);
            												}
HXDLIN( 373)												Float _hx_tmp9;
HXDLIN( 373)												if ((_dy != 0)) {
HXLINE( 373)													_hx_tmp9 = (( (Float)((uiElement1->y - uiElement1->dragMinY)) ) / ( (Float)(_dy) ));
            												}
            												else {
HXLINE( 373)													_hx_tmp9 = ((Float)0.0);
            												}
HXDLIN( 373)												uiElement1->drag(_hx_tmp8,_hx_tmp9);
            											}
            										}
HXDLIN( 373)										uiElement1->updateLayout();
            									}
            								}
            								else {
HXLINE( 373)									bool hasEventOver = false;
HXDLIN( 373)									bool hasEventOut = false;
HXDLIN( 373)									if ((pickedIndex != this->lastMouseOverIndex)) {
HXLINE( 373)										if ((this->lastMouseOverIndex >= 0)) {
HXLINE( 373)											 ::peote::ui::interactive::Interactive lastElem = this->movePickBuffer->getElement(this->lastMouseOverIndex)->uiElement;
HXDLIN( 373)											if ((pickedIndex >= 0)) {
HXLINE( 373)												 ::peote::ui::interactive::Interactive pickedElem = this->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN( 373)												if (lastElem->intoOverOutEventBubbleOf(pickedElem)) {
HXLINE( 373)													while(true){
HXLINE( 373)														bool _hx_tmp10;
HXDLIN( 373)														if (::hx::IsNotNull( pickedElem )) {
HXLINE( 373)															_hx_tmp10 = ::hx::IsInstanceNotEq( pickedElem,lastElem );
            														}
            														else {
HXLINE( 373)															_hx_tmp10 = false;
            														}
HXDLIN( 373)														if (!(_hx_tmp10)) {
HXLINE( 373)															goto _hx_goto_23;
            														}
HXDLIN( 373)														pickedElem->pointerOver( ::Dynamic(::hx::Anon_obj::Create(3)
            															->setFixed(0,HX_("x",78,00,00,00),x)
            															->setFixed(1,HX_("y",79,00,00,00),y)
            															->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 373)														bool _hx_tmp11;
HXDLIN( 373)														if (::hx::IsNull( pickedElem->overOutEventsBubbleTo )) {
HXLINE( 373)															_hx_tmp11 = !(pickedElem->overOutEventsBubbleToDisplay);
            														}
            														else {
HXLINE( 373)															_hx_tmp11 = false;
            														}
HXDLIN( 373)														if (_hx_tmp11) {
HXLINE( 373)															hasEventOut = true;
            														}
HXDLIN( 373)														pickedElem = pickedElem->overOutEventsBubbleTo;
            													}
            													_hx_goto_23:;
            												}
            												else {
HXLINE( 373)													while(true){
HXLINE( 373)														bool _hx_tmp12;
HXDLIN( 373)														if (::hx::IsNotNull( lastElem )) {
HXLINE( 373)															_hx_tmp12 = ::hx::IsInstanceNotEq( lastElem,pickedElem );
            														}
            														else {
HXLINE( 373)															_hx_tmp12 = false;
            														}
HXDLIN( 373)														if (!(_hx_tmp12)) {
HXLINE( 373)															goto _hx_goto_24;
            														}
HXDLIN( 373)														lastElem->pointerOut( ::Dynamic(::hx::Anon_obj::Create(3)
            															->setFixed(0,HX_("x",78,00,00,00),x)
            															->setFixed(1,HX_("y",79,00,00,00),y)
            															->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 373)														bool _hx_tmp13;
HXDLIN( 373)														if (::hx::IsNull( lastElem->overOutEventsBubbleTo )) {
HXLINE( 373)															_hx_tmp13 = !(lastElem->overOutEventsBubbleToDisplay);
            														}
            														else {
HXLINE( 373)															_hx_tmp13 = false;
            														}
HXDLIN( 373)														if (_hx_tmp13) {
HXLINE( 373)															hasEventOver = true;
            														}
HXDLIN( 373)														lastElem = lastElem->overOutEventsBubbleTo;
            													}
            													_hx_goto_24:;
HXDLIN( 373)													if (::hx::IsNull( lastElem )) {
HXLINE( 373)														while(::hx::IsNotNull( pickedElem )){
HXLINE( 373)															pickedElem->pointerOver( ::Dynamic(::hx::Anon_obj::Create(3)
            																->setFixed(0,HX_("x",78,00,00,00),x)
            																->setFixed(1,HX_("y",79,00,00,00),y)
            																->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 373)															bool _hx_tmp14;
HXDLIN( 373)															if (::hx::IsNull( pickedElem->overOutEventsBubbleTo )) {
HXLINE( 373)																_hx_tmp14 = !(pickedElem->overOutEventsBubbleToDisplay);
            															}
            															else {
HXLINE( 373)																_hx_tmp14 = false;
            															}
HXDLIN( 373)															if (_hx_tmp14) {
HXLINE( 373)																hasEventOut = true;
            															}
HXDLIN( 373)															pickedElem = pickedElem->overOutEventsBubbleTo;
            														}
            													}
            												}
            											}
            											else {
HXLINE( 373)												while(::hx::IsNotNull( lastElem )){
HXLINE( 373)													lastElem->pointerOut( ::Dynamic(::hx::Anon_obj::Create(3)
            														->setFixed(0,HX_("x",78,00,00,00),x)
            														->setFixed(1,HX_("y",79,00,00,00),y)
            														->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 373)													bool _hx_tmp15;
HXDLIN( 373)													if (::hx::IsNull( lastElem->overOutEventsBubbleTo )) {
HXLINE( 373)														_hx_tmp15 = !(lastElem->overOutEventsBubbleToDisplay);
            													}
            													else {
HXLINE( 373)														_hx_tmp15 = false;
            													}
HXDLIN( 373)													if (_hx_tmp15) {
HXLINE( 373)														hasEventOver = true;
            													}
HXDLIN( 373)													lastElem = lastElem->overOutEventsBubbleTo;
            												}
            											}
            										}
            										else {
HXLINE( 373)											if ((pickedIndex >= 0)) {
HXLINE( 373)												 ::peote::ui::interactive::Interactive pickedElem1 = this->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN( 373)												while(::hx::IsNotNull( pickedElem1 )){
HXLINE( 373)													pickedElem1->pointerOver( ::Dynamic(::hx::Anon_obj::Create(3)
            														->setFixed(0,HX_("x",78,00,00,00),x)
            														->setFixed(1,HX_("y",79,00,00,00),y)
            														->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 373)													bool _hx_tmp16;
HXDLIN( 373)													if (::hx::IsNull( pickedElem1->overOutEventsBubbleTo )) {
HXLINE( 373)														_hx_tmp16 = !(pickedElem1->overOutEventsBubbleToDisplay);
            													}
            													else {
HXLINE( 373)														_hx_tmp16 = false;
            													}
HXDLIN( 373)													if (_hx_tmp16) {
HXLINE( 373)														hasEventOut = true;
            													}
HXDLIN( 373)													pickedElem1 = pickedElem1->overOutEventsBubbleTo;
            												}
            											}
            										}
HXDLIN( 373)										this->lastMouseOverIndex = pickedIndex;
            									}
HXDLIN( 373)									if (((checkForEvent & 2) != 0)) {
HXLINE( 373)										bool hasEventMove = false;
HXDLIN( 373)										if ((pickedIndex >= 0)) {
HXLINE( 373)											 ::peote::ui::interactive::Interactive pickedElem2 = this->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN( 373)											while(::hx::IsNotNull( pickedElem2 )){
HXLINE( 373)												pickedElem2->pointerMove( ::Dynamic(::hx::Anon_obj::Create(3)
            													->setFixed(0,HX_("x",78,00,00,00),x)
            													->setFixed(1,HX_("y",79,00,00,00),y)
            													->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN( 373)												bool _hx_tmp17;
HXDLIN( 373)												if (::hx::IsNull( pickedElem2->moveEventsBubbleTo )) {
HXLINE( 373)													_hx_tmp17 = pickedElem2->moveEventsBubbleToDisplay;
            												}
            												else {
HXLINE( 373)													_hx_tmp17 = false;
            												}
HXDLIN( 373)												if (_hx_tmp17) {
HXLINE( 373)													hasEventMove = true;
            												}
HXDLIN( 373)												pickedElem2 = pickedElem2->moveEventsBubbleTo;
            											}
            										}
            										else {
HXLINE( 373)											hasEventMove = true;
            										}
HXDLIN( 373)										if (hasEventMove) {
HXLINE( 373)											if (::hx::IsNotNull( this->onPointerMove )) {
HXLINE( 373)												this->onPointerMove(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(3)
            													->setFixed(0,HX_("x",78,00,00,00),x)
            													->setFixed(1,HX_("y",79,00,00,00),y)
            													->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            											}
HXDLIN( 373)											if (!(this->moveEventsBubble)) {
HXLINE( 373)												checkForEvent = (checkForEvent - 2);
            											}
            										}
            										else {
HXLINE( 373)											checkForEvent = (checkForEvent - 2);
            										}
            									}
HXDLIN( 373)									if (((checkForEvent & 1) != 0)) {
HXLINE( 373)										if (isInside) {
HXLINE( 373)											if (!(this->isMouseInside)) {
HXLINE( 373)												this->isMouseInside = true;
HXDLIN( 373)												hasEventOver = true;
            											}
            										}
            										else {
HXLINE( 373)											if (this->isMouseInside) {
HXLINE( 373)												this->isMouseInside = false;
HXDLIN( 373)												hasEventOut = true;
            											}
            										}
HXDLIN( 373)										bool _hx_tmp18;
HXDLIN( 373)										if (hasEventOver) {
HXLINE( 373)											_hx_tmp18 = !(hasEventOut);
            										}
            										else {
HXLINE( 373)											_hx_tmp18 = false;
            										}
HXDLIN( 373)										if (_hx_tmp18) {
HXLINE( 373)											if (::hx::IsNotNull( this->onPointerOver )) {
HXLINE( 373)												this->onPointerOver(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(3)
            													->setFixed(0,HX_("x",78,00,00,00),x)
            													->setFixed(1,HX_("y",79,00,00,00),y)
            													->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            											}
HXDLIN( 373)											this->isMouseOver = true;
            										}
            										else {
HXLINE( 373)											bool _hx_tmp19;
HXDLIN( 373)											if (hasEventOut) {
HXLINE( 373)												_hx_tmp19 = !(hasEventOver);
            											}
            											else {
HXLINE( 373)												_hx_tmp19 = false;
            											}
HXDLIN( 373)											if (_hx_tmp19) {
HXLINE( 373)												if (::hx::IsNotNull( this->onPointerOut )) {
HXLINE( 373)													this->onPointerOut(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(3)
            														->setFixed(0,HX_("x",78,00,00,00),x)
            														->setFixed(1,HX_("y",79,00,00,00),y)
            														->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            												}
HXDLIN( 373)												this->isMouseOver = false;
            											}
            										}
HXDLIN( 373)										if (this->isMouseInside) {
HXLINE( 373)											bool _hx_tmp20;
HXDLIN( 373)											if (this->isMouseOver) {
HXLINE( 373)												_hx_tmp20 = !(this->overOutEventsBubble);
            											}
            											else {
HXLINE( 373)												_hx_tmp20 = true;
            											}
HXDLIN( 373)											if (_hx_tmp20) {
HXLINE( 373)												checkForEvent = (checkForEvent - 1);
            											}
            										}
            									}
            									else {
HXLINE( 373)										if (this->isMouseInside) {
HXLINE( 373)											if (::hx::IsNotNull( this->onPointerOut )) {
HXLINE( 373)												this->onPointerOut(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(3)
            													->setFixed(0,HX_("x",78,00,00,00),x)
            													->setFixed(1,HX_("y",79,00,00,00),y)
            													->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            											}
HXDLIN( 373)											this->isMouseInside = (this->isMouseOver = false);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 376)					::Array< ::Dynamic> draggingTouchElemArray = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->draggingTouchElements,( ( ::lime::ui::Touch)(e->__Field(HX_("touch",bf,17,33,14),::hx::paccDynamic)) )->id)) );
HXLINE( 377)					draggingTouchElemArray->remove(uiElement);
HXLINE( 378)					if ((draggingTouchElemArray->length == 0)) {
HXLINE( 378)						 ::lime::ui::Touch touch = ( ( ::lime::ui::Touch)(e->__Field(HX_("touch",bf,17,33,14),::hx::paccDynamic)) );
HXDLIN( 378)						int checkForEvent1 = 3;
HXDLIN( 378)						bool _hx_tmp21;
HXDLIN( 378)						bool _hx_tmp22;
HXDLIN( 378)						if (this->touchEnabled) {
HXLINE( 378)							_hx_tmp22 = ::hx::IsNotNull( this->peoteView );
            						}
            						else {
HXLINE( 378)							_hx_tmp22 = false;
            						}
HXDLIN( 378)						if (_hx_tmp22) {
HXLINE( 378)							_hx_tmp21 = (touch->id < this->maxTouchpoints);
            						}
            						else {
HXLINE( 378)							_hx_tmp21 = false;
            						}
HXDLIN( 378)						if (_hx_tmp21) {
HXLINE( 378)							int x1 = ::Math_obj::round((touch->x * ( (Float)(this->peoteView->width) )));
HXDLIN( 378)							int y1 = ::Math_obj::round((touch->y * ( (Float)(this->peoteView->height) )));
HXDLIN( 378)							bool isInside1 = false;
HXDLIN( 378)							int pickedIndex1 = -1;
HXDLIN( 378)							bool _hx_tmp23;
HXDLIN( 378)							if ((checkForEvent1 > 0)) {
HXLINE( 378)								int px1 = x1;
HXDLIN( 378)								int py1 = y1;
HXDLIN( 378)								px1 = ::Std_obj::_hx_int(((( (Float)(px1) ) / this->peoteView->xz) - this->peoteView->xOffset));
HXDLIN( 378)								py1 = ::Std_obj::_hx_int(((( (Float)(py1) ) / this->peoteView->yz) - this->peoteView->yOffset));
HXDLIN( 378)								bool _hx_tmp24;
HXDLIN( 378)								bool _hx_tmp25;
HXDLIN( 378)								if ((px1 >= this->x)) {
HXLINE( 378)									_hx_tmp25 = (px1 < (this->x + this->width));
            								}
            								else {
HXLINE( 378)									_hx_tmp25 = false;
            								}
HXDLIN( 378)								if (_hx_tmp25) {
HXLINE( 378)									_hx_tmp24 = (py1 >= this->y);
            								}
            								else {
HXLINE( 378)									_hx_tmp24 = false;
            								}
HXDLIN( 378)								if (_hx_tmp24) {
HXLINE( 378)									_hx_tmp23 = (py1 < (this->y + this->height));
            								}
            								else {
HXLINE( 378)									_hx_tmp23 = false;
            								}
            							}
            							else {
HXLINE( 378)								_hx_tmp23 = false;
            							}
HXDLIN( 378)							if (_hx_tmp23) {
HXLINE( 378)								isInside1 = true;
HXDLIN( 378)								pickedIndex1 = this->peoteView->getElementAt(( (Float)(x1) ),( (Float)(y1) ),::hx::ObjectPtr<OBJ_>(this),this->movePickProgram);
            							}
HXDLIN( 378)							::Array< ::Dynamic> draggingTouchElemArray1 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->draggingTouchElements,touch->id)) );
HXDLIN( 378)							if ((draggingTouchElemArray1->length > 0)) {
HXLINE( 378)								int _g2 = 0;
HXDLIN( 378)								while((_g2 < draggingTouchElemArray1->length)){
HXLINE( 378)									 ::peote::ui::interactive::Interactive uiElement2 = draggingTouchElemArray1->__get(_g2).StaticCast<  ::peote::ui::interactive::Interactive >();
HXDLIN( 378)									_g2 = (_g2 + 1);
HXDLIN( 378)									{
HXLINE( 378)										int dragToX1 = x1;
HXDLIN( 378)										int dragToY1 = y1;
HXDLIN( 378)										dragToX1 = ::Std_obj::_hx_int(((( (Float)(dragToX1) ) / uiElement2->uiDisplay->peoteView->xz) / uiElement2->uiDisplay->xz));
HXDLIN( 378)										dragToY1 = ::Std_obj::_hx_int(((( (Float)(dragToY1) ) / uiElement2->uiDisplay->peoteView->yz) / uiElement2->uiDisplay->yz));
HXDLIN( 378)										if ((dragToX1 >= (uiElement2->dragMinX + uiElement2->dragOriginX))) {
HXLINE( 378)											if ((dragToX1 < ((uiElement2->dragMaxX - uiElement2->width) + uiElement2->dragOriginX))) {
HXLINE( 378)												uiElement2->x = (dragToX1 - uiElement2->dragOriginX);
            											}
            											else {
HXLINE( 378)												uiElement2->x = (uiElement2->dragMaxX - uiElement2->width);
            											}
            										}
            										else {
HXLINE( 378)											uiElement2->x = uiElement2->dragMinX;
            										}
HXDLIN( 378)										if ((dragToY1 >= (uiElement2->dragMinY + uiElement2->dragOriginY))) {
HXLINE( 378)											if ((dragToY1 < ((uiElement2->dragMaxY - uiElement2->height) + uiElement2->dragOriginY))) {
HXLINE( 378)												uiElement2->y = (dragToY1 - uiElement2->dragOriginY);
            											}
            											else {
HXLINE( 378)												uiElement2->y = (uiElement2->dragMaxY - uiElement2->height);
            											}
            										}
            										else {
HXLINE( 378)											uiElement2->y = uiElement2->dragMinY;
            										}
HXDLIN( 378)										if (::hx::IsNotNull( uiElement2->drag )) {
HXLINE( 378)											int _dx1 = ((uiElement2->dragMaxX - uiElement2->dragMinX) - uiElement2->width);
HXDLIN( 378)											int _dy1 = ((uiElement2->dragMaxY - uiElement2->dragMinY) - uiElement2->height);
HXDLIN( 378)											Float _hx_tmp26;
HXDLIN( 378)											if ((_dx1 != 0)) {
HXLINE( 378)												_hx_tmp26 = (( (Float)((uiElement2->x - uiElement2->dragMinX)) ) / ( (Float)(_dx1) ));
            											}
            											else {
HXLINE( 378)												_hx_tmp26 = ((Float)0.0);
            											}
HXDLIN( 378)											Float _hx_tmp27;
HXDLIN( 378)											if ((_dy1 != 0)) {
HXLINE( 378)												_hx_tmp27 = (( (Float)((uiElement2->y - uiElement2->dragMinY)) ) / ( (Float)(_dy1) ));
            											}
            											else {
HXLINE( 378)												_hx_tmp27 = ((Float)0.0);
            											}
HXDLIN( 378)											uiElement2->drag(_hx_tmp26,_hx_tmp27);
            										}
            									}
HXDLIN( 378)									this->update(uiElement2);
            								}
            							}
            							else {
HXLINE( 378)								bool hasEventOver1 = false;
HXDLIN( 378)								bool hasEventOut1 = false;
HXDLIN( 378)								int lastOverIndex = ( (int)(_hx_array_unsafe_get(this->lastTouchOverIndex,touch->id)) );
HXDLIN( 378)								if ((pickedIndex1 != lastOverIndex)) {
HXLINE( 378)									if ((lastOverIndex >= 0)) {
HXLINE( 378)										 ::peote::ui::interactive::Interactive lastElem1 = this->movePickBuffer->getElement(lastOverIndex)->uiElement;
HXDLIN( 378)										if ((pickedIndex1 >= 0)) {
HXLINE( 378)											 ::peote::ui::interactive::Interactive pickedElem3 = this->movePickBuffer->getElement(pickedIndex1)->uiElement;
HXDLIN( 378)											if (lastElem1->intoOverOutEventBubbleOf(pickedElem3)) {
HXLINE( 378)												while(true){
HXLINE( 378)													bool _hx_tmp28;
HXDLIN( 378)													if (::hx::IsNotNull( pickedElem3 )) {
HXLINE( 378)														_hx_tmp28 = ::hx::IsInstanceNotEq( pickedElem3,lastElem1 );
            													}
            													else {
HXLINE( 378)														_hx_tmp28 = false;
            													}
HXDLIN( 378)													if (!(_hx_tmp28)) {
HXLINE( 378)														goto _hx_goto_30;
            													}
HXDLIN( 378)													pickedElem3->pointerOver( ::Dynamic(::hx::Anon_obj::Create(4)
            														->setFixed(0,HX_("x",78,00,00,00),x1)
            														->setFixed(1,HX_("y",79,00,00,00),y1)
            														->setFixed(2,HX_("touch",bf,17,33,14),touch)
            														->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN( 378)													bool _hx_tmp29;
HXDLIN( 378)													if (::hx::IsNull( pickedElem3->overOutEventsBubbleTo )) {
HXLINE( 378)														_hx_tmp29 = !(pickedElem3->overOutEventsBubbleToDisplay);
            													}
            													else {
HXLINE( 378)														_hx_tmp29 = false;
            													}
HXDLIN( 378)													if (_hx_tmp29) {
HXLINE( 378)														hasEventOut1 = true;
            													}
HXDLIN( 378)													pickedElem3 = pickedElem3->overOutEventsBubbleTo;
            												}
            												_hx_goto_30:;
            											}
            											else {
HXLINE( 378)												while(true){
HXLINE( 378)													bool _hx_tmp30;
HXDLIN( 378)													if (::hx::IsNotNull( lastElem1 )) {
HXLINE( 378)														_hx_tmp30 = ::hx::IsInstanceNotEq( lastElem1,pickedElem3 );
            													}
            													else {
HXLINE( 378)														_hx_tmp30 = false;
            													}
HXDLIN( 378)													if (!(_hx_tmp30)) {
HXLINE( 378)														goto _hx_goto_31;
            													}
HXDLIN( 378)													lastElem1->pointerOut( ::Dynamic(::hx::Anon_obj::Create(4)
            														->setFixed(0,HX_("x",78,00,00,00),x1)
            														->setFixed(1,HX_("y",79,00,00,00),y1)
            														->setFixed(2,HX_("touch",bf,17,33,14),touch)
            														->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN( 378)													bool _hx_tmp31;
HXDLIN( 378)													if (::hx::IsNull( lastElem1->overOutEventsBubbleTo )) {
HXLINE( 378)														_hx_tmp31 = !(lastElem1->overOutEventsBubbleToDisplay);
            													}
            													else {
HXLINE( 378)														_hx_tmp31 = false;
            													}
HXDLIN( 378)													if (_hx_tmp31) {
HXLINE( 378)														hasEventOver1 = true;
            													}
HXDLIN( 378)													lastElem1 = lastElem1->overOutEventsBubbleTo;
            												}
            												_hx_goto_31:;
HXDLIN( 378)												if (::hx::IsNull( lastElem1 )) {
HXLINE( 378)													while(::hx::IsNotNull( pickedElem3 )){
HXLINE( 378)														pickedElem3->pointerOver( ::Dynamic(::hx::Anon_obj::Create(4)
            															->setFixed(0,HX_("x",78,00,00,00),x1)
            															->setFixed(1,HX_("y",79,00,00,00),y1)
            															->setFixed(2,HX_("touch",bf,17,33,14),touch)
            															->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN( 378)														bool _hx_tmp32;
HXDLIN( 378)														if (::hx::IsNull( pickedElem3->overOutEventsBubbleTo )) {
HXLINE( 378)															_hx_tmp32 = !(pickedElem3->overOutEventsBubbleToDisplay);
            														}
            														else {
HXLINE( 378)															_hx_tmp32 = false;
            														}
HXDLIN( 378)														if (_hx_tmp32) {
HXLINE( 378)															hasEventOut1 = true;
            														}
HXDLIN( 378)														pickedElem3 = pickedElem3->overOutEventsBubbleTo;
            													}
            												}
            											}
            										}
            										else {
HXLINE( 378)											while(::hx::IsNotNull( lastElem1 )){
HXLINE( 378)												lastElem1->pointerOut( ::Dynamic(::hx::Anon_obj::Create(4)
            													->setFixed(0,HX_("x",78,00,00,00),x1)
            													->setFixed(1,HX_("y",79,00,00,00),y1)
            													->setFixed(2,HX_("touch",bf,17,33,14),touch)
            													->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN( 378)												bool _hx_tmp33;
HXDLIN( 378)												if (::hx::IsNull( lastElem1->overOutEventsBubbleTo )) {
HXLINE( 378)													_hx_tmp33 = !(lastElem1->overOutEventsBubbleToDisplay);
            												}
            												else {
HXLINE( 378)													_hx_tmp33 = false;
            												}
HXDLIN( 378)												if (_hx_tmp33) {
HXLINE( 378)													hasEventOver1 = true;
            												}
HXDLIN( 378)												lastElem1 = lastElem1->overOutEventsBubbleTo;
            											}
            										}
            									}
            									else {
HXLINE( 378)										if ((pickedIndex1 >= 0)) {
HXLINE( 378)											 ::peote::ui::interactive::Interactive pickedElem4 = this->movePickBuffer->getElement(pickedIndex1)->uiElement;
HXDLIN( 378)											while(::hx::IsNotNull( pickedElem4 )){
HXLINE( 378)												pickedElem4->pointerOver( ::Dynamic(::hx::Anon_obj::Create(4)
            													->setFixed(0,HX_("x",78,00,00,00),x1)
            													->setFixed(1,HX_("y",79,00,00,00),y1)
            													->setFixed(2,HX_("touch",bf,17,33,14),touch)
            													->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN( 378)												bool _hx_tmp34;
HXDLIN( 378)												if (::hx::IsNull( pickedElem4->overOutEventsBubbleTo )) {
HXLINE( 378)													_hx_tmp34 = !(pickedElem4->overOutEventsBubbleToDisplay);
            												}
            												else {
HXLINE( 378)													_hx_tmp34 = false;
            												}
HXDLIN( 378)												if (_hx_tmp34) {
HXLINE( 378)													hasEventOut1 = true;
            												}
HXDLIN( 378)												pickedElem4 = pickedElem4->overOutEventsBubbleTo;
            											}
            										}
            									}
HXDLIN( 378)									this->lastTouchOverIndex->__unsafe_set(touch->id,pickedIndex1);
            								}
HXDLIN( 378)								if (((checkForEvent1 & 2) != 0)) {
HXLINE( 378)									bool hasEventMove1 = false;
HXDLIN( 378)									if ((pickedIndex1 >= 0)) {
HXLINE( 378)										 ::peote::ui::interactive::Interactive pickedElem5 = this->movePickBuffer->getElement(pickedIndex1)->uiElement;
HXDLIN( 378)										while(::hx::IsNotNull( pickedElem5 )){
HXLINE( 378)											pickedElem5->pointerMove( ::Dynamic(::hx::Anon_obj::Create(4)
            												->setFixed(0,HX_("x",78,00,00,00),x1)
            												->setFixed(1,HX_("y",79,00,00,00),y1)
            												->setFixed(2,HX_("touch",bf,17,33,14),touch)
            												->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN( 378)											bool _hx_tmp35;
HXDLIN( 378)											if (::hx::IsNull( pickedElem5->moveEventsBubbleTo )) {
HXLINE( 378)												_hx_tmp35 = pickedElem5->moveEventsBubbleToDisplay;
            											}
            											else {
HXLINE( 378)												_hx_tmp35 = false;
            											}
HXDLIN( 378)											if (_hx_tmp35) {
HXLINE( 378)												hasEventMove1 = true;
            											}
HXDLIN( 378)											pickedElem5 = pickedElem5->moveEventsBubbleTo;
            										}
            									}
            									else {
HXLINE( 378)										hasEventMove1 = true;
            									}
HXDLIN( 378)									bool _hx_tmp36;
HXDLIN( 378)									if (hasEventMove1) {
HXLINE( 378)										_hx_tmp36 = ((this->isTouchDown & (1 << touch->id)) > 0);
            									}
            									else {
HXLINE( 378)										_hx_tmp36 = false;
            									}
HXDLIN( 378)									if (_hx_tmp36) {
HXLINE( 378)										if (::hx::IsNotNull( this->onPointerMove )) {
HXLINE( 378)											this->onPointerMove(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(4)
            												->setFixed(0,HX_("x",78,00,00,00),x1)
            												->setFixed(1,HX_("y",79,00,00,00),y1)
            												->setFixed(2,HX_("touch",bf,17,33,14),touch)
            												->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            										}
HXDLIN( 378)										if (!(this->moveEventsBubble)) {
HXLINE( 378)											checkForEvent1 = (checkForEvent1 - 2);
            										}
            									}
            									else {
HXLINE( 378)										checkForEvent1 = (checkForEvent1 - 2);
            									}
            								}
HXDLIN( 378)								bool _hx_tmp37;
HXDLIN( 378)								if (((checkForEvent1 & 1) != 0)) {
HXLINE( 378)									_hx_tmp37 = ((this->isTouchDown & (1 << touch->id)) > 0);
            								}
            								else {
HXLINE( 378)									_hx_tmp37 = false;
            								}
HXDLIN( 378)								if (_hx_tmp37) {
HXLINE( 378)									if (isInside1) {
HXLINE( 378)										if (!(this->isTouchInside)) {
HXLINE( 378)											this->isTouchInside = true;
HXDLIN( 378)											hasEventOver1 = true;
            										}
            									}
            									else {
HXLINE( 378)										if (this->isTouchInside) {
HXLINE( 378)											this->isTouchInside = false;
HXDLIN( 378)											hasEventOut1 = true;
            										}
            									}
HXDLIN( 378)									bool _hx_tmp38;
HXDLIN( 378)									bool _hx_tmp39;
HXDLIN( 378)									if (hasEventOver1) {
HXLINE( 378)										_hx_tmp39 = !(hasEventOut1);
            									}
            									else {
HXLINE( 378)										_hx_tmp39 = false;
            									}
HXDLIN( 378)									if (_hx_tmp39) {
HXLINE( 378)										_hx_tmp38 = !(this->isTouchOver);
            									}
            									else {
HXLINE( 378)										_hx_tmp38 = false;
            									}
HXDLIN( 378)									if (_hx_tmp38) {
HXLINE( 378)										::haxe::Log_obj::trace(HX_("KK",a0,41,00,00),::hx::SourceInfo(HX_("peote/ui/PeoteUIDisplay.hx",a4,63,e3,b5),724,HX_("peote.ui.PeoteUIDisplay",ba,64,f7,96),HX_("touchMove",70,72,cd,0d)));
HXDLIN( 378)										if (::hx::IsNotNull( this->onPointerOver )) {
HXLINE( 378)											this->onPointerOver(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(4)
            												->setFixed(0,HX_("x",78,00,00,00),x1)
            												->setFixed(1,HX_("y",79,00,00,00),y1)
            												->setFixed(2,HX_("touch",bf,17,33,14),touch)
            												->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            										}
HXDLIN( 378)										this->isTouchOver = true;
            									}
            									else {
HXLINE( 378)										bool _hx_tmp40;
HXDLIN( 378)										bool _hx_tmp41;
HXDLIN( 378)										if (hasEventOut1) {
HXLINE( 378)											_hx_tmp41 = !(hasEventOver1);
            										}
            										else {
HXLINE( 378)											_hx_tmp41 = false;
            										}
HXDLIN( 378)										if (_hx_tmp41) {
HXLINE( 378)											_hx_tmp40 = this->isTouchOver;
            										}
            										else {
HXLINE( 378)											_hx_tmp40 = false;
            										}
HXDLIN( 378)										if (_hx_tmp40) {
HXLINE( 378)											if (::hx::IsNotNull( this->onPointerOut )) {
HXLINE( 378)												this->onPointerOut(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(4)
            													->setFixed(0,HX_("x",78,00,00,00),x1)
            													->setFixed(1,HX_("y",79,00,00,00),y1)
            													->setFixed(2,HX_("touch",bf,17,33,14),touch)
            													->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            											}
HXDLIN( 378)											this->isTouchOver = false;
            										}
            									}
HXDLIN( 378)									if (this->isTouchInside) {
HXLINE( 378)										bool _hx_tmp42;
HXDLIN( 378)										if (this->isTouchOver) {
HXLINE( 378)											_hx_tmp42 = !(this->overOutEventsBubble);
            										}
            										else {
HXLINE( 378)											_hx_tmp42 = true;
            										}
HXDLIN( 378)										if (_hx_tmp42) {
HXLINE( 378)											checkForEvent1 = (checkForEvent1 - 1);
            										}
            									}
            								}
            								else {
HXLINE( 378)									if (this->isTouchInside) {
HXLINE( 378)										if (::hx::IsNotNull( this->onPointerOut )) {
HXLINE( 378)											this->onPointerOut(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(3)
            												->setFixed(0,HX_("x",78,00,00,00),x1)
            												->setFixed(1,HX_("y",79,00,00,00),y1)
            												->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            										}
HXDLIN( 378)										this->isTouchInside = (this->isTouchOver = false);
            									}
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PeoteUIDisplay_obj,stopDraggingElement,(void))

int PeoteUIDisplay_obj::AVAILABLE_NUMBER;

int PeoteUIDisplay_obj::getFreeNumber(){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_49_getFreeNumber)
HXLINE(  50)		int bit = 1;
HXLINE(  51)		{
HXLINE(  51)			int _g = 0;
HXDLIN(  51)			while((_g < 16)){
HXLINE(  51)				_g = (_g + 1);
HXDLIN(  51)				int i = (_g - 1);
HXLINE(  52)				if (((::peote::ui::PeoteUIDisplay_obj::AVAILABLE_NUMBER & bit) == 0)) {
HXLINE(  53)					 ::Dynamic _hx_tmp = ::hx::ClassOf< ::peote::ui::PeoteUIDisplay >();
HXDLIN(  53)					::peote::ui::PeoteUIDisplay_obj::AVAILABLE_NUMBER = (::peote::ui::PeoteUIDisplay_obj::AVAILABLE_NUMBER | bit);
HXLINE(  54)					return i;
            				}
HXLINE(  56)				bit = (bit << 1);
            			}
            		}
HXLINE(  58)		HX_STACK_DO_THROW(((HX_("Error, reach maximum of ",20,bf,28,d2) + 16) + HX_(" UIDisplays",85,b2,aa,1a)));
HXDLIN(  58)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PeoteUIDisplay_obj,getFreeNumber,return )

 ::peote::ui::PeoteUIDisplay PeoteUIDisplay_obj::inputFocusUIDisplay;

::Dynamic PeoteUIDisplay_obj::intoSelectionTextLine;

int PeoteUIDisplay_obj::maxActiveIndex;

::Array< ::Dynamic> PeoteUIDisplay_obj::activeUIDisplay;

::Array< ::Dynamic> PeoteUIDisplay_obj::draggingMouseDisplays;

::Array< ::Dynamic> PeoteUIDisplay_obj::draggingTouchDisplays;

void PeoteUIDisplay_obj::mouseDownActive(Float mouseX,Float mouseY,int button){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1401_mouseDownActive)
HXDLIN(1401)		int _g = 0;
HXDLIN(1401)		int _g1 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN(1401)		while((_g < _g1)){
HXDLIN(1401)			_g = (_g + 1);
HXDLIN(1401)			int i = (_g - 1);
HXDLIN(1401)			 ::peote::ui::PeoteUIDisplay _this = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN(1401)			bool hasEventDown = false;
HXDLIN(1401)			bool _hx_tmp;
HXDLIN(1401)			bool _hx_tmp1;
HXDLIN(1401)			if (_this->mouseEnabled) {
HXDLIN(1401)				_hx_tmp1 = ((_this->lockMouseDown & (1 << button)) == 0);
            			}
            			else {
HXDLIN(1401)				_hx_tmp1 = false;
            			}
HXDLIN(1401)			if (_hx_tmp1) {
HXDLIN(1401)				_hx_tmp = ::hx::IsNotNull( _this->peoteView );
            			}
            			else {
HXDLIN(1401)				_hx_tmp = false;
            			}
HXDLIN(1401)			if (_hx_tmp) {
HXDLIN(1401)				int x = ::Std_obj::_hx_int(mouseX);
HXDLIN(1401)				int y = ::Std_obj::_hx_int(mouseY);
HXDLIN(1401)				int px = x;
HXDLIN(1401)				int py = y;
HXDLIN(1401)				px = ::Std_obj::_hx_int(((( (Float)(px) ) / _this->peoteView->xz) - _this->peoteView->xOffset));
HXDLIN(1401)				py = ::Std_obj::_hx_int(((( (Float)(py) ) / _this->peoteView->yz) - _this->peoteView->yOffset));
HXDLIN(1401)				bool _hx_tmp2;
HXDLIN(1401)				bool _hx_tmp3;
HXDLIN(1401)				bool _hx_tmp4;
HXDLIN(1401)				if ((px >= _this->x)) {
HXDLIN(1401)					_hx_tmp4 = (px < (_this->x + _this->width));
            				}
            				else {
HXDLIN(1401)					_hx_tmp4 = false;
            				}
HXDLIN(1401)				if (_hx_tmp4) {
HXDLIN(1401)					_hx_tmp3 = (py >= _this->y);
            				}
            				else {
HXDLIN(1401)					_hx_tmp3 = false;
            				}
HXDLIN(1401)				if (_hx_tmp3) {
HXDLIN(1401)					_hx_tmp2 = (py < (_this->y + _this->height));
            				}
            				else {
HXDLIN(1401)					_hx_tmp2 = false;
            				}
HXDLIN(1401)				if (_hx_tmp2) {
HXDLIN(1401)					int pickedIndex = _this->peoteView->getElementAt(mouseX,mouseY,_this,_this->clickPickProgram);
HXDLIN(1401)					if ((pickedIndex >= 0)) {
HXDLIN(1401)						 ::peote::ui::interactive::Interactive pickedElem = _this->clickPickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN(1401)						while(::hx::IsNotNull( pickedElem )){
HXDLIN(1401)							pickedElem->pointerDown( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("mouseButton",f7,95,68,cf),button)
            								->setFixed(1,HX_("x",78,00,00,00),x)
            								->setFixed(2,HX_("y",79,00,00,00),y)
            								->setFixed(3,HX_("type",ba,f2,08,4d),0)));
HXDLIN(1401)							bool _hx_tmp5;
HXDLIN(1401)							if (::hx::IsNull( pickedElem->upDownEventsBubbleTo )) {
HXDLIN(1401)								_hx_tmp5 = pickedElem->upDownEventsBubbleToDisplay;
            							}
            							else {
HXDLIN(1401)								_hx_tmp5 = false;
            							}
HXDLIN(1401)							if (_hx_tmp5) {
HXDLIN(1401)								hasEventDown = true;
            							}
HXDLIN(1401)							pickedElem = pickedElem->upDownEventsBubbleTo;
            						}
HXDLIN(1401)						_this->lockMouseDown = (_this->lockMouseDown | (1 << button));
HXDLIN(1401)						_this->lastMouseDownIndex->__unsafe_set(button,pickedIndex);
HXDLIN(1401)						if (hasEventDown) {
HXDLIN(1401)							if (::hx::IsNotNull( _this->onPointerDown )) {
HXDLIN(1401)								_this->onPointerDown(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("mouseButton",f7,95,68,cf),button)
            									->setFixed(1,HX_("x",78,00,00,00),x)
            									->setFixed(2,HX_("y",79,00,00,00),y)
            									->setFixed(3,HX_("type",ba,f2,08,4d),0)));
            							}
HXDLIN(1401)							_this->isMouseDown = (_this->isMouseDown | (1 << button));
HXDLIN(1401)							hasEventDown = !(_this->upDownEventsBubble);
            						}
            						else {
HXDLIN(1401)							hasEventDown = true;
            						}
            					}
            					else {
HXDLIN(1401)						if (::hx::IsNotNull( _this->onPointerDown )) {
HXDLIN(1401)							_this->onPointerDown(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("mouseButton",f7,95,68,cf),button)
            								->setFixed(1,HX_("x",78,00,00,00),x)
            								->setFixed(2,HX_("y",79,00,00,00),y)
            								->setFixed(3,HX_("type",ba,f2,08,4d),0)));
            						}
HXDLIN(1401)						_this->isMouseDown = (_this->isMouseDown | (1 << button));
HXDLIN(1401)						hasEventDown = !(_this->upDownEventsBubble);
            					}
            				}
            			}
HXDLIN(1401)			if (hasEventDown) {
HXDLIN(1401)				goto _hx_goto_39;
            			}
            		}
            		_hx_goto_39:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PeoteUIDisplay_obj,mouseDownActive,(void))

void PeoteUIDisplay_obj::mouseUpActive(Float mouseX,Float mouseY,int button){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1402_mouseUpActive)
HXDLIN(1402)		int _g = 0;
HXDLIN(1402)		int _g1 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN(1402)		while((_g < _g1)){
HXDLIN(1402)			_g = (_g + 1);
HXDLIN(1402)			int i = (_g - 1);
HXDLIN(1402)			{
HXDLIN(1402)				 ::peote::ui::PeoteUIDisplay _this = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN(1402)				bool _hx_tmp;
HXDLIN(1402)				if (_this->mouseEnabled) {
HXDLIN(1402)					_hx_tmp = ::hx::IsNotNull( _this->peoteView );
            				}
            				else {
HXDLIN(1402)					_hx_tmp = false;
            				}
HXDLIN(1402)				if (_hx_tmp) {
HXDLIN(1402)					int x = ::Std_obj::_hx_int(mouseX);
HXDLIN(1402)					int y = ::Std_obj::_hx_int(mouseY);
HXDLIN(1402)					int _lastMouseDownIndex = ( (int)(_hx_array_unsafe_get(_this->lastMouseDownIndex,button)) );
HXDLIN(1402)					if ((_lastMouseDownIndex >= 0)) {
HXDLIN(1402)						 ::peote::ui::interactive::Interactive lastMouseDownElem = _this->clickPickBuffer->getElement(_lastMouseDownIndex)->uiElement;
HXDLIN(1402)						bool startClick = false;
HXDLIN(1402)						int pickedIndex;
HXDLIN(1402)						int px = x;
HXDLIN(1402)						int py = y;
HXDLIN(1402)						px = ::Std_obj::_hx_int(((( (Float)(px) ) / _this->peoteView->xz) - _this->peoteView->xOffset));
HXDLIN(1402)						py = ::Std_obj::_hx_int(((( (Float)(py) ) / _this->peoteView->yz) - _this->peoteView->yOffset));
HXDLIN(1402)						bool pickedIndex1;
HXDLIN(1402)						bool pickedIndex2;
HXDLIN(1402)						bool pickedIndex3;
HXDLIN(1402)						if ((px >= _this->x)) {
HXDLIN(1402)							pickedIndex3 = (px < (_this->x + _this->width));
            						}
            						else {
HXDLIN(1402)							pickedIndex3 = false;
            						}
HXDLIN(1402)						if (pickedIndex3) {
HXDLIN(1402)							pickedIndex2 = (py >= _this->y);
            						}
            						else {
HXDLIN(1402)							pickedIndex2 = false;
            						}
HXDLIN(1402)						if (pickedIndex2) {
HXDLIN(1402)							pickedIndex1 = (py < (_this->y + _this->height));
            						}
            						else {
HXDLIN(1402)							pickedIndex1 = false;
            						}
HXDLIN(1402)						if (pickedIndex1) {
HXDLIN(1402)							pickedIndex = _this->peoteView->getElementAt(mouseX,mouseY,_this,_this->clickPickProgram);
            						}
            						else {
HXDLIN(1402)							pickedIndex = -1;
            						}
HXDLIN(1402)						 ::peote::ui::interactive::Interactive pickedElem = null();
HXDLIN(1402)						if ((pickedIndex >= 0)) {
HXDLIN(1402)							pickedElem = _this->clickPickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN(1402)							if (lastMouseDownElem->intoUpDownEventBubbleOf(pickedElem)) {
HXDLIN(1402)								startClick = true;
            							}
            						}
HXDLIN(1402)						while(::hx::IsNotNull( lastMouseDownElem )){
HXDLIN(1402)							lastMouseDownElem->pointerUp( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("mouseButton",f7,95,68,cf),button)
            								->setFixed(1,HX_("x",78,00,00,00),x)
            								->setFixed(2,HX_("y",79,00,00,00),y)
            								->setFixed(3,HX_("type",ba,f2,08,4d),0)));
HXDLIN(1402)							bool _hx_tmp1;
HXDLIN(1402)							if (!(startClick)) {
HXDLIN(1402)								_hx_tmp1 = ::hx::IsInstanceEq( pickedElem,lastMouseDownElem );
            							}
            							else {
HXDLIN(1402)								_hx_tmp1 = false;
            							}
HXDLIN(1402)							if (_hx_tmp1) {
HXDLIN(1402)								startClick = true;
            							}
HXDLIN(1402)							if (startClick) {
HXDLIN(1402)								lastMouseDownElem->pointerClick( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("mouseButton",f7,95,68,cf),button)
            									->setFixed(1,HX_("x",78,00,00,00),x)
            									->setFixed(2,HX_("y",79,00,00,00),y)
            									->setFixed(3,HX_("type",ba,f2,08,4d),0)));
            							}
HXDLIN(1402)							lastMouseDownElem = lastMouseDownElem->upDownEventsBubbleTo;
            						}
HXDLIN(1402)						_this->lastMouseDownIndex->__unsafe_set(button,-1);
HXDLIN(1402)						_this->lockMouseDown = (_this->lockMouseDown - (1 << button));
            					}
HXDLIN(1402)					if (((_this->isMouseDown & (1 << button)) != 0)) {
HXDLIN(1402)						if (::hx::IsNotNull( _this->onPointerUp )) {
HXDLIN(1402)							_this->onPointerUp(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("mouseButton",f7,95,68,cf),button)
            								->setFixed(1,HX_("x",78,00,00,00),x)
            								->setFixed(2,HX_("y",79,00,00,00),y)
            								->setFixed(3,HX_("type",ba,f2,08,4d),0)));
            						}
HXDLIN(1402)						bool _hx_tmp2;
HXDLIN(1402)						if (::hx::IsNotNull( _this->onPointerClick )) {
HXDLIN(1402)							_hx_tmp2 = _this->isMouseOver;
            						}
            						else {
HXDLIN(1402)							_hx_tmp2 = false;
            						}
HXDLIN(1402)						if (_hx_tmp2) {
HXDLIN(1402)							_this->onPointerClick(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("mouseButton",f7,95,68,cf),button)
            								->setFixed(1,HX_("x",78,00,00,00),x)
            								->setFixed(2,HX_("y",79,00,00,00),y)
            								->setFixed(3,HX_("type",ba,f2,08,4d),0)));
            						}
HXDLIN(1402)						_this->isMouseDown = (_this->isMouseDown - (1 << button));
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PeoteUIDisplay_obj,mouseUpActive,(void))

void PeoteUIDisplay_obj::mouseWheelActive(Float dx,Float dy, ::lime::ui::MouseWheelMode mode){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1403_mouseWheelActive)
HXDLIN(1403)		int _g = 0;
HXDLIN(1403)		int _g1 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN(1403)		while((_g < _g1)){
HXDLIN(1403)			_g = (_g + 1);
HXDLIN(1403)			int i = (_g - 1);
HXDLIN(1403)			{
HXDLIN(1403)				 ::peote::ui::PeoteUIDisplay _this = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN(1403)				bool _hx_tmp;
HXDLIN(1403)				bool _hx_tmp1;
HXDLIN(1403)				if (_this->mouseEnabled) {
HXDLIN(1403)					_hx_tmp1 = (_this->lastMouseOverIndex >= 0);
            				}
            				else {
HXDLIN(1403)					_hx_tmp1 = false;
            				}
HXDLIN(1403)				if (_hx_tmp1) {
HXDLIN(1403)					_hx_tmp = ::hx::IsNotNull( _this->peoteView );
            				}
            				else {
HXDLIN(1403)					_hx_tmp = false;
            				}
HXDLIN(1403)				if (_hx_tmp) {
HXDLIN(1403)					 ::peote::ui::interactive::Interactive lastElem = _this->movePickBuffer->getElement(_this->lastMouseOverIndex)->uiElement;
HXDLIN(1403)					while(::hx::IsNotNull( lastElem )){
HXDLIN(1403)						lastElem->mouseWheel( ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("deltaMode",7b,43,c0,f0),mode)
            							->setFixed(1,HX_("deltaX",60,11,e4,6a),dx)
            							->setFixed(2,HX_("deltaY",61,11,e4,6a),dy)));
HXDLIN(1403)						lastElem = lastElem->wheelEventsBubbleTo;
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PeoteUIDisplay_obj,mouseWheelActive,(void))

void PeoteUIDisplay_obj::touchMoveActive( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1405_touchMoveActive)
HXLINE(1406)		int checkForEvent = 3;
HXLINE(1407)		if ((::peote::ui::PeoteUIDisplay_obj::draggingTouchDisplays->length > 0)) {
HXLINE(1408)			int _g = 0;
HXDLIN(1408)			::Array< ::Dynamic> _g1 = ::peote::ui::PeoteUIDisplay_obj::draggingTouchDisplays;
HXDLIN(1408)			while((_g < _g1->length)){
HXLINE(1408)				 ::peote::ui::PeoteUIDisplay d = _g1->__get(_g).StaticCast<  ::peote::ui::PeoteUIDisplay >();
HXDLIN(1408)				_g = (_g + 1);
HXDLIN(1408)				bool _hx_tmp;
HXDLIN(1408)				if (d->touchEnabled) {
HXLINE(1408)					_hx_tmp = ((d->isTouchDown & (1 << touch->id)) > 0);
            				}
            				else {
HXLINE(1408)					_hx_tmp = false;
            				}
HXDLIN(1408)				if (_hx_tmp) {
HXLINE(1408)					if (::hx::IsNotNull( d->peoteView )) {
HXLINE(1408)						Float dragToY = ( (Float)(::Math_obj::round((touch->y * ( (Float)(d->peoteView->height) )))) );
HXDLIN(1408)						int toX = ::Std_obj::_hx_int(((( (Float)(::Math_obj::round((touch->x * ( (Float)(d->peoteView->width) )))) ) / d->peoteView->xz) / d->xz));
HXDLIN(1408)						int toY = ::Std_obj::_hx_int(((dragToY / d->peoteView->yz) / d->yz));
HXDLIN(1408)						if ((toX >= (d->dragMinX + d->dragOriginX))) {
HXLINE(1408)							if ((toX < ((d->dragMaxX - d->width) + d->dragOriginX))) {
HXLINE(1408)								int _x = (toX - d->dragOriginX);
HXDLIN(1408)								d->x = _x;
            							}
            							else {
HXLINE(1408)								int _x1 = (d->dragMaxX - d->width);
HXDLIN(1408)								d->x = _x1;
            							}
            						}
            						else {
HXLINE(1408)							int _x2 = d->dragMinX;
HXDLIN(1408)							d->x = _x2;
            						}
HXDLIN(1408)						if ((toY >= (d->dragMinY + d->dragOriginY))) {
HXLINE(1408)							if ((toY < ((d->dragMaxY - d->height) + d->dragOriginY))) {
HXLINE(1408)								int _y = (toY - d->dragOriginY);
HXDLIN(1408)								d->y = _y;
            							}
            							else {
HXLINE(1408)								int _y1 = (d->dragMaxY - d->height);
HXDLIN(1408)								d->y = _y1;
            							}
            						}
            						else {
HXLINE(1408)							int _y2 = d->dragMinY;
HXDLIN(1408)							d->y = _y2;
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1410)			int _g2 = 0;
HXDLIN(1410)			int _g3 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN(1410)			while((_g2 < _g3)){
HXLINE(1410)				_g2 = (_g2 + 1);
HXDLIN(1410)				int i = (_g2 - 1);
HXDLIN(1410)				 ::peote::ui::PeoteUIDisplay _this = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN(1410)				int checkForEvent1 = checkForEvent;
HXDLIN(1410)				bool checkForEvent2;
HXDLIN(1410)				bool checkForEvent3;
HXDLIN(1410)				if (_this->touchEnabled) {
HXLINE(1410)					checkForEvent3 = ::hx::IsNotNull( _this->peoteView );
            				}
            				else {
HXLINE(1410)					checkForEvent3 = false;
            				}
HXDLIN(1410)				if (checkForEvent3) {
HXLINE(1410)					checkForEvent2 = (touch->id < _this->maxTouchpoints);
            				}
            				else {
HXLINE(1410)					checkForEvent2 = false;
            				}
HXDLIN(1410)				if (checkForEvent2) {
HXLINE(1410)					int x = ::Math_obj::round((touch->x * ( (Float)(_this->peoteView->width) )));
HXDLIN(1410)					int y = ::Math_obj::round((touch->y * ( (Float)(_this->peoteView->height) )));
HXDLIN(1410)					bool isInside = false;
HXDLIN(1410)					int pickedIndex = -1;
HXDLIN(1410)					bool checkForEvent4;
HXDLIN(1410)					if ((checkForEvent1 > 0)) {
HXLINE(1410)						int px = x;
HXDLIN(1410)						int py = y;
HXDLIN(1410)						px = ::Std_obj::_hx_int(((( (Float)(px) ) / _this->peoteView->xz) - _this->peoteView->xOffset));
HXDLIN(1410)						py = ::Std_obj::_hx_int(((( (Float)(py) ) / _this->peoteView->yz) - _this->peoteView->yOffset));
HXDLIN(1410)						bool checkForEvent5;
HXDLIN(1410)						bool checkForEvent6;
HXDLIN(1410)						if ((px >= _this->x)) {
HXLINE(1410)							checkForEvent6 = (px < (_this->x + _this->width));
            						}
            						else {
HXLINE(1410)							checkForEvent6 = false;
            						}
HXDLIN(1410)						if (checkForEvent6) {
HXLINE(1410)							checkForEvent5 = (py >= _this->y);
            						}
            						else {
HXLINE(1410)							checkForEvent5 = false;
            						}
HXDLIN(1410)						if (checkForEvent5) {
HXLINE(1410)							checkForEvent4 = (py < (_this->y + _this->height));
            						}
            						else {
HXLINE(1410)							checkForEvent4 = false;
            						}
            					}
            					else {
HXLINE(1410)						checkForEvent4 = false;
            					}
HXDLIN(1410)					if (checkForEvent4) {
HXLINE(1410)						isInside = true;
HXDLIN(1410)						pickedIndex = _this->peoteView->getElementAt(( (Float)(x) ),( (Float)(y) ),_this,_this->movePickProgram);
            					}
HXDLIN(1410)					::Array< ::Dynamic> draggingTouchElemArray = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(_this->draggingTouchElements,touch->id)) );
HXDLIN(1410)					if ((draggingTouchElemArray->length > 0)) {
HXLINE(1410)						int _g4 = 0;
HXDLIN(1410)						while((_g4 < draggingTouchElemArray->length)){
HXLINE(1410)							 ::peote::ui::interactive::Interactive uiElement = draggingTouchElemArray->__get(_g4).StaticCast<  ::peote::ui::interactive::Interactive >();
HXDLIN(1410)							_g4 = (_g4 + 1);
HXDLIN(1410)							{
HXLINE(1410)								int dragToX = x;
HXDLIN(1410)								int dragToY1 = y;
HXDLIN(1410)								dragToX = ::Std_obj::_hx_int(((( (Float)(dragToX) ) / uiElement->uiDisplay->peoteView->xz) / uiElement->uiDisplay->xz));
HXDLIN(1410)								dragToY1 = ::Std_obj::_hx_int(((( (Float)(dragToY1) ) / uiElement->uiDisplay->peoteView->yz) / uiElement->uiDisplay->yz));
HXDLIN(1410)								if ((dragToX >= (uiElement->dragMinX + uiElement->dragOriginX))) {
HXLINE(1410)									if ((dragToX < ((uiElement->dragMaxX - uiElement->width) + uiElement->dragOriginX))) {
HXLINE(1410)										uiElement->x = (dragToX - uiElement->dragOriginX);
            									}
            									else {
HXLINE(1410)										uiElement->x = (uiElement->dragMaxX - uiElement->width);
            									}
            								}
            								else {
HXLINE(1410)									uiElement->x = uiElement->dragMinX;
            								}
HXDLIN(1410)								if ((dragToY1 >= (uiElement->dragMinY + uiElement->dragOriginY))) {
HXLINE(1410)									if ((dragToY1 < ((uiElement->dragMaxY - uiElement->height) + uiElement->dragOriginY))) {
HXLINE(1410)										uiElement->y = (dragToY1 - uiElement->dragOriginY);
            									}
            									else {
HXLINE(1410)										uiElement->y = (uiElement->dragMaxY - uiElement->height);
            									}
            								}
            								else {
HXLINE(1410)									uiElement->y = uiElement->dragMinY;
            								}
HXDLIN(1410)								if (::hx::IsNotNull( uiElement->drag )) {
HXLINE(1410)									int _dx = ((uiElement->dragMaxX - uiElement->dragMinX) - uiElement->width);
HXDLIN(1410)									int _dy = ((uiElement->dragMaxY - uiElement->dragMinY) - uiElement->height);
HXDLIN(1410)									Float checkForEvent7;
HXDLIN(1410)									if ((_dx != 0)) {
HXLINE(1410)										checkForEvent7 = (( (Float)((uiElement->x - uiElement->dragMinX)) ) / ( (Float)(_dx) ));
            									}
            									else {
HXLINE(1410)										checkForEvent7 = ((Float)0.0);
            									}
HXDLIN(1410)									Float checkForEvent8;
HXDLIN(1410)									if ((_dy != 0)) {
HXLINE(1410)										checkForEvent8 = (( (Float)((uiElement->y - uiElement->dragMinY)) ) / ( (Float)(_dy) ));
            									}
            									else {
HXLINE(1410)										checkForEvent8 = ((Float)0.0);
            									}
HXDLIN(1410)									uiElement->drag(checkForEvent7,checkForEvent8);
            								}
            							}
HXDLIN(1410)							_this->update(uiElement);
            						}
            					}
            					else {
HXLINE(1410)						bool hasEventOver = false;
HXDLIN(1410)						bool hasEventOut = false;
HXDLIN(1410)						int lastOverIndex = ( (int)(_hx_array_unsafe_get(_this->lastTouchOverIndex,touch->id)) );
HXDLIN(1410)						if ((pickedIndex != lastOverIndex)) {
HXLINE(1410)							if ((lastOverIndex >= 0)) {
HXLINE(1410)								 ::peote::ui::interactive::Interactive lastElem = _this->movePickBuffer->getElement(lastOverIndex)->uiElement;
HXDLIN(1410)								if ((pickedIndex >= 0)) {
HXLINE(1410)									 ::peote::ui::interactive::Interactive pickedElem = _this->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN(1410)									if (lastElem->intoOverOutEventBubbleOf(pickedElem)) {
HXLINE(1410)										while(true){
HXLINE(1410)											bool checkForEvent9;
HXDLIN(1410)											if (::hx::IsNotNull( pickedElem )) {
HXLINE(1410)												checkForEvent9 = ::hx::IsInstanceNotEq( pickedElem,lastElem );
            											}
            											else {
HXLINE(1410)												checkForEvent9 = false;
            											}
HXDLIN(1410)											if (!(checkForEvent9)) {
HXLINE(1410)												goto _hx_goto_51;
            											}
HXDLIN(1410)											pickedElem->pointerOver( ::Dynamic(::hx::Anon_obj::Create(4)
            												->setFixed(0,HX_("x",78,00,00,00),x)
            												->setFixed(1,HX_("y",79,00,00,00),y)
            												->setFixed(2,HX_("touch",bf,17,33,14),touch)
            												->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1410)											bool checkForEvent10;
HXDLIN(1410)											if (::hx::IsNull( pickedElem->overOutEventsBubbleTo )) {
HXLINE(1410)												checkForEvent10 = !(pickedElem->overOutEventsBubbleToDisplay);
            											}
            											else {
HXLINE(1410)												checkForEvent10 = false;
            											}
HXDLIN(1410)											if (checkForEvent10) {
HXLINE(1410)												hasEventOut = true;
            											}
HXDLIN(1410)											pickedElem = pickedElem->overOutEventsBubbleTo;
            										}
            										_hx_goto_51:;
            									}
            									else {
HXLINE(1410)										while(true){
HXLINE(1410)											bool checkForEvent11;
HXDLIN(1410)											if (::hx::IsNotNull( lastElem )) {
HXLINE(1410)												checkForEvent11 = ::hx::IsInstanceNotEq( lastElem,pickedElem );
            											}
            											else {
HXLINE(1410)												checkForEvent11 = false;
            											}
HXDLIN(1410)											if (!(checkForEvent11)) {
HXLINE(1410)												goto _hx_goto_52;
            											}
HXDLIN(1410)											lastElem->pointerOut( ::Dynamic(::hx::Anon_obj::Create(4)
            												->setFixed(0,HX_("x",78,00,00,00),x)
            												->setFixed(1,HX_("y",79,00,00,00),y)
            												->setFixed(2,HX_("touch",bf,17,33,14),touch)
            												->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1410)											bool checkForEvent12;
HXDLIN(1410)											if (::hx::IsNull( lastElem->overOutEventsBubbleTo )) {
HXLINE(1410)												checkForEvent12 = !(lastElem->overOutEventsBubbleToDisplay);
            											}
            											else {
HXLINE(1410)												checkForEvent12 = false;
            											}
HXDLIN(1410)											if (checkForEvent12) {
HXLINE(1410)												hasEventOver = true;
            											}
HXDLIN(1410)											lastElem = lastElem->overOutEventsBubbleTo;
            										}
            										_hx_goto_52:;
HXDLIN(1410)										if (::hx::IsNull( lastElem )) {
HXLINE(1410)											while(::hx::IsNotNull( pickedElem )){
HXLINE(1410)												pickedElem->pointerOver( ::Dynamic(::hx::Anon_obj::Create(4)
            													->setFixed(0,HX_("x",78,00,00,00),x)
            													->setFixed(1,HX_("y",79,00,00,00),y)
            													->setFixed(2,HX_("touch",bf,17,33,14),touch)
            													->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1410)												bool checkForEvent13;
HXDLIN(1410)												if (::hx::IsNull( pickedElem->overOutEventsBubbleTo )) {
HXLINE(1410)													checkForEvent13 = !(pickedElem->overOutEventsBubbleToDisplay);
            												}
            												else {
HXLINE(1410)													checkForEvent13 = false;
            												}
HXDLIN(1410)												if (checkForEvent13) {
HXLINE(1410)													hasEventOut = true;
            												}
HXDLIN(1410)												pickedElem = pickedElem->overOutEventsBubbleTo;
            											}
            										}
            									}
            								}
            								else {
HXLINE(1410)									while(::hx::IsNotNull( lastElem )){
HXLINE(1410)										lastElem->pointerOut( ::Dynamic(::hx::Anon_obj::Create(4)
            											->setFixed(0,HX_("x",78,00,00,00),x)
            											->setFixed(1,HX_("y",79,00,00,00),y)
            											->setFixed(2,HX_("touch",bf,17,33,14),touch)
            											->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1410)										bool checkForEvent14;
HXDLIN(1410)										if (::hx::IsNull( lastElem->overOutEventsBubbleTo )) {
HXLINE(1410)											checkForEvent14 = !(lastElem->overOutEventsBubbleToDisplay);
            										}
            										else {
HXLINE(1410)											checkForEvent14 = false;
            										}
HXDLIN(1410)										if (checkForEvent14) {
HXLINE(1410)											hasEventOver = true;
            										}
HXDLIN(1410)										lastElem = lastElem->overOutEventsBubbleTo;
            									}
            								}
            							}
            							else {
HXLINE(1410)								if ((pickedIndex >= 0)) {
HXLINE(1410)									 ::peote::ui::interactive::Interactive pickedElem1 = _this->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN(1410)									while(::hx::IsNotNull( pickedElem1 )){
HXLINE(1410)										pickedElem1->pointerOver( ::Dynamic(::hx::Anon_obj::Create(4)
            											->setFixed(0,HX_("x",78,00,00,00),x)
            											->setFixed(1,HX_("y",79,00,00,00),y)
            											->setFixed(2,HX_("touch",bf,17,33,14),touch)
            											->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1410)										bool checkForEvent15;
HXDLIN(1410)										if (::hx::IsNull( pickedElem1->overOutEventsBubbleTo )) {
HXLINE(1410)											checkForEvent15 = !(pickedElem1->overOutEventsBubbleToDisplay);
            										}
            										else {
HXLINE(1410)											checkForEvent15 = false;
            										}
HXDLIN(1410)										if (checkForEvent15) {
HXLINE(1410)											hasEventOut = true;
            										}
HXDLIN(1410)										pickedElem1 = pickedElem1->overOutEventsBubbleTo;
            									}
            								}
            							}
HXDLIN(1410)							_this->lastTouchOverIndex->__unsafe_set(touch->id,pickedIndex);
            						}
HXDLIN(1410)						if (((checkForEvent1 & 2) != 0)) {
HXLINE(1410)							bool hasEventMove = false;
HXDLIN(1410)							if ((pickedIndex >= 0)) {
HXLINE(1410)								 ::peote::ui::interactive::Interactive pickedElem2 = _this->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN(1410)								while(::hx::IsNotNull( pickedElem2 )){
HXLINE(1410)									pickedElem2->pointerMove( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("x",78,00,00,00),x)
            										->setFixed(1,HX_("y",79,00,00,00),y)
            										->setFixed(2,HX_("touch",bf,17,33,14),touch)
            										->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1410)									bool checkForEvent16;
HXDLIN(1410)									if (::hx::IsNull( pickedElem2->moveEventsBubbleTo )) {
HXLINE(1410)										checkForEvent16 = pickedElem2->moveEventsBubbleToDisplay;
            									}
            									else {
HXLINE(1410)										checkForEvent16 = false;
            									}
HXDLIN(1410)									if (checkForEvent16) {
HXLINE(1410)										hasEventMove = true;
            									}
HXDLIN(1410)									pickedElem2 = pickedElem2->moveEventsBubbleTo;
            								}
            							}
            							else {
HXLINE(1410)								hasEventMove = true;
            							}
HXDLIN(1410)							bool checkForEvent17;
HXDLIN(1410)							if (hasEventMove) {
HXLINE(1410)								checkForEvent17 = ((_this->isTouchDown & (1 << touch->id)) > 0);
            							}
            							else {
HXLINE(1410)								checkForEvent17 = false;
            							}
HXDLIN(1410)							if (checkForEvent17) {
HXLINE(1410)								if (::hx::IsNotNull( _this->onPointerMove )) {
HXLINE(1410)									_this->onPointerMove(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("x",78,00,00,00),x)
            										->setFixed(1,HX_("y",79,00,00,00),y)
            										->setFixed(2,HX_("touch",bf,17,33,14),touch)
            										->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            								}
HXDLIN(1410)								if (!(_this->moveEventsBubble)) {
HXLINE(1410)									checkForEvent1 = (checkForEvent1 - 2);
            								}
            							}
            							else {
HXLINE(1410)								checkForEvent1 = (checkForEvent1 - 2);
            							}
            						}
HXDLIN(1410)						bool checkForEvent18;
HXDLIN(1410)						if (((checkForEvent1 & 1) != 0)) {
HXLINE(1410)							checkForEvent18 = ((_this->isTouchDown & (1 << touch->id)) > 0);
            						}
            						else {
HXLINE(1410)							checkForEvent18 = false;
            						}
HXDLIN(1410)						if (checkForEvent18) {
HXLINE(1410)							if (isInside) {
HXLINE(1410)								if (!(_this->isTouchInside)) {
HXLINE(1410)									_this->isTouchInside = true;
HXDLIN(1410)									hasEventOver = true;
            								}
            							}
            							else {
HXLINE(1410)								if (_this->isTouchInside) {
HXLINE(1410)									_this->isTouchInside = false;
HXDLIN(1410)									hasEventOut = true;
            								}
            							}
HXDLIN(1410)							bool checkForEvent19;
HXDLIN(1410)							bool checkForEvent20;
HXDLIN(1410)							if (hasEventOver) {
HXLINE(1410)								checkForEvent20 = !(hasEventOut);
            							}
            							else {
HXLINE(1410)								checkForEvent20 = false;
            							}
HXDLIN(1410)							if (checkForEvent20) {
HXLINE(1410)								checkForEvent19 = !(_this->isTouchOver);
            							}
            							else {
HXLINE(1410)								checkForEvent19 = false;
            							}
HXDLIN(1410)							if (checkForEvent19) {
HXLINE(1410)								::haxe::Log_obj::trace(HX_("KK",a0,41,00,00),::hx::SourceInfo(HX_("peote/ui/PeoteUIDisplay.hx",a4,63,e3,b5),724,HX_("peote.ui.PeoteUIDisplay",ba,64,f7,96),HX_("touchMove",70,72,cd,0d)));
HXDLIN(1410)								if (::hx::IsNotNull( _this->onPointerOver )) {
HXLINE(1410)									_this->onPointerOver(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("x",78,00,00,00),x)
            										->setFixed(1,HX_("y",79,00,00,00),y)
            										->setFixed(2,HX_("touch",bf,17,33,14),touch)
            										->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            								}
HXDLIN(1410)								_this->isTouchOver = true;
            							}
            							else {
HXLINE(1410)								bool checkForEvent21;
HXDLIN(1410)								bool checkForEvent22;
HXDLIN(1410)								if (hasEventOut) {
HXLINE(1410)									checkForEvent22 = !(hasEventOver);
            								}
            								else {
HXLINE(1410)									checkForEvent22 = false;
            								}
HXDLIN(1410)								if (checkForEvent22) {
HXLINE(1410)									checkForEvent21 = _this->isTouchOver;
            								}
            								else {
HXLINE(1410)									checkForEvent21 = false;
            								}
HXDLIN(1410)								if (checkForEvent21) {
HXLINE(1410)									if (::hx::IsNotNull( _this->onPointerOut )) {
HXLINE(1410)										_this->onPointerOut(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            											->setFixed(0,HX_("x",78,00,00,00),x)
            											->setFixed(1,HX_("y",79,00,00,00),y)
            											->setFixed(2,HX_("touch",bf,17,33,14),touch)
            											->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            									}
HXDLIN(1410)									_this->isTouchOver = false;
            								}
            							}
HXDLIN(1410)							if (_this->isTouchInside) {
HXLINE(1410)								bool checkForEvent23;
HXDLIN(1410)								if (_this->isTouchOver) {
HXLINE(1410)									checkForEvent23 = !(_this->overOutEventsBubble);
            								}
            								else {
HXLINE(1410)									checkForEvent23 = true;
            								}
HXDLIN(1410)								if (checkForEvent23) {
HXLINE(1410)									checkForEvent1 = (checkForEvent1 - 1);
            								}
            							}
            						}
            						else {
HXLINE(1410)							if (_this->isTouchInside) {
HXLINE(1410)								if (::hx::IsNotNull( _this->onPointerOut )) {
HXLINE(1410)									_this->onPointerOut(_this, ::Dynamic(::hx::Anon_obj::Create(3)
            										->setFixed(0,HX_("x",78,00,00,00),x)
            										->setFixed(1,HX_("y",79,00,00,00),y)
            										->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            								}
HXDLIN(1410)								_this->isTouchInside = (_this->isTouchOver = false);
            							}
            						}
            					}
            				}
HXDLIN(1410)				checkForEvent = checkForEvent1;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PeoteUIDisplay_obj,touchMoveActive,(void))

void PeoteUIDisplay_obj::touchStartActive( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1412_touchStartActive)
HXDLIN(1412)		int _g = 0;
HXDLIN(1412)		int _g1 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN(1412)		while((_g < _g1)){
HXDLIN(1412)			_g = (_g + 1);
HXDLIN(1412)			int i = (_g - 1);
HXDLIN(1412)			 ::peote::ui::PeoteUIDisplay _this = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN(1412)			bool hasEventDown = false;
HXDLIN(1412)			bool hasEventOver = false;
HXDLIN(1412)			bool _hx_tmp;
HXDLIN(1412)			bool _hx_tmp1;
HXDLIN(1412)			bool _hx_tmp2;
HXDLIN(1412)			if (_this->touchEnabled) {
HXDLIN(1412)				_hx_tmp2 = ((_this->lockTouchDown & (1 << touch->id)) == 0);
            			}
            			else {
HXDLIN(1412)				_hx_tmp2 = false;
            			}
HXDLIN(1412)			if (_hx_tmp2) {
HXDLIN(1412)				_hx_tmp1 = ::hx::IsNotNull( _this->peoteView );
            			}
            			else {
HXDLIN(1412)				_hx_tmp1 = false;
            			}
HXDLIN(1412)			if (_hx_tmp1) {
HXDLIN(1412)				_hx_tmp = (touch->id < _this->maxTouchpoints);
            			}
            			else {
HXDLIN(1412)				_hx_tmp = false;
            			}
HXDLIN(1412)			if (_hx_tmp) {
HXDLIN(1412)				int x = ::Math_obj::round((touch->x * ( (Float)(_this->peoteView->width) )));
HXDLIN(1412)				int y = ::Math_obj::round((touch->y * ( (Float)(_this->peoteView->height) )));
HXDLIN(1412)				int px = x;
HXDLIN(1412)				int py = y;
HXDLIN(1412)				px = ::Std_obj::_hx_int(((( (Float)(px) ) / _this->peoteView->xz) - _this->peoteView->xOffset));
HXDLIN(1412)				py = ::Std_obj::_hx_int(((( (Float)(py) ) / _this->peoteView->yz) - _this->peoteView->yOffset));
HXDLIN(1412)				bool _hx_tmp3;
HXDLIN(1412)				bool _hx_tmp4;
HXDLIN(1412)				bool _hx_tmp5;
HXDLIN(1412)				if ((px >= _this->x)) {
HXDLIN(1412)					_hx_tmp5 = (px < (_this->x + _this->width));
            				}
            				else {
HXDLIN(1412)					_hx_tmp5 = false;
            				}
HXDLIN(1412)				if (_hx_tmp5) {
HXDLIN(1412)					_hx_tmp4 = (py >= _this->y);
            				}
            				else {
HXDLIN(1412)					_hx_tmp4 = false;
            				}
HXDLIN(1412)				if (_hx_tmp4) {
HXDLIN(1412)					_hx_tmp3 = (py < (_this->y + _this->height));
            				}
            				else {
HXDLIN(1412)					_hx_tmp3 = false;
            				}
HXDLIN(1412)				if (_hx_tmp3) {
HXDLIN(1412)					int pickedIndex = _this->peoteView->getElementAt(( (Float)(x) ),( (Float)(y) ),_this,_this->movePickProgram);
HXDLIN(1412)					if ((pickedIndex >= 0)) {
HXDLIN(1412)						 ::peote::ui::interactive::Interactive pickedElem = _this->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN(1412)						while(::hx::IsNotNull( pickedElem )){
HXDLIN(1412)							pickedElem->pointerOver( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("x",78,00,00,00),x)
            								->setFixed(1,HX_("y",79,00,00,00),y)
            								->setFixed(2,HX_("touch",bf,17,33,14),touch)
            								->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1412)							bool _hx_tmp6;
HXDLIN(1412)							if (::hx::IsNull( pickedElem->overOutEventsBubbleTo )) {
HXDLIN(1412)								_hx_tmp6 = pickedElem->overOutEventsBubbleToDisplay;
            							}
            							else {
HXDLIN(1412)								_hx_tmp6 = false;
            							}
HXDLIN(1412)							if (_hx_tmp6) {
HXDLIN(1412)								hasEventOver = true;
            							}
HXDLIN(1412)							pickedElem = pickedElem->overOutEventsBubbleTo;
            						}
HXDLIN(1412)						_this->lastTouchOverIndex->__unsafe_set(touch->id,pickedIndex);
            					}
            					else {
HXDLIN(1412)						hasEventOver = true;
            					}
HXDLIN(1412)					int touchDownIndex = _this->peoteView->getElementAt(( (Float)(x) ),( (Float)(y) ),_this,_this->clickPickProgram);
HXDLIN(1412)					if ((touchDownIndex >= 0)) {
HXDLIN(1412)						 ::peote::ui::interactive::Interactive pickedElem1 = _this->clickPickBuffer->getElement(touchDownIndex)->uiElement;
HXDLIN(1412)						while(::hx::IsNotNull( pickedElem1 )){
HXDLIN(1412)							pickedElem1->pointerDown( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("x",78,00,00,00),x)
            								->setFixed(1,HX_("y",79,00,00,00),y)
            								->setFixed(2,HX_("touch",bf,17,33,14),touch)
            								->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1412)							bool _hx_tmp7;
HXDLIN(1412)							if (::hx::IsNull( pickedElem1->upDownEventsBubbleTo )) {
HXDLIN(1412)								_hx_tmp7 = pickedElem1->upDownEventsBubbleToDisplay;
            							}
            							else {
HXDLIN(1412)								_hx_tmp7 = false;
            							}
HXDLIN(1412)							if (_hx_tmp7) {
HXDLIN(1412)								hasEventDown = true;
            							}
HXDLIN(1412)							pickedElem1 = pickedElem1->upDownEventsBubbleTo;
            						}
HXDLIN(1412)						_this->lockTouchDown = (_this->lockTouchDown | (1 << touch->id));
HXDLIN(1412)						_this->lastTouchDownIndex->__unsafe_set(touch->id,touchDownIndex);
            					}
            					else {
HXDLIN(1412)						hasEventDown = true;
            					}
HXDLIN(1412)					::haxe::Log_obj::trace(HX_("hasEventOver",d4,7f,17,86), ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("className",a3,92,3d,dc),HX_("peote.ui.PeoteUIDisplay",ba,64,f7,96))
            						->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(3)->init(0,hasEventOver)->init(1,HX_("isTouchOver",69,d7,a5,ed))->init(2,_this->isTouchOver))
            						->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("touchStart",23,58,9c,7d))
            						->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("peote/ui/PeoteUIDisplay.hx",a4,63,e3,b5))
            						->setFixed(4,HX_("lineNumber",dd,81,22,76),838)));
HXDLIN(1412)					bool _hx_tmp8;
HXDLIN(1412)					if (hasEventOver) {
HXDLIN(1412)						_hx_tmp8 = !(_this->isTouchOver);
            					}
            					else {
HXDLIN(1412)						_hx_tmp8 = false;
            					}
HXDLIN(1412)					if (_hx_tmp8) {
HXDLIN(1412)						if (::hx::IsNotNull( _this->onPointerOver )) {
HXDLIN(1412)							_this->onPointerOver(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("x",78,00,00,00),x)
            								->setFixed(1,HX_("y",79,00,00,00),y)
            								->setFixed(2,HX_("touch",bf,17,33,14),touch)
            								->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            						}
HXDLIN(1412)						_this->isTouchOver = true;
HXDLIN(1412)						hasEventOver = !(_this->overOutEventsBubble);
            					}
            					else {
HXDLIN(1412)						hasEventOver = true;
            					}
HXDLIN(1412)					::haxe::Log_obj::trace(HX_("hasEventDown",e2,e6,cc,7e), ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("className",a3,92,3d,dc),HX_("peote.ui.PeoteUIDisplay",ba,64,f7,96))
            						->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,hasEventDown))
            						->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("touchStart",23,58,9c,7d))
            						->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("peote/ui/PeoteUIDisplay.hx",a4,63,e3,b5))
            						->setFixed(4,HX_("lineNumber",dd,81,22,76),846)));
HXDLIN(1412)					if (hasEventDown) {
HXDLIN(1412)						if (::hx::IsNotNull( _this->onPointerDown )) {
HXDLIN(1412)							_this->onPointerDown(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("x",78,00,00,00),x)
            								->setFixed(1,HX_("y",79,00,00,00),y)
            								->setFixed(2,HX_("touch",bf,17,33,14),touch)
            								->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            						}
HXDLIN(1412)						_this->isTouchDown = (_this->isTouchDown | (1 << touch->id));
HXDLIN(1412)						hasEventDown = !(_this->upDownEventsBubble);
            					}
            					else {
HXDLIN(1412)						hasEventDown = true;
            					}
            				}
            			}
HXDLIN(1412)			bool _hx_tmp9;
HXDLIN(1412)			if (!(hasEventOver)) {
HXDLIN(1412)				_hx_tmp9 = hasEventDown;
            			}
            			else {
HXDLIN(1412)				_hx_tmp9 = true;
            			}
HXDLIN(1412)			if (_hx_tmp9) {
HXDLIN(1412)				goto _hx_goto_58;
            			}
            		}
            		_hx_goto_58:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PeoteUIDisplay_obj,touchStartActive,(void))

void PeoteUIDisplay_obj::touchEndActive( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1413_touchEndActive)
HXDLIN(1413)		int _g = 0;
HXDLIN(1413)		int _g1 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN(1413)		while((_g < _g1)){
HXDLIN(1413)			_g = (_g + 1);
HXDLIN(1413)			int i = (_g - 1);
HXDLIN(1413)			{
HXDLIN(1413)				 ::peote::ui::PeoteUIDisplay _this = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN(1413)				bool _hx_tmp;
HXDLIN(1413)				bool _hx_tmp1;
HXDLIN(1413)				if (_this->touchEnabled) {
HXDLIN(1413)					_hx_tmp1 = ::hx::IsNotNull( _this->peoteView );
            				}
            				else {
HXDLIN(1413)					_hx_tmp1 = false;
            				}
HXDLIN(1413)				if (_hx_tmp1) {
HXDLIN(1413)					_hx_tmp = (touch->id < _this->maxTouchpoints);
            				}
            				else {
HXDLIN(1413)					_hx_tmp = false;
            				}
HXDLIN(1413)				if (_hx_tmp) {
HXDLIN(1413)					int x = ::Math_obj::round((touch->x * ( (Float)(_this->peoteView->width) )));
HXDLIN(1413)					int y = ::Math_obj::round((touch->y * ( (Float)(_this->peoteView->height) )));
HXDLIN(1413)					int pickedIndex;
HXDLIN(1413)					 ::peote::ui::interactive::Interactive pickedElem = null();
HXDLIN(1413)					int _lastTouchDownIndex = ( (int)(_hx_array_unsafe_get(_this->lastTouchDownIndex,touch->id)) );
HXDLIN(1413)					if ((_lastTouchDownIndex >= 0)) {
HXDLIN(1413)						 ::peote::ui::interactive::Interactive lastTouchDownElem = _this->clickPickBuffer->getElement(_lastTouchDownIndex)->uiElement;
HXDLIN(1413)						bool startClick = false;
HXDLIN(1413)						int px = x;
HXDLIN(1413)						int py = y;
HXDLIN(1413)						px = ::Std_obj::_hx_int(((( (Float)(px) ) / _this->peoteView->xz) - _this->peoteView->xOffset));
HXDLIN(1413)						py = ::Std_obj::_hx_int(((( (Float)(py) ) / _this->peoteView->yz) - _this->peoteView->yOffset));
HXDLIN(1413)						bool pickedIndex1;
HXDLIN(1413)						bool pickedIndex2;
HXDLIN(1413)						bool pickedIndex3;
HXDLIN(1413)						if ((px >= _this->x)) {
HXDLIN(1413)							pickedIndex3 = (px < (_this->x + _this->width));
            						}
            						else {
HXDLIN(1413)							pickedIndex3 = false;
            						}
HXDLIN(1413)						if (pickedIndex3) {
HXDLIN(1413)							pickedIndex2 = (py >= _this->y);
            						}
            						else {
HXDLIN(1413)							pickedIndex2 = false;
            						}
HXDLIN(1413)						if (pickedIndex2) {
HXDLIN(1413)							pickedIndex1 = (py < (_this->y + _this->height));
            						}
            						else {
HXDLIN(1413)							pickedIndex1 = false;
            						}
HXDLIN(1413)						if (pickedIndex1) {
HXDLIN(1413)							pickedIndex = _this->peoteView->getElementAt(( (Float)(x) ),( (Float)(y) ),_this,_this->clickPickProgram);
            						}
            						else {
HXDLIN(1413)							pickedIndex = -1;
            						}
HXDLIN(1413)						if ((pickedIndex >= 0)) {
HXDLIN(1413)							pickedElem = _this->clickPickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN(1413)							if (lastTouchDownElem->intoUpDownEventBubbleOf(pickedElem)) {
HXDLIN(1413)								startClick = true;
            							}
            						}
HXDLIN(1413)						while(::hx::IsNotNull( lastTouchDownElem )){
HXDLIN(1413)							lastTouchDownElem->pointerUp( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("x",78,00,00,00),x)
            								->setFixed(1,HX_("y",79,00,00,00),y)
            								->setFixed(2,HX_("touch",bf,17,33,14),touch)
            								->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1413)							bool _hx_tmp2;
HXDLIN(1413)							if (!(startClick)) {
HXDLIN(1413)								_hx_tmp2 = ::hx::IsInstanceEq( pickedElem,lastTouchDownElem );
            							}
            							else {
HXDLIN(1413)								_hx_tmp2 = false;
            							}
HXDLIN(1413)							if (_hx_tmp2) {
HXDLIN(1413)								startClick = true;
            							}
HXDLIN(1413)							if (startClick) {
HXDLIN(1413)								lastTouchDownElem->pointerClick( ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("x",78,00,00,00),x)
            									->setFixed(1,HX_("y",79,00,00,00),y)
            									->setFixed(2,HX_("touch",bf,17,33,14),touch)
            									->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            							}
HXDLIN(1413)							lastTouchDownElem = lastTouchDownElem->upDownEventsBubbleTo;
            						}
HXDLIN(1413)						_this->lastTouchDownIndex->__unsafe_set(touch->id,-1);
HXDLIN(1413)						_this->lockTouchDown = (_this->lockTouchDown - (1 << touch->id));
            					}
HXDLIN(1413)					int px1 = x;
HXDLIN(1413)					int py1 = y;
HXDLIN(1413)					px1 = ::Std_obj::_hx_int(((( (Float)(px1) ) / _this->peoteView->xz) - _this->peoteView->xOffset));
HXDLIN(1413)					py1 = ::Std_obj::_hx_int(((( (Float)(py1) ) / _this->peoteView->yz) - _this->peoteView->yOffset));
HXDLIN(1413)					bool pickedIndex4;
HXDLIN(1413)					bool pickedIndex5;
HXDLIN(1413)					bool pickedIndex6;
HXDLIN(1413)					if ((px1 >= _this->x)) {
HXDLIN(1413)						pickedIndex6 = (px1 < (_this->x + _this->width));
            					}
            					else {
HXDLIN(1413)						pickedIndex6 = false;
            					}
HXDLIN(1413)					if (pickedIndex6) {
HXDLIN(1413)						pickedIndex5 = (py1 >= _this->y);
            					}
            					else {
HXDLIN(1413)						pickedIndex5 = false;
            					}
HXDLIN(1413)					if (pickedIndex5) {
HXDLIN(1413)						pickedIndex4 = (py1 < (_this->y + _this->height));
            					}
            					else {
HXDLIN(1413)						pickedIndex4 = false;
            					}
HXDLIN(1413)					if (pickedIndex4) {
HXDLIN(1413)						pickedIndex = _this->peoteView->getElementAt(( (Float)(x) ),( (Float)(y) ),_this,_this->movePickProgram);
            					}
            					else {
HXDLIN(1413)						pickedIndex = -1;
            					}
HXDLIN(1413)					bool _hx_tmp3;
HXDLIN(1413)					if ((pickedIndex >= 0)) {
HXDLIN(1413)						_hx_tmp3 = ::hx::IsEq( pickedIndex,_hx_array_unsafe_get(_this->lastTouchOverIndex,touch->id) );
            					}
            					else {
HXDLIN(1413)						_hx_tmp3 = false;
            					}
HXDLIN(1413)					if (_hx_tmp3) {
HXDLIN(1413)						pickedElem = _this->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN(1413)						while(::hx::IsNotNull( pickedElem )){
HXDLIN(1413)							pickedElem->pointerOut( ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("x",78,00,00,00),x)
            								->setFixed(1,HX_("y",79,00,00,00),y)
            								->setFixed(2,HX_("touch",bf,17,33,14),touch)
            								->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1413)							pickedElem = pickedElem->overOutEventsBubbleTo;
            						}
HXDLIN(1413)						_this->lastTouchOverIndex->__unsafe_set(touch->id,-1);
            					}
HXDLIN(1413)					if (((_this->isTouchDown & (1 << touch->id)) > 0)) {
HXDLIN(1413)						_this->isTouchDown = (_this->isTouchDown - (1 << touch->id));
HXDLIN(1413)						if (_this->isTouchOver) {
HXDLIN(1413)							if (::hx::IsNotNull( _this->onPointerOut )) {
HXDLIN(1413)								_this->onPointerOut(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("x",78,00,00,00),x)
            									->setFixed(1,HX_("y",79,00,00,00),y)
            									->setFixed(2,HX_("touch",bf,17,33,14),touch)
            									->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            							}
HXDLIN(1413)							_this->isTouchOver = false;
            						}
HXDLIN(1413)						if (::hx::IsNotNull( _this->onPointerUp )) {
HXDLIN(1413)							_this->onPointerUp(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("x",78,00,00,00),x)
            								->setFixed(1,HX_("y",79,00,00,00),y)
            								->setFixed(2,HX_("touch",bf,17,33,14),touch)
            								->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            						}
HXDLIN(1413)						bool _hx_tmp4;
HXDLIN(1413)						if (::hx::IsNotNull( _this->onPointerClick )) {
HXDLIN(1413)							int px2 = x;
HXDLIN(1413)							int py2 = y;
HXDLIN(1413)							px2 = ::Std_obj::_hx_int(((( (Float)(px2) ) / _this->peoteView->xz) - _this->peoteView->xOffset));
HXDLIN(1413)							py2 = ::Std_obj::_hx_int(((( (Float)(py2) ) / _this->peoteView->yz) - _this->peoteView->yOffset));
HXDLIN(1413)							bool _hx_tmp5;
HXDLIN(1413)							bool _hx_tmp6;
HXDLIN(1413)							if ((px2 >= _this->x)) {
HXDLIN(1413)								_hx_tmp6 = (px2 < (_this->x + _this->width));
            							}
            							else {
HXDLIN(1413)								_hx_tmp6 = false;
            							}
HXDLIN(1413)							if (_hx_tmp6) {
HXDLIN(1413)								_hx_tmp5 = (py2 >= _this->y);
            							}
            							else {
HXDLIN(1413)								_hx_tmp5 = false;
            							}
HXDLIN(1413)							if (_hx_tmp5) {
HXDLIN(1413)								_hx_tmp4 = (py2 < (_this->y + _this->height));
            							}
            							else {
HXDLIN(1413)								_hx_tmp4 = false;
            							}
            						}
            						else {
HXDLIN(1413)							_hx_tmp4 = false;
            						}
HXDLIN(1413)						if (_hx_tmp4) {
HXDLIN(1413)							_this->onPointerClick(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("x",78,00,00,00),x)
            								->setFixed(1,HX_("y",79,00,00,00),y)
            								->setFixed(2,HX_("touch",bf,17,33,14),touch)
            								->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PeoteUIDisplay_obj,touchEndActive,(void))

void PeoteUIDisplay_obj::touchCancelActive( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1414_touchCancelActive)
HXDLIN(1414)		int _g = 0;
HXDLIN(1414)		int _g1 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN(1414)		while((_g < _g1)){
HXDLIN(1414)			_g = (_g + 1);
HXDLIN(1414)			int i = (_g - 1);
HXDLIN(1414)			{
HXDLIN(1414)				 ::peote::ui::PeoteUIDisplay _this = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN(1414)				::haxe::Log_obj::trace(HX_("onTouchCancel",ba,6f,54,80), ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("className",a3,92,3d,dc),HX_("peote.ui.PeoteUIDisplay",ba,64,f7,96))
            					->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(3)->init(0,touch->id)->init(1,::Math_obj::round((touch->x * ( (Float)(_this->peoteView->width) ))))->init(2,::Math_obj::round((touch->y * ( (Float)(_this->peoteView->height) )))))
            					->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("touchCancel",99,52,6a,1d))
            					->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("peote/ui/PeoteUIDisplay.hx",a4,63,e3,b5))
            					->setFixed(4,HX_("lineNumber",dd,81,22,76),990)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PeoteUIDisplay_obj,touchCancelActive,(void))

void PeoteUIDisplay_obj::keyDownActive(int keyCode,int modifier){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1416_keyDownActive)
HXDLIN(1416)		int _g = 0;
HXDLIN(1416)		int _g1 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN(1416)		while((_g < _g1)){
HXDLIN(1416)			_g = (_g + 1);
HXDLIN(1416)			int i = (_g - 1);
HXDLIN(1416)			{
HXDLIN(1416)				 ::peote::ui::PeoteUIDisplay _this = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN(1416)				if (::hx::IsNotNull( _this->inputFocusElement )) {
HXDLIN(1416)					::peote::ui::interactive::interfaces::InputFocus_obj::keyDown(_this->inputFocusElement,keyCode,modifier);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PeoteUIDisplay_obj,keyDownActive,(void))

void PeoteUIDisplay_obj::keyUpActive(int keyCode,int modifier){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1417_keyUpActive)
HXDLIN(1417)		int _g = 0;
HXDLIN(1417)		int _g1 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN(1417)		while((_g < _g1)){
HXDLIN(1417)			_g = (_g + 1);
HXDLIN(1417)			int i = (_g - 1);
HXDLIN(1417)			{
HXDLIN(1417)				 ::peote::ui::PeoteUIDisplay _this = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN(1417)				if (::hx::IsNotNull( _this->inputFocusElement )) {
HXDLIN(1417)					::peote::ui::interactive::interfaces::InputFocus_obj::keyUp(_this->inputFocusElement,keyCode,modifier);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PeoteUIDisplay_obj,keyUpActive,(void))

void PeoteUIDisplay_obj::textInputActive(::String text){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1418_textInputActive)
HXDLIN(1418)		if (::hx::IsNotNull( ::peote::ui::PeoteUIDisplay_obj::inputFocusUIDisplay )) {
HXDLIN(1418)			 ::peote::ui::PeoteUIDisplay _this = ::peote::ui::PeoteUIDisplay_obj::inputFocusUIDisplay;
HXDLIN(1418)			if (::hx::IsNotNull( _this->inputFocusElement )) {
HXDLIN(1418)				::peote::ui::interactive::interfaces::InputFocus_obj::textInput(_this->inputFocusElement,text);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PeoteUIDisplay_obj,textInputActive,(void))

void PeoteUIDisplay_obj::registerEvents( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1425_registerEvents)
HXLINE(1427)		window->_hx___backend->setTextInputEnabled(true);
HXLINE(1430)		window->onMouseUp->add(::peote::ui::PeoteUIDisplay_obj::mouseUpActive_dyn(),null(),null());
HXLINE(1431)		window->onMouseDown->add(::peote::ui::PeoteUIDisplay_obj::mouseDownActive_dyn(),null(),null());
HXLINE(1432)		window->onMouseWheel->add(::peote::ui::PeoteUIDisplay_obj::mouseWheelActive_dyn(),null(),null());
HXLINE(1434)		::lime::ui::Touch_obj::onStart->add(::peote::ui::PeoteUIDisplay_obj::touchStartActive_dyn(),null(),null());
HXLINE(1435)		::lime::ui::Touch_obj::onMove->add(::peote::ui::PeoteUIDisplay_obj::touchMoveActive_dyn(),null(),null());
HXLINE(1436)		::lime::ui::Touch_obj::onEnd->add(::peote::ui::PeoteUIDisplay_obj::touchEndActive_dyn(),null(),null());
HXLINE(1437)		::lime::ui::Touch_obj::onCancel->add(::peote::ui::PeoteUIDisplay_obj::touchCancelActive_dyn(),null(),null());
HXLINE(1444)		window->onRender->add(::peote::ui::PeoteUIDisplay_obj::_mouseMoveFrameSynced_dyn(),null(),null());
HXLINE(1445)		window->onMouseMove->add(::peote::ui::PeoteUIDisplay_obj::_mouseMove_dyn(),null(),null());
HXLINE(1446)		window->onLeave->add(::peote::ui::PeoteUIDisplay_obj::_windowLeave_dyn(),null(),null());
HXLINE(1450)		window->onKeyDown->add(::peote::ui::PeoteUIDisplay_obj::keyDownActive_dyn(),null(),null());
HXLINE(1451)		window->onKeyUp->add(::peote::ui::PeoteUIDisplay_obj::keyUpActive_dyn(),null(),null());
HXLINE(1452)		window->onTextInput->add(::peote::ui::PeoteUIDisplay_obj::textInputActive_dyn(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PeoteUIDisplay_obj,registerEvents,(void))

bool PeoteUIDisplay_obj::isMouseMove;

Float PeoteUIDisplay_obj::lastMouseMoveX;

Float PeoteUIDisplay_obj::lastMouseMoveY;

void PeoteUIDisplay_obj::_mouseMove(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1468__mouseMove)
HXLINE(1469)		::peote::ui::PeoteUIDisplay_obj::lastMouseMoveX = x;
HXLINE(1470)		::peote::ui::PeoteUIDisplay_obj::lastMouseMoveY = y;
HXLINE(1471)		::peote::ui::PeoteUIDisplay_obj::isMouseMove = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PeoteUIDisplay_obj,_mouseMove,(void))

void PeoteUIDisplay_obj::_mouseMoveFrameSynced( ::lime::graphics::RenderContext context){
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1475__mouseMoveFrameSynced)
HXDLIN(1475)		if (::peote::ui::PeoteUIDisplay_obj::isMouseMove) {
HXLINE(1476)			::peote::ui::PeoteUIDisplay_obj::isMouseMove = false;
HXLINE(1477)			{
HXLINE(1477)				Float mouseX = ::peote::ui::PeoteUIDisplay_obj::lastMouseMoveX;
HXDLIN(1477)				Float mouseY = ::peote::ui::PeoteUIDisplay_obj::lastMouseMoveY;
HXDLIN(1477)				int checkForEvent = 3;
HXDLIN(1477)				if ((::peote::ui::PeoteUIDisplay_obj::draggingMouseDisplays->length > 0)) {
HXLINE(1477)					int _g = 0;
HXDLIN(1477)					::Array< ::Dynamic> _g1 = ::peote::ui::PeoteUIDisplay_obj::draggingMouseDisplays;
HXDLIN(1477)					while((_g < _g1->length)){
HXLINE(1477)						 ::peote::ui::PeoteUIDisplay d = _g1->__get(_g).StaticCast<  ::peote::ui::PeoteUIDisplay >();
HXDLIN(1477)						_g = (_g + 1);
HXDLIN(1477)						if (d->mouseEnabled) {
HXLINE(1477)							if (::hx::IsNotNull( d->peoteView )) {
HXLINE(1477)								int toX = ::Std_obj::_hx_int(((mouseX / d->peoteView->xz) / d->xz));
HXDLIN(1477)								int toY = ::Std_obj::_hx_int(((mouseY / d->peoteView->yz) / d->yz));
HXDLIN(1477)								if ((toX >= (d->dragMinX + d->dragOriginX))) {
HXLINE(1477)									if ((toX < ((d->dragMaxX - d->width) + d->dragOriginX))) {
HXLINE(1477)										int _x = (toX - d->dragOriginX);
HXDLIN(1477)										d->x = _x;
            									}
            									else {
HXLINE(1477)										int _x1 = (d->dragMaxX - d->width);
HXDLIN(1477)										d->x = _x1;
            									}
            								}
            								else {
HXLINE(1477)									int _x2 = d->dragMinX;
HXDLIN(1477)									d->x = _x2;
            								}
HXDLIN(1477)								if ((toY >= (d->dragMinY + d->dragOriginY))) {
HXLINE(1477)									if ((toY < ((d->dragMaxY - d->height) + d->dragOriginY))) {
HXLINE(1477)										int _y = (toY - d->dragOriginY);
HXDLIN(1477)										d->y = _y;
            									}
            									else {
HXLINE(1477)										int _y1 = (d->dragMaxY - d->height);
HXDLIN(1477)										d->y = _y1;
            									}
            								}
            								else {
HXLINE(1477)									int _y2 = d->dragMinY;
HXDLIN(1477)									d->y = _y2;
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE(1477)					int _g2 = 0;
HXDLIN(1477)					int _g3 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN(1477)					while((_g2 < _g3)){
HXLINE(1477)						_g2 = (_g2 + 1);
HXDLIN(1477)						int i = (_g2 - 1);
HXDLIN(1477)						 ::peote::ui::PeoteUIDisplay _this = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN(1477)						int checkForEvent1 = checkForEvent;
HXDLIN(1477)						bool checkForEvent2;
HXDLIN(1477)						if (_this->mouseEnabled) {
HXLINE(1477)							checkForEvent2 = ::hx::IsNotNull( _this->peoteView );
            						}
            						else {
HXLINE(1477)							checkForEvent2 = false;
            						}
HXDLIN(1477)						if (checkForEvent2) {
HXLINE(1477)							int x = ::Std_obj::_hx_int((_this->lastMouseX = mouseX));
HXDLIN(1477)							int y = ::Std_obj::_hx_int((_this->lastMouseY = mouseY));
HXDLIN(1477)							bool isInside = false;
HXDLIN(1477)							int pickedIndex = -1;
HXDLIN(1477)							bool checkForEvent3;
HXDLIN(1477)							if ((checkForEvent1 > 0)) {
HXLINE(1477)								int px = x;
HXDLIN(1477)								int py = y;
HXDLIN(1477)								px = ::Std_obj::_hx_int(((( (Float)(px) ) / _this->peoteView->xz) - _this->peoteView->xOffset));
HXDLIN(1477)								py = ::Std_obj::_hx_int(((( (Float)(py) ) / _this->peoteView->yz) - _this->peoteView->yOffset));
HXDLIN(1477)								bool checkForEvent4;
HXDLIN(1477)								bool checkForEvent5;
HXDLIN(1477)								if ((px >= _this->x)) {
HXLINE(1477)									checkForEvent5 = (px < (_this->x + _this->width));
            								}
            								else {
HXLINE(1477)									checkForEvent5 = false;
            								}
HXDLIN(1477)								if (checkForEvent5) {
HXLINE(1477)									checkForEvent4 = (py >= _this->y);
            								}
            								else {
HXLINE(1477)									checkForEvent4 = false;
            								}
HXDLIN(1477)								if (checkForEvent4) {
HXLINE(1477)									checkForEvent3 = (py < (_this->y + _this->height));
            								}
            								else {
HXLINE(1477)									checkForEvent3 = false;
            								}
            							}
            							else {
HXLINE(1477)								checkForEvent3 = false;
            							}
HXDLIN(1477)							if (checkForEvent3) {
HXLINE(1477)								isInside = true;
HXDLIN(1477)								pickedIndex = _this->peoteView->getElementAt(mouseX,mouseY,_this,_this->movePickProgram);
            							}
HXDLIN(1477)							if (::hx::IsNotNull( ::peote::ui::PeoteUIDisplay_obj::intoSelectionTextLine )) {
HXLINE(1477)								::Dynamic checkForEvent6 = ::peote::ui::PeoteUIDisplay_obj::intoSelectionTextLine;
HXDLIN(1477)								 ::peote::view::PeoteView peoteView = null();
HXDLIN(1477)								if (::hx::IsNull( peoteView )) {
HXLINE(1477)									peoteView = _this->peoteView;
            								}
HXDLIN(1477)								Float checkForEvent7;
HXDLIN(1477)								if (::hx::IsNotNull( peoteView )) {
HXLINE(1477)									checkForEvent7 = (((((( (Float)(x) ) / peoteView->xz) - peoteView->xOffset) - _this->xOffset) - ( (Float)(_this->x) )) / _this->xz);
            								}
            								else {
HXLINE(1477)									checkForEvent7 = (((( (Float)(x) ) - _this->xOffset) - ( (Float)(_this->x) )) / _this->xz);
            								}
HXDLIN(1477)								int checkForEvent8 = ::Std_obj::_hx_int(checkForEvent7);
HXDLIN(1477)								 ::peote::view::PeoteView peoteView1 = null();
HXDLIN(1477)								if (::hx::IsNull( peoteView1 )) {
HXLINE(1477)									peoteView1 = _this->peoteView;
            								}
HXDLIN(1477)								Float checkForEvent9;
HXDLIN(1477)								if (::hx::IsNotNull( peoteView1 )) {
HXLINE(1477)									checkForEvent9 = (((((( (Float)(y) ) / peoteView1->xz) - peoteView1->xOffset) - _this->xOffset) - ( (Float)(_this->x) )) / _this->xz);
            								}
            								else {
HXLINE(1477)									checkForEvent9 = (((( (Float)(y) ) - _this->xOffset) - ( (Float)(_this->x) )) / _this->xz);
            								}
HXDLIN(1477)								::peote::ui::interactive::interfaces::InputText_obj::onSelect(checkForEvent6, ::Dynamic(::hx::Anon_obj::Create(3)
            									->setFixed(0,HX_("x",78,00,00,00),checkForEvent8)
            									->setFixed(1,HX_("y",79,00,00,00),::Std_obj::_hx_int(checkForEvent9))
            									->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            							}
            							else {
HXLINE(1477)								if ((_this->draggingMouseElements->length > 0)) {
HXLINE(1477)									int _g4 = 0;
HXDLIN(1477)									::Array< ::Dynamic> _g5 = _this->draggingMouseElements;
HXDLIN(1477)									while((_g4 < _g5->length)){
HXLINE(1477)										 ::peote::ui::interactive::Interactive uiElement = _g5->__get(_g4).StaticCast<  ::peote::ui::interactive::Interactive >();
HXDLIN(1477)										_g4 = (_g4 + 1);
HXDLIN(1477)										{
HXLINE(1477)											int dragToX = x;
HXDLIN(1477)											int dragToY = y;
HXDLIN(1477)											dragToX = ::Std_obj::_hx_int(((( (Float)(dragToX) ) / uiElement->uiDisplay->peoteView->xz) / uiElement->uiDisplay->xz));
HXDLIN(1477)											dragToY = ::Std_obj::_hx_int(((( (Float)(dragToY) ) / uiElement->uiDisplay->peoteView->yz) / uiElement->uiDisplay->yz));
HXDLIN(1477)											if ((dragToX >= (uiElement->dragMinX + uiElement->dragOriginX))) {
HXLINE(1477)												if ((dragToX < ((uiElement->dragMaxX - uiElement->width) + uiElement->dragOriginX))) {
HXLINE(1477)													uiElement->x = (dragToX - uiElement->dragOriginX);
            												}
            												else {
HXLINE(1477)													uiElement->x = (uiElement->dragMaxX - uiElement->width);
            												}
            											}
            											else {
HXLINE(1477)												uiElement->x = uiElement->dragMinX;
            											}
HXDLIN(1477)											if ((dragToY >= (uiElement->dragMinY + uiElement->dragOriginY))) {
HXLINE(1477)												if ((dragToY < ((uiElement->dragMaxY - uiElement->height) + uiElement->dragOriginY))) {
HXLINE(1477)													uiElement->y = (dragToY - uiElement->dragOriginY);
            												}
            												else {
HXLINE(1477)													uiElement->y = (uiElement->dragMaxY - uiElement->height);
            												}
            											}
            											else {
HXLINE(1477)												uiElement->y = uiElement->dragMinY;
            											}
HXDLIN(1477)											if (::hx::IsNotNull( uiElement->drag )) {
HXLINE(1477)												int _dx = ((uiElement->dragMaxX - uiElement->dragMinX) - uiElement->width);
HXDLIN(1477)												int _dy = ((uiElement->dragMaxY - uiElement->dragMinY) - uiElement->height);
HXDLIN(1477)												Float checkForEvent10;
HXDLIN(1477)												if ((_dx != 0)) {
HXLINE(1477)													checkForEvent10 = (( (Float)((uiElement->x - uiElement->dragMinX)) ) / ( (Float)(_dx) ));
            												}
            												else {
HXLINE(1477)													checkForEvent10 = ((Float)0.0);
            												}
HXDLIN(1477)												Float checkForEvent11;
HXDLIN(1477)												if ((_dy != 0)) {
HXLINE(1477)													checkForEvent11 = (( (Float)((uiElement->y - uiElement->dragMinY)) ) / ( (Float)(_dy) ));
            												}
            												else {
HXLINE(1477)													checkForEvent11 = ((Float)0.0);
            												}
HXDLIN(1477)												uiElement->drag(checkForEvent10,checkForEvent11);
            											}
            										}
HXDLIN(1477)										uiElement->updateLayout();
            									}
            								}
            								else {
HXLINE(1477)									bool hasEventOver = false;
HXDLIN(1477)									bool hasEventOut = false;
HXDLIN(1477)									if ((pickedIndex != _this->lastMouseOverIndex)) {
HXLINE(1477)										if ((_this->lastMouseOverIndex >= 0)) {
HXLINE(1477)											 ::peote::ui::interactive::Interactive lastElem = _this->movePickBuffer->getElement(_this->lastMouseOverIndex)->uiElement;
HXDLIN(1477)											if ((pickedIndex >= 0)) {
HXLINE(1477)												 ::peote::ui::interactive::Interactive pickedElem = _this->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN(1477)												if (lastElem->intoOverOutEventBubbleOf(pickedElem)) {
HXLINE(1477)													while(true){
HXLINE(1477)														bool checkForEvent12;
HXDLIN(1477)														if (::hx::IsNotNull( pickedElem )) {
HXLINE(1477)															checkForEvent12 = ::hx::IsInstanceNotEq( pickedElem,lastElem );
            														}
            														else {
HXLINE(1477)															checkForEvent12 = false;
            														}
HXDLIN(1477)														if (!(checkForEvent12)) {
HXLINE(1477)															goto _hx_goto_78;
            														}
HXDLIN(1477)														pickedElem->pointerOver( ::Dynamic(::hx::Anon_obj::Create(3)
            															->setFixed(0,HX_("x",78,00,00,00),x)
            															->setFixed(1,HX_("y",79,00,00,00),y)
            															->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN(1477)														bool checkForEvent13;
HXDLIN(1477)														if (::hx::IsNull( pickedElem->overOutEventsBubbleTo )) {
HXLINE(1477)															checkForEvent13 = !(pickedElem->overOutEventsBubbleToDisplay);
            														}
            														else {
HXLINE(1477)															checkForEvent13 = false;
            														}
HXDLIN(1477)														if (checkForEvent13) {
HXLINE(1477)															hasEventOut = true;
            														}
HXDLIN(1477)														pickedElem = pickedElem->overOutEventsBubbleTo;
            													}
            													_hx_goto_78:;
            												}
            												else {
HXLINE(1477)													while(true){
HXLINE(1477)														bool checkForEvent14;
HXDLIN(1477)														if (::hx::IsNotNull( lastElem )) {
HXLINE(1477)															checkForEvent14 = ::hx::IsInstanceNotEq( lastElem,pickedElem );
            														}
            														else {
HXLINE(1477)															checkForEvent14 = false;
            														}
HXDLIN(1477)														if (!(checkForEvent14)) {
HXLINE(1477)															goto _hx_goto_79;
            														}
HXDLIN(1477)														lastElem->pointerOut( ::Dynamic(::hx::Anon_obj::Create(3)
            															->setFixed(0,HX_("x",78,00,00,00),x)
            															->setFixed(1,HX_("y",79,00,00,00),y)
            															->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN(1477)														bool checkForEvent15;
HXDLIN(1477)														if (::hx::IsNull( lastElem->overOutEventsBubbleTo )) {
HXLINE(1477)															checkForEvent15 = !(lastElem->overOutEventsBubbleToDisplay);
            														}
            														else {
HXLINE(1477)															checkForEvent15 = false;
            														}
HXDLIN(1477)														if (checkForEvent15) {
HXLINE(1477)															hasEventOver = true;
            														}
HXDLIN(1477)														lastElem = lastElem->overOutEventsBubbleTo;
            													}
            													_hx_goto_79:;
HXDLIN(1477)													if (::hx::IsNull( lastElem )) {
HXLINE(1477)														while(::hx::IsNotNull( pickedElem )){
HXLINE(1477)															pickedElem->pointerOver( ::Dynamic(::hx::Anon_obj::Create(3)
            																->setFixed(0,HX_("x",78,00,00,00),x)
            																->setFixed(1,HX_("y",79,00,00,00),y)
            																->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN(1477)															bool checkForEvent16;
HXDLIN(1477)															if (::hx::IsNull( pickedElem->overOutEventsBubbleTo )) {
HXLINE(1477)																checkForEvent16 = !(pickedElem->overOutEventsBubbleToDisplay);
            															}
            															else {
HXLINE(1477)																checkForEvent16 = false;
            															}
HXDLIN(1477)															if (checkForEvent16) {
HXLINE(1477)																hasEventOut = true;
            															}
HXDLIN(1477)															pickedElem = pickedElem->overOutEventsBubbleTo;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1477)												while(::hx::IsNotNull( lastElem )){
HXLINE(1477)													lastElem->pointerOut( ::Dynamic(::hx::Anon_obj::Create(3)
            														->setFixed(0,HX_("x",78,00,00,00),x)
            														->setFixed(1,HX_("y",79,00,00,00),y)
            														->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN(1477)													bool checkForEvent17;
HXDLIN(1477)													if (::hx::IsNull( lastElem->overOutEventsBubbleTo )) {
HXLINE(1477)														checkForEvent17 = !(lastElem->overOutEventsBubbleToDisplay);
            													}
            													else {
HXLINE(1477)														checkForEvent17 = false;
            													}
HXDLIN(1477)													if (checkForEvent17) {
HXLINE(1477)														hasEventOver = true;
            													}
HXDLIN(1477)													lastElem = lastElem->overOutEventsBubbleTo;
            												}
            											}
            										}
            										else {
HXLINE(1477)											if ((pickedIndex >= 0)) {
HXLINE(1477)												 ::peote::ui::interactive::Interactive pickedElem1 = _this->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN(1477)												while(::hx::IsNotNull( pickedElem1 )){
HXLINE(1477)													pickedElem1->pointerOver( ::Dynamic(::hx::Anon_obj::Create(3)
            														->setFixed(0,HX_("x",78,00,00,00),x)
            														->setFixed(1,HX_("y",79,00,00,00),y)
            														->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN(1477)													bool checkForEvent18;
HXDLIN(1477)													if (::hx::IsNull( pickedElem1->overOutEventsBubbleTo )) {
HXLINE(1477)														checkForEvent18 = !(pickedElem1->overOutEventsBubbleToDisplay);
            													}
            													else {
HXLINE(1477)														checkForEvent18 = false;
            													}
HXDLIN(1477)													if (checkForEvent18) {
HXLINE(1477)														hasEventOut = true;
            													}
HXDLIN(1477)													pickedElem1 = pickedElem1->overOutEventsBubbleTo;
            												}
            											}
            										}
HXDLIN(1477)										_this->lastMouseOverIndex = pickedIndex;
            									}
HXDLIN(1477)									if (((checkForEvent1 & 2) != 0)) {
HXLINE(1477)										bool hasEventMove = false;
HXDLIN(1477)										if ((pickedIndex >= 0)) {
HXLINE(1477)											 ::peote::ui::interactive::Interactive pickedElem2 = _this->movePickBuffer->getElement(pickedIndex)->uiElement;
HXDLIN(1477)											while(::hx::IsNotNull( pickedElem2 )){
HXLINE(1477)												pickedElem2->pointerMove( ::Dynamic(::hx::Anon_obj::Create(3)
            													->setFixed(0,HX_("x",78,00,00,00),x)
            													->setFixed(1,HX_("y",79,00,00,00),y)
            													->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN(1477)												bool checkForEvent19;
HXDLIN(1477)												if (::hx::IsNull( pickedElem2->moveEventsBubbleTo )) {
HXLINE(1477)													checkForEvent19 = pickedElem2->moveEventsBubbleToDisplay;
            												}
            												else {
HXLINE(1477)													checkForEvent19 = false;
            												}
HXDLIN(1477)												if (checkForEvent19) {
HXLINE(1477)													hasEventMove = true;
            												}
HXDLIN(1477)												pickedElem2 = pickedElem2->moveEventsBubbleTo;
            											}
            										}
            										else {
HXLINE(1477)											hasEventMove = true;
            										}
HXDLIN(1477)										if (hasEventMove) {
HXLINE(1477)											if (::hx::IsNotNull( _this->onPointerMove )) {
HXLINE(1477)												_this->onPointerMove(_this, ::Dynamic(::hx::Anon_obj::Create(3)
            													->setFixed(0,HX_("x",78,00,00,00),x)
            													->setFixed(1,HX_("y",79,00,00,00),y)
            													->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            											}
HXDLIN(1477)											if (!(_this->moveEventsBubble)) {
HXLINE(1477)												checkForEvent1 = (checkForEvent1 - 2);
            											}
            										}
            										else {
HXLINE(1477)											checkForEvent1 = (checkForEvent1 - 2);
            										}
            									}
HXDLIN(1477)									if (((checkForEvent1 & 1) != 0)) {
HXLINE(1477)										if (isInside) {
HXLINE(1477)											if (!(_this->isMouseInside)) {
HXLINE(1477)												_this->isMouseInside = true;
HXDLIN(1477)												hasEventOver = true;
            											}
            										}
            										else {
HXLINE(1477)											if (_this->isMouseInside) {
HXLINE(1477)												_this->isMouseInside = false;
HXDLIN(1477)												hasEventOut = true;
            											}
            										}
HXDLIN(1477)										bool checkForEvent20;
HXDLIN(1477)										if (hasEventOver) {
HXLINE(1477)											checkForEvent20 = !(hasEventOut);
            										}
            										else {
HXLINE(1477)											checkForEvent20 = false;
            										}
HXDLIN(1477)										if (checkForEvent20) {
HXLINE(1477)											if (::hx::IsNotNull( _this->onPointerOver )) {
HXLINE(1477)												_this->onPointerOver(_this, ::Dynamic(::hx::Anon_obj::Create(3)
            													->setFixed(0,HX_("x",78,00,00,00),x)
            													->setFixed(1,HX_("y",79,00,00,00),y)
            													->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            											}
HXDLIN(1477)											_this->isMouseOver = true;
            										}
            										else {
HXLINE(1477)											bool checkForEvent21;
HXDLIN(1477)											if (hasEventOut) {
HXLINE(1477)												checkForEvent21 = !(hasEventOver);
            											}
            											else {
HXLINE(1477)												checkForEvent21 = false;
            											}
HXDLIN(1477)											if (checkForEvent21) {
HXLINE(1477)												if (::hx::IsNotNull( _this->onPointerOut )) {
HXLINE(1477)													_this->onPointerOut(_this, ::Dynamic(::hx::Anon_obj::Create(3)
            														->setFixed(0,HX_("x",78,00,00,00),x)
            														->setFixed(1,HX_("y",79,00,00,00),y)
            														->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            												}
HXDLIN(1477)												_this->isMouseOver = false;
            											}
            										}
HXDLIN(1477)										if (_this->isMouseInside) {
HXLINE(1477)											bool checkForEvent22;
HXDLIN(1477)											if (_this->isMouseOver) {
HXLINE(1477)												checkForEvent22 = !(_this->overOutEventsBubble);
            											}
            											else {
HXLINE(1477)												checkForEvent22 = true;
            											}
HXDLIN(1477)											if (checkForEvent22) {
HXLINE(1477)												checkForEvent1 = (checkForEvent1 - 1);
            											}
            										}
            									}
            									else {
HXLINE(1477)										if (_this->isMouseInside) {
HXLINE(1477)											if (::hx::IsNotNull( _this->onPointerOut )) {
HXLINE(1477)												_this->onPointerOut(_this, ::Dynamic(::hx::Anon_obj::Create(3)
            													->setFixed(0,HX_("x",78,00,00,00),x)
            													->setFixed(1,HX_("y",79,00,00,00),y)
            													->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            											}
HXDLIN(1477)											_this->isMouseInside = (_this->isMouseOver = false);
            										}
            									}
            								}
            							}
            						}
HXDLIN(1477)						checkForEvent = checkForEvent1;
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PeoteUIDisplay_obj,_mouseMoveFrameSynced,(void))

void PeoteUIDisplay_obj::_windowLeave(){
            	HX_GC_STACKFRAME(&_hx_pos_c7537b15687821b9_1481__windowLeave)
HXLINE(1482)		::peote::ui::PeoteUIDisplay_obj::lastMouseMoveX = (::peote::ui::PeoteUIDisplay_obj::lastMouseMoveY = ( (Float)(-1) ));
HXLINE(1483)		{
HXLINE(1483)			int _g = 0;
HXDLIN(1483)			int _g1 = ::peote::ui::PeoteUIDisplay_obj::maxActiveIndex;
HXDLIN(1483)			while((_g < _g1)){
HXLINE(1483)				_g = (_g + 1);
HXDLIN(1483)				int i = (_g - 1);
HXDLIN(1483)				{
HXLINE(1483)					 ::peote::ui::PeoteUIDisplay _this = ( ( ::peote::ui::PeoteUIDisplay)(_hx_array_unsafe_get(::peote::ui::PeoteUIDisplay_obj::activeUIDisplay,i)) );
HXDLIN(1483)					::haxe::Log_obj::trace(HX_("----------windowLeave-----------",a6,4c,ab,0e),::hx::SourceInfo(HX_("peote/ui/PeoteUIDisplay.hx",a4,63,e3,b5),994,HX_("peote.ui.PeoteUIDisplay",ba,64,f7,96),HX_("windowLeave",e7,ca,25,63)));
HXDLIN(1483)					 ::peote::ui::interactive::Interactive lastElem;
HXDLIN(1483)					if ((_this->lastMouseOverIndex >= 0)) {
HXLINE(1483)						lastElem = _this->movePickBuffer->getElement(_this->lastMouseOverIndex)->uiElement;
HXDLIN(1483)						while(::hx::IsNotNull( lastElem )){
HXLINE(1483)							lastElem->pointerOut( ::Dynamic(::hx::Anon_obj::Create(3)
            								->setFixed(0,HX_("x",78,00,00,00),-1)
            								->setFixed(1,HX_("y",79,00,00,00),-1)
            								->setFixed(2,HX_("type",ba,f2,08,4d),0)));
HXDLIN(1483)							lastElem = lastElem->overOutEventsBubbleTo;
            						}
HXDLIN(1483)						_this->lastMouseOverIndex = -1;
            					}
HXDLIN(1483)					int lastIndex;
HXDLIN(1483)					{
HXLINE(1483)						int _g2 = 0;
HXDLIN(1483)						int _g3 = _this->lastMouseDownIndex->length;
HXDLIN(1483)						while((_g2 < _g3)){
HXLINE(1483)							_g2 = (_g2 + 1);
HXDLIN(1483)							int i1 = (_g2 - 1);
HXDLIN(1483)							lastIndex = ( (int)(_hx_array_unsafe_get(_this->lastMouseDownIndex,i1)) );
HXDLIN(1483)							if ((lastIndex >= 0)) {
HXLINE(1483)								lastElem = _this->clickPickBuffer->getElement(lastIndex)->uiElement;
HXDLIN(1483)								while(::hx::IsNotNull( lastElem )){
HXLINE(1483)									lastElem->pointerUp( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("mouseButton",f7,95,68,cf),i1)
            										->setFixed(1,HX_("x",78,00,00,00),-1)
            										->setFixed(2,HX_("y",79,00,00,00),-1)
            										->setFixed(3,HX_("type",ba,f2,08,4d),0)));
HXDLIN(1483)									lastElem = lastElem->upDownEventsBubbleTo;
            								}
HXDLIN(1483)								_this->lastMouseDownIndex->__unsafe_set(i1,-1);
            							}
            						}
            					}
HXDLIN(1483)					_this->lockMouseDown = 0;
HXDLIN(1483)					if (_this->isMouseOver) {
HXLINE(1483)						if (::hx::IsNotNull( _this->onPointerOut )) {
HXLINE(1483)							_this->onPointerOut(_this, ::Dynamic(::hx::Anon_obj::Create(3)
            								->setFixed(0,HX_("x",78,00,00,00),-1)
            								->setFixed(1,HX_("y",79,00,00,00),-1)
            								->setFixed(2,HX_("type",ba,f2,08,4d),0)));
            						}
HXDLIN(1483)						_this->isMouseInside = false;
HXDLIN(1483)						_this->isMouseOver = false;
            					}
HXDLIN(1483)					int button = 0;
HXDLIN(1483)					while((_this->isMouseDown > 0)){
HXLINE(1483)						if (((_this->isMouseDown & (1 << button)) > 0)) {
HXLINE(1483)							if (::hx::IsNotNull( _this->onPointerUp )) {
HXLINE(1483)								_this->onPointerUp(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("mouseButton",f7,95,68,cf),button)
            									->setFixed(1,HX_("x",78,00,00,00),-1)
            									->setFixed(2,HX_("y",79,00,00,00),-1)
            									->setFixed(3,HX_("type",ba,f2,08,4d),0)));
            							}
HXDLIN(1483)							 ::peote::ui::PeoteUIDisplay _this1 = _this;
HXDLIN(1483)							_this1->isMouseDown = (_this1->isMouseDown - (1 << button));
            						}
HXDLIN(1483)						button = (button + 1);
            					}
HXDLIN(1483)					{
HXLINE(1483)						int _g4 = 0;
HXDLIN(1483)						int _g5 = _this->lastTouchOverIndex->length;
HXDLIN(1483)						while((_g4 < _g5)){
HXLINE(1483)							_g4 = (_g4 + 1);
HXDLIN(1483)							int i2 = (_g4 - 1);
HXDLIN(1483)							lastIndex = ( (int)(_hx_array_unsafe_get(_this->lastTouchOverIndex,i2)) );
HXDLIN(1483)							if ((lastIndex >= 0)) {
HXLINE(1483)								lastElem = _this->movePickBuffer->getElement(lastIndex)->uiElement;
HXDLIN(1483)								while(::hx::IsNotNull( lastElem )){
HXLINE(1483)									 ::Dynamic lastElem1 = lastElem->pointerOut;
HXDLIN(1483)									lastElem1( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("x",78,00,00,00),-1)
            										->setFixed(1,HX_("y",79,00,00,00),-1)
            										->setFixed(2,HX_("touch",bf,17,33,14), ::lime::ui::Touch_obj::__alloc( HX_CTX ,( (Float)(-1) ),( (Float)(-1) ),i2,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),0))
            										->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1483)									lastElem = lastElem->overOutEventsBubbleTo;
            								}
HXDLIN(1483)								_this->lastTouchOverIndex->__unsafe_set(i2,-1);
            							}
            						}
            					}
HXDLIN(1483)					{
HXLINE(1483)						int _g6 = 0;
HXDLIN(1483)						int _g7 = _this->lastTouchDownIndex->length;
HXDLIN(1483)						while((_g6 < _g7)){
HXLINE(1483)							_g6 = (_g6 + 1);
HXDLIN(1483)							int i3 = (_g6 - 1);
HXDLIN(1483)							lastIndex = ( (int)(_hx_array_unsafe_get(_this->lastTouchDownIndex,i3)) );
HXDLIN(1483)							if ((lastIndex >= 0)) {
HXLINE(1483)								lastElem = _this->clickPickBuffer->getElement(lastIndex)->uiElement;
HXDLIN(1483)								while(::hx::IsNotNull( lastElem )){
HXLINE(1483)									 ::Dynamic lastElem2 = lastElem->pointerUp;
HXDLIN(1483)									lastElem2( ::Dynamic(::hx::Anon_obj::Create(4)
            										->setFixed(0,HX_("x",78,00,00,00),-1)
            										->setFixed(1,HX_("y",79,00,00,00),-1)
            										->setFixed(2,HX_("touch",bf,17,33,14), ::lime::ui::Touch_obj::__alloc( HX_CTX ,( (Float)(-1) ),( (Float)(-1) ),i3,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),0))
            										->setFixed(3,HX_("type",ba,f2,08,4d),1)));
HXDLIN(1483)									lastElem = lastElem->upDownEventsBubbleTo;
            								}
HXDLIN(1483)								_this->lastTouchDownIndex->__unsafe_set(i3,-1);
            							}
            						}
            					}
HXDLIN(1483)					_this->lockTouchDown = 0;
HXDLIN(1483)					if (_this->isTouchOver) {
HXLINE(1483)						if (::hx::IsNotNull( _this->onPointerOut )) {
HXLINE(1483)							 ::Dynamic _this2 = _this->onPointerOut;
HXDLIN(1483)							_this2(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("x",78,00,00,00),-1)
            								->setFixed(1,HX_("y",79,00,00,00),-1)
            								->setFixed(2,HX_("touch",bf,17,33,14), ::lime::ui::Touch_obj::__alloc( HX_CTX ,( (Float)(-1) ),( (Float)(-1) ),0,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),0))
            								->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            						}
HXDLIN(1483)						_this->isTouchInside = false;
HXDLIN(1483)						_this->isTouchOver = false;
            					}
HXDLIN(1483)					int touchID = 0;
HXDLIN(1483)					while((_this->isTouchDown > 0)){
HXLINE(1483)						if (((_this->isTouchDown & (1 << touchID)) > 0)) {
HXLINE(1483)							if (::hx::IsNotNull( _this->onPointerUp )) {
HXLINE(1483)								 ::Dynamic _this3 = _this->onPointerUp;
HXDLIN(1483)								_this3(_this, ::Dynamic(::hx::Anon_obj::Create(4)
            									->setFixed(0,HX_("x",78,00,00,00),-1)
            									->setFixed(1,HX_("y",79,00,00,00),-1)
            									->setFixed(2,HX_("touch",bf,17,33,14), ::lime::ui::Touch_obj::__alloc( HX_CTX ,( (Float)(-1) ),( (Float)(-1) ),touchID,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),0))
            									->setFixed(3,HX_("type",ba,f2,08,4d),1)));
            							}
HXDLIN(1483)							 ::peote::ui::PeoteUIDisplay _this4 = _this;
HXDLIN(1483)							_this4->isTouchDown = (_this4->isTouchDown - (1 << touchID));
            						}
HXDLIN(1483)						touchID = (touchID + 1);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PeoteUIDisplay_obj,_windowLeave,(void))


::hx::ObjectPtr< PeoteUIDisplay_obj > PeoteUIDisplay_obj::__new(int x,int y,int width,int height,::hx::Null< int >  __o_color,::hx::Null< int >  __o_maxTouchpoints,::Array< ::Dynamic> availableStyles, ::Dynamic autoAddStyles) {
	::hx::ObjectPtr< PeoteUIDisplay_obj > __this = new PeoteUIDisplay_obj();
	__this->__construct(x,y,width,height,__o_color,__o_maxTouchpoints,availableStyles,autoAddStyles);
	return __this;
}

::hx::ObjectPtr< PeoteUIDisplay_obj > PeoteUIDisplay_obj::__alloc(::hx::Ctx *_hx_ctx,int x,int y,int width,int height,::hx::Null< int >  __o_color,::hx::Null< int >  __o_maxTouchpoints,::Array< ::Dynamic> availableStyles, ::Dynamic autoAddStyles) {
	PeoteUIDisplay_obj *__this = (PeoteUIDisplay_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PeoteUIDisplay_obj), true, "peote.ui.PeoteUIDisplay"));
	*(void **)__this = PeoteUIDisplay_obj::_hx_vtable;
	__this->__construct(x,y,width,height,__o_color,__o_maxTouchpoints,availableStyles,autoAddStyles);
	return __this;
}

PeoteUIDisplay_obj::PeoteUIDisplay_obj()
{
}

void PeoteUIDisplay_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PeoteUIDisplay);
	HX_MARK_MEMBER_NAME(number,"number");
	HX_MARK_MEMBER_NAME(overOutEventsBubble,"overOutEventsBubble");
	HX_MARK_MEMBER_NAME(moveEventsBubble,"moveEventsBubble");
	HX_MARK_MEMBER_NAME(upDownEventsBubble,"upDownEventsBubble");
	HX_MARK_MEMBER_NAME(uiElements,"uiElements");
	HX_MARK_MEMBER_NAME(movePickBuffer,"movePickBuffer");
	HX_MARK_MEMBER_NAME(movePickProgram,"movePickProgram");
	HX_MARK_MEMBER_NAME(clickPickBuffer,"clickPickBuffer");
	HX_MARK_MEMBER_NAME(clickPickProgram,"clickPickProgram");
	HX_MARK_MEMBER_NAME(draggingMouseElements,"draggingMouseElements");
	HX_MARK_MEMBER_NAME(draggingTouchElements,"draggingTouchElements");
	HX_MARK_MEMBER_NAME(maxTouchpoints,"maxTouchpoints");
	HX_MARK_MEMBER_NAME(usedStyleProgram,"usedStyleProgram");
	HX_MARK_MEMBER_NAME(usedStyleID,"usedStyleID");
	HX_MARK_MEMBER_NAME(stylePosBeforeFont,"stylePosBeforeFont");
	HX_MARK_MEMBER_NAME(autoAddStyles,"autoAddStyles");
	HX_MARK_MEMBER_NAME(mouseEnabled,"mouseEnabled");
	HX_MARK_MEMBER_NAME(touchEnabled,"touchEnabled");
	HX_MARK_MEMBER_NAME(lastTouchOverIndex,"lastTouchOverIndex");
	HX_MARK_MEMBER_NAME(lastTouchDownIndex,"lastTouchDownIndex");
	HX_MARK_MEMBER_NAME(lockTouchDown,"lockTouchDown");
	HX_MARK_MEMBER_NAME(lastMouseOverIndex,"lastMouseOverIndex");
	HX_MARK_MEMBER_NAME(lastMouseDownIndex,"lastMouseDownIndex");
	HX_MARK_MEMBER_NAME(lockMouseDown,"lockMouseDown");
	HX_MARK_MEMBER_NAME(onPointerOver,"onPointerOver");
	HX_MARK_MEMBER_NAME(onPointerOut,"onPointerOut");
	HX_MARK_MEMBER_NAME(onPointerDown,"onPointerDown");
	HX_MARK_MEMBER_NAME(onPointerUp,"onPointerUp");
	HX_MARK_MEMBER_NAME(onPointerClick,"onPointerClick");
	HX_MARK_MEMBER_NAME(onPointerMove,"onPointerMove");
	HX_MARK_MEMBER_NAME(isMouseInside,"isMouseInside");
	HX_MARK_MEMBER_NAME(isMouseOver,"isMouseOver");
	HX_MARK_MEMBER_NAME(lastMouseX,"lastMouseX");
	HX_MARK_MEMBER_NAME(lastMouseY,"lastMouseY");
	HX_MARK_MEMBER_NAME(isTriggerMouse,"isTriggerMouse");
	HX_MARK_MEMBER_NAME(isTouchInside,"isTouchInside");
	HX_MARK_MEMBER_NAME(isTouchOver,"isTouchOver");
	HX_MARK_MEMBER_NAME(isMouseDown,"isMouseDown");
	HX_MARK_MEMBER_NAME(isTouchDown,"isTouchDown");
	HX_MARK_MEMBER_NAME(inputFocusElement,"inputFocusElement");
	HX_MARK_MEMBER_NAME(dragMinX,"dragMinX");
	HX_MARK_MEMBER_NAME(dragMinY,"dragMinY");
	HX_MARK_MEMBER_NAME(dragMaxX,"dragMaxX");
	HX_MARK_MEMBER_NAME(dragMaxY,"dragMaxY");
	HX_MARK_MEMBER_NAME(dragOriginX,"dragOriginX");
	HX_MARK_MEMBER_NAME(dragOriginY,"dragOriginY");
	HX_MARK_MEMBER_NAME(activeIndex,"activeIndex");
	 ::peote::view::Display_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PeoteUIDisplay_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(number,"number");
	HX_VISIT_MEMBER_NAME(overOutEventsBubble,"overOutEventsBubble");
	HX_VISIT_MEMBER_NAME(moveEventsBubble,"moveEventsBubble");
	HX_VISIT_MEMBER_NAME(upDownEventsBubble,"upDownEventsBubble");
	HX_VISIT_MEMBER_NAME(uiElements,"uiElements");
	HX_VISIT_MEMBER_NAME(movePickBuffer,"movePickBuffer");
	HX_VISIT_MEMBER_NAME(movePickProgram,"movePickProgram");
	HX_VISIT_MEMBER_NAME(clickPickBuffer,"clickPickBuffer");
	HX_VISIT_MEMBER_NAME(clickPickProgram,"clickPickProgram");
	HX_VISIT_MEMBER_NAME(draggingMouseElements,"draggingMouseElements");
	HX_VISIT_MEMBER_NAME(draggingTouchElements,"draggingTouchElements");
	HX_VISIT_MEMBER_NAME(maxTouchpoints,"maxTouchpoints");
	HX_VISIT_MEMBER_NAME(usedStyleProgram,"usedStyleProgram");
	HX_VISIT_MEMBER_NAME(usedStyleID,"usedStyleID");
	HX_VISIT_MEMBER_NAME(stylePosBeforeFont,"stylePosBeforeFont");
	HX_VISIT_MEMBER_NAME(autoAddStyles,"autoAddStyles");
	HX_VISIT_MEMBER_NAME(mouseEnabled,"mouseEnabled");
	HX_VISIT_MEMBER_NAME(touchEnabled,"touchEnabled");
	HX_VISIT_MEMBER_NAME(lastTouchOverIndex,"lastTouchOverIndex");
	HX_VISIT_MEMBER_NAME(lastTouchDownIndex,"lastTouchDownIndex");
	HX_VISIT_MEMBER_NAME(lockTouchDown,"lockTouchDown");
	HX_VISIT_MEMBER_NAME(lastMouseOverIndex,"lastMouseOverIndex");
	HX_VISIT_MEMBER_NAME(lastMouseDownIndex,"lastMouseDownIndex");
	HX_VISIT_MEMBER_NAME(lockMouseDown,"lockMouseDown");
	HX_VISIT_MEMBER_NAME(onPointerOver,"onPointerOver");
	HX_VISIT_MEMBER_NAME(onPointerOut,"onPointerOut");
	HX_VISIT_MEMBER_NAME(onPointerDown,"onPointerDown");
	HX_VISIT_MEMBER_NAME(onPointerUp,"onPointerUp");
	HX_VISIT_MEMBER_NAME(onPointerClick,"onPointerClick");
	HX_VISIT_MEMBER_NAME(onPointerMove,"onPointerMove");
	HX_VISIT_MEMBER_NAME(isMouseInside,"isMouseInside");
	HX_VISIT_MEMBER_NAME(isMouseOver,"isMouseOver");
	HX_VISIT_MEMBER_NAME(lastMouseX,"lastMouseX");
	HX_VISIT_MEMBER_NAME(lastMouseY,"lastMouseY");
	HX_VISIT_MEMBER_NAME(isTriggerMouse,"isTriggerMouse");
	HX_VISIT_MEMBER_NAME(isTouchInside,"isTouchInside");
	HX_VISIT_MEMBER_NAME(isTouchOver,"isTouchOver");
	HX_VISIT_MEMBER_NAME(isMouseDown,"isMouseDown");
	HX_VISIT_MEMBER_NAME(isTouchDown,"isTouchDown");
	HX_VISIT_MEMBER_NAME(inputFocusElement,"inputFocusElement");
	HX_VISIT_MEMBER_NAME(dragMinX,"dragMinX");
	HX_VISIT_MEMBER_NAME(dragMinY,"dragMinY");
	HX_VISIT_MEMBER_NAME(dragMaxX,"dragMaxX");
	HX_VISIT_MEMBER_NAME(dragMaxY,"dragMaxY");
	HX_VISIT_MEMBER_NAME(dragOriginX,"dragOriginX");
	HX_VISIT_MEMBER_NAME(dragOriginY,"dragOriginY");
	HX_VISIT_MEMBER_NAME(activeIndex,"activeIndex");
	 ::peote::view::Display_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PeoteUIDisplay_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"number") ) { return ::hx::Val( number ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dragMinX") ) { return ::hx::Val( dragMinX ); }
		if (HX_FIELD_EQ(inName,"dragMinY") ) { return ::hx::Val( dragMinY ); }
		if (HX_FIELD_EQ(inName,"dragMaxX") ) { return ::hx::Val( dragMaxX ); }
		if (HX_FIELD_EQ(inName,"dragMaxY") ) { return ::hx::Val( dragMaxY ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uiElements") ) { return ::hx::Val( uiElements ); }
		if (HX_FIELD_EQ(inName,"lastMouseX") ) { return ::hx::Val( lastMouseX ); }
		if (HX_FIELD_EQ(inName,"lastMouseY") ) { return ::hx::Val( lastMouseY ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"usedStyleID") ) { return ::hx::Val( usedStyleID ); }
		if (HX_FIELD_EQ(inName,"onPointerUp") ) { return ::hx::Val( onPointerUp ); }
		if (HX_FIELD_EQ(inName,"isMouseOver") ) { return ::hx::Val( isMouseOver ); }
		if (HX_FIELD_EQ(inName,"isTouchOver") ) { return ::hx::Val( isTouchOver ); }
		if (HX_FIELD_EQ(inName,"isMouseDown") ) { return ::hx::Val( isMouseDown ); }
		if (HX_FIELD_EQ(inName,"isTouchDown") ) { return ::hx::Val( isTouchDown ); }
		if (HX_FIELD_EQ(inName,"dragOriginX") ) { return ::hx::Val( dragOriginX ); }
		if (HX_FIELD_EQ(inName,"dragOriginY") ) { return ::hx::Val( dragOriginY ); }
		if (HX_FIELD_EQ(inName,"activeIndex") ) { return ::hx::Val( activeIndex ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mouseEnabled") ) { return ::hx::Val( mouseEnabled ); }
		if (HX_FIELD_EQ(inName,"touchEnabled") ) { return ::hx::Val( touchEnabled ); }
		if (HX_FIELD_EQ(inName,"onPointerOut") ) { return ::hx::Val( onPointerOut ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"autoAddStyles") ) { return ::hx::Val( autoAddStyles ); }
		if (HX_FIELD_EQ(inName,"lockTouchDown") ) { return ::hx::Val( lockTouchDown ); }
		if (HX_FIELD_EQ(inName,"lockMouseDown") ) { return ::hx::Val( lockMouseDown ); }
		if (HX_FIELD_EQ(inName,"onPointerOver") ) { return ::hx::Val( onPointerOver ); }
		if (HX_FIELD_EQ(inName,"onPointerDown") ) { return ::hx::Val( onPointerDown ); }
		if (HX_FIELD_EQ(inName,"onPointerMove") ) { return ::hx::Val( onPointerMove ); }
		if (HX_FIELD_EQ(inName,"isMouseInside") ) { return ::hx::Val( isMouseInside ); }
		if (HX_FIELD_EQ(inName,"isTouchInside") ) { return ::hx::Val( isTouchInside ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"movePickBuffer") ) { return ::hx::Val( movePickBuffer ); }
		if (HX_FIELD_EQ(inName,"maxTouchpoints") ) { return ::hx::Val( maxTouchpoints ); }
		if (HX_FIELD_EQ(inName,"addToPeoteView") ) { return ::hx::Val( addToPeoteView_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPointerClick") ) { return ::hx::Val( onPointerClick ); }
		if (HX_FIELD_EQ(inName,"isTriggerMouse") ) { return ::hx::Val( isTriggerMouse ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"movePickProgram") ) { return ::hx::Val( movePickProgram ); }
		if (HX_FIELD_EQ(inName,"clickPickBuffer") ) { return ::hx::Val( clickPickBuffer ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"moveEventsBubble") ) { return ::hx::Val( moveEventsBubble ); }
		if (HX_FIELD_EQ(inName,"clickPickProgram") ) { return ::hx::Val( clickPickProgram ); }
		if (HX_FIELD_EQ(inName,"usedStyleProgram") ) { return ::hx::Val( usedStyleProgram ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"inputFocusElement") ) { return ::hx::Val( inputFocusElement ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"upDownEventsBubble") ) { return ::hx::Val( upDownEventsBubble ); }
		if (HX_FIELD_EQ(inName,"stylePosBeforeFont") ) { return ::hx::Val( stylePosBeforeFont ); }
		if (HX_FIELD_EQ(inName,"lastTouchOverIndex") ) { return ::hx::Val( lastTouchOverIndex ); }
		if (HX_FIELD_EQ(inName,"lastTouchDownIndex") ) { return ::hx::Val( lastTouchDownIndex ); }
		if (HX_FIELD_EQ(inName,"lastMouseOverIndex") ) { return ::hx::Val( lastMouseOverIndex ); }
		if (HX_FIELD_EQ(inName,"lastMouseDownIndex") ) { return ::hx::Val( lastMouseDownIndex ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"overOutEventsBubble") ) { return ::hx::Val( overOutEventsBubble ); }
		if (HX_FIELD_EQ(inName,"stopDraggingElement") ) { return ::hx::Val( stopDraggingElement_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"startDraggingElement") ) { return ::hx::Val( startDraggingElement_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"draggingMouseElements") ) { return ::hx::Val( draggingMouseElements ); }
		if (HX_FIELD_EQ(inName,"draggingTouchElements") ) { return ::hx::Val( draggingTouchElements ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PeoteUIDisplay_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_mouseMove") ) { outValue = _mouseMove_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keyUpActive") ) { outValue = keyUpActive_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isMouseMove") ) { outValue = ( isMouseMove ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_windowLeave") ) { outValue = _windowLeave_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getFreeNumber") ) { outValue = getFreeNumber_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseUpActive") ) { outValue = mouseUpActive_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keyDownActive") ) { outValue = keyDownActive_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"maxActiveIndex") ) { outValue = ( maxActiveIndex ); return true; }
		if (HX_FIELD_EQ(inName,"touchEndActive") ) { outValue = touchEndActive_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"registerEvents") ) { outValue = registerEvents_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lastMouseMoveX") ) { outValue = ( lastMouseMoveX ); return true; }
		if (HX_FIELD_EQ(inName,"lastMouseMoveY") ) { outValue = ( lastMouseMoveY ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"activeUIDisplay") ) { outValue = ( activeUIDisplay ); return true; }
		if (HX_FIELD_EQ(inName,"mouseDownActive") ) { outValue = mouseDownActive_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"touchMoveActive") ) { outValue = touchMoveActive_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"textInputActive") ) { outValue = textInputActive_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"AVAILABLE_NUMBER") ) { outValue = ( AVAILABLE_NUMBER ); return true; }
		if (HX_FIELD_EQ(inName,"mouseWheelActive") ) { outValue = mouseWheelActive_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"touchStartActive") ) { outValue = touchStartActive_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"touchCancelActive") ) { outValue = touchCancelActive_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"inputFocusUIDisplay") ) { outValue = ( inputFocusUIDisplay ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"intoSelectionTextLine") ) { outValue = ( intoSelectionTextLine ); return true; }
		if (HX_FIELD_EQ(inName,"draggingMouseDisplays") ) { outValue = ( draggingMouseDisplays ); return true; }
		if (HX_FIELD_EQ(inName,"draggingTouchDisplays") ) { outValue = ( draggingTouchDisplays ); return true; }
		if (HX_FIELD_EQ(inName,"_mouseMoveFrameSynced") ) { outValue = _mouseMoveFrameSynced_dyn(); return true; }
	}
	return false;
}

::hx::Val PeoteUIDisplay_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"number") ) { number=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dragMinX") ) { dragMinX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragMinY") ) { dragMinY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragMaxX") ) { dragMaxX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragMaxY") ) { dragMaxY=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uiElements") ) { uiElements=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMouseX") ) { lastMouseX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMouseY") ) { lastMouseY=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"usedStyleID") ) { usedStyleID=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPointerUp") ) { onPointerUp=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isMouseOver") ) { isMouseOver=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isTouchOver") ) { isTouchOver=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isMouseDown") ) { isMouseDown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isTouchDown") ) { isTouchDown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragOriginX") ) { dragOriginX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragOriginY") ) { dragOriginY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"activeIndex") ) { activeIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mouseEnabled") ) { mouseEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touchEnabled") ) { touchEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPointerOut") ) { onPointerOut=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"autoAddStyles") ) { autoAddStyles=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lockTouchDown") ) { lockTouchDown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lockMouseDown") ) { lockMouseDown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPointerOver") ) { onPointerOver=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPointerDown") ) { onPointerDown=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPointerMove") ) { onPointerMove=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isMouseInside") ) { isMouseInside=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isTouchInside") ) { isTouchInside=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"movePickBuffer") ) { movePickBuffer=inValue.Cast<  ::peote::view::Buffer_Pickable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxTouchpoints") ) { maxTouchpoints=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPointerClick") ) { onPointerClick=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isTriggerMouse") ) { isTriggerMouse=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"movePickProgram") ) { movePickProgram=inValue.Cast<  ::peote::view::Program >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clickPickBuffer") ) { clickPickBuffer=inValue.Cast<  ::peote::view::Buffer_Pickable >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"moveEventsBubble") ) { moveEventsBubble=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clickPickProgram") ) { clickPickProgram=inValue.Cast<  ::peote::view::Program >(); return inValue; }
		if (HX_FIELD_EQ(inName,"usedStyleProgram") ) { usedStyleProgram=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"inputFocusElement") ) { inputFocusElement=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"upDownEventsBubble") ) { upDownEventsBubble=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stylePosBeforeFont") ) { stylePosBeforeFont=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastTouchOverIndex") ) { lastTouchOverIndex=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastTouchDownIndex") ) { lastTouchDownIndex=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMouseOverIndex") ) { lastMouseOverIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMouseDownIndex") ) { lastMouseDownIndex=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"overOutEventsBubble") ) { overOutEventsBubble=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"draggingMouseElements") ) { draggingMouseElements=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"draggingTouchElements") ) { draggingTouchElements=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PeoteUIDisplay_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"isMouseMove") ) { isMouseMove=ioValue.Cast< bool >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"maxActiveIndex") ) { maxActiveIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"lastMouseMoveX") ) { lastMouseMoveX=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"lastMouseMoveY") ) { lastMouseMoveY=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"activeUIDisplay") ) { activeUIDisplay=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"AVAILABLE_NUMBER") ) { AVAILABLE_NUMBER=ioValue.Cast< int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"inputFocusUIDisplay") ) { inputFocusUIDisplay=ioValue.Cast<  ::peote::ui::PeoteUIDisplay >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"intoSelectionTextLine") ) { intoSelectionTextLine=ioValue.Cast< ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"draggingMouseDisplays") ) { draggingMouseDisplays=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"draggingTouchDisplays") ) { draggingTouchDisplays=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void PeoteUIDisplay_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("number",c9,86,7a,a1));
	outFields->push(HX_("overOutEventsBubble",3f,1a,32,d2));
	outFields->push(HX_("moveEventsBubble",36,80,2d,e5));
	outFields->push(HX_("upDownEventsBubble",82,b3,40,e7));
	outFields->push(HX_("uiElements",ab,cc,82,c4));
	outFields->push(HX_("movePickBuffer",32,3f,ad,69));
	outFields->push(HX_("movePickProgram",12,b4,52,50));
	outFields->push(HX_("clickPickBuffer",29,23,cd,c5));
	outFields->push(HX_("clickPickProgram",3b,48,1a,90));
	outFields->push(HX_("draggingMouseElements",2d,33,5a,65));
	outFields->push(HX_("draggingTouchElements",c7,5e,ca,c1));
	outFields->push(HX_("maxTouchpoints",de,0a,7a,2f));
	outFields->push(HX_("usedStyleProgram",30,0b,b4,ec));
	outFields->push(HX_("usedStyleID",8f,5a,15,a8));
	outFields->push(HX_("stylePosBeforeFont",b1,ac,d8,22));
	outFields->push(HX_("autoAddStyles",b4,35,49,af));
	outFields->push(HX_("mouseEnabled",dc,54,d6,5f));
	outFields->push(HX_("touchEnabled",82,1a,93,a8));
	outFields->push(HX_("lastTouchOverIndex",55,4a,f2,40));
	outFields->push(HX_("lastTouchDownIndex",87,90,46,f3));
	outFields->push(HX_("lockTouchDown",56,76,06,ce));
	outFields->push(HX_("lastMouseOverIndex",2f,4f,3c,bb));
	outFields->push(HX_("lastMouseDownIndex",61,95,90,6d));
	outFields->push(HX_("lockMouseDown",bc,9f,ee,b4));
	outFields->push(HX_("isMouseInside",37,c4,8c,9c));
	outFields->push(HX_("isMouseOver",cf,00,8e,d4));
	outFields->push(HX_("lastMouseX",89,2d,e9,96));
	outFields->push(HX_("lastMouseY",8a,2d,e9,96));
	outFields->push(HX_("isTriggerMouse",d7,24,9d,81));
	outFields->push(HX_("isTouchInside",51,f5,3a,0c));
	outFields->push(HX_("isTouchOver",69,d7,a5,ed));
	outFields->push(HX_("isMouseDown",dd,67,43,cd));
	outFields->push(HX_("isTouchDown",77,3e,5b,e6));
	outFields->push(HX_("inputFocusElement",ee,98,71,34));
	outFields->push(HX_("dragMinX",9a,b0,5c,26));
	outFields->push(HX_("dragMinY",9b,b0,5c,26));
	outFields->push(HX_("dragMaxX",48,a7,56,26));
	outFields->push(HX_("dragMaxY",49,a7,56,26));
	outFields->push(HX_("dragOriginX",1e,b2,16,0c));
	outFields->push(HX_("dragOriginY",1f,b2,16,0c));
	outFields->push(HX_("activeIndex",6c,9b,59,1a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PeoteUIDisplay_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,number),HX_("number",c9,86,7a,a1)},
	{::hx::fsBool,(int)offsetof(PeoteUIDisplay_obj,overOutEventsBubble),HX_("overOutEventsBubble",3f,1a,32,d2)},
	{::hx::fsBool,(int)offsetof(PeoteUIDisplay_obj,moveEventsBubble),HX_("moveEventsBubble",36,80,2d,e5)},
	{::hx::fsBool,(int)offsetof(PeoteUIDisplay_obj,upDownEventsBubble),HX_("upDownEventsBubble",82,b3,40,e7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PeoteUIDisplay_obj,uiElements),HX_("uiElements",ab,cc,82,c4)},
	{::hx::fsObject /*  ::peote::view::Buffer_Pickable */ ,(int)offsetof(PeoteUIDisplay_obj,movePickBuffer),HX_("movePickBuffer",32,3f,ad,69)},
	{::hx::fsObject /*  ::peote::view::Program */ ,(int)offsetof(PeoteUIDisplay_obj,movePickProgram),HX_("movePickProgram",12,b4,52,50)},
	{::hx::fsObject /*  ::peote::view::Buffer_Pickable */ ,(int)offsetof(PeoteUIDisplay_obj,clickPickBuffer),HX_("clickPickBuffer",29,23,cd,c5)},
	{::hx::fsObject /*  ::peote::view::Program */ ,(int)offsetof(PeoteUIDisplay_obj,clickPickProgram),HX_("clickPickProgram",3b,48,1a,90)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PeoteUIDisplay_obj,draggingMouseElements),HX_("draggingMouseElements",2d,33,5a,65)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PeoteUIDisplay_obj,draggingTouchElements),HX_("draggingTouchElements",c7,5e,ca,c1)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,maxTouchpoints),HX_("maxTouchpoints",de,0a,7a,2f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PeoteUIDisplay_obj,usedStyleProgram),HX_("usedStyleProgram",30,0b,b4,ec)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(PeoteUIDisplay_obj,usedStyleID),HX_("usedStyleID",8f,5a,15,a8)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,stylePosBeforeFont),HX_("stylePosBeforeFont",b1,ac,d8,22)},
	{::hx::fsBool,(int)offsetof(PeoteUIDisplay_obj,autoAddStyles),HX_("autoAddStyles",b4,35,49,af)},
	{::hx::fsBool,(int)offsetof(PeoteUIDisplay_obj,mouseEnabled),HX_("mouseEnabled",dc,54,d6,5f)},
	{::hx::fsBool,(int)offsetof(PeoteUIDisplay_obj,touchEnabled),HX_("touchEnabled",82,1a,93,a8)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(PeoteUIDisplay_obj,lastTouchOverIndex),HX_("lastTouchOverIndex",55,4a,f2,40)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(PeoteUIDisplay_obj,lastTouchDownIndex),HX_("lastTouchDownIndex",87,90,46,f3)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,lockTouchDown),HX_("lockTouchDown",56,76,06,ce)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,lastMouseOverIndex),HX_("lastMouseOverIndex",2f,4f,3c,bb)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(PeoteUIDisplay_obj,lastMouseDownIndex),HX_("lastMouseDownIndex",61,95,90,6d)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,lockMouseDown),HX_("lockMouseDown",bc,9f,ee,b4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PeoteUIDisplay_obj,onPointerOver),HX_("onPointerOver",d2,3d,39,4f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PeoteUIDisplay_obj,onPointerOut),HX_("onPointerOut",d0,8d,e3,97)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PeoteUIDisplay_obj,onPointerDown),HX_("onPointerDown",e0,a4,ee,47)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PeoteUIDisplay_obj,onPointerUp),HX_("onPointerUp",59,57,e4,4f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PeoteUIDisplay_obj,onPointerClick),HX_("onPointerClick",0a,be,74,13)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PeoteUIDisplay_obj,onPointerMove),HX_("onPointerMove",8f,8f,e1,4d)},
	{::hx::fsBool,(int)offsetof(PeoteUIDisplay_obj,isMouseInside),HX_("isMouseInside",37,c4,8c,9c)},
	{::hx::fsBool,(int)offsetof(PeoteUIDisplay_obj,isMouseOver),HX_("isMouseOver",cf,00,8e,d4)},
	{::hx::fsFloat,(int)offsetof(PeoteUIDisplay_obj,lastMouseX),HX_("lastMouseX",89,2d,e9,96)},
	{::hx::fsFloat,(int)offsetof(PeoteUIDisplay_obj,lastMouseY),HX_("lastMouseY",8a,2d,e9,96)},
	{::hx::fsBool,(int)offsetof(PeoteUIDisplay_obj,isTriggerMouse),HX_("isTriggerMouse",d7,24,9d,81)},
	{::hx::fsBool,(int)offsetof(PeoteUIDisplay_obj,isTouchInside),HX_("isTouchInside",51,f5,3a,0c)},
	{::hx::fsBool,(int)offsetof(PeoteUIDisplay_obj,isTouchOver),HX_("isTouchOver",69,d7,a5,ed)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,isMouseDown),HX_("isMouseDown",dd,67,43,cd)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,isTouchDown),HX_("isTouchDown",77,3e,5b,e6)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(PeoteUIDisplay_obj,inputFocusElement),HX_("inputFocusElement",ee,98,71,34)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,dragMinX),HX_("dragMinX",9a,b0,5c,26)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,dragMinY),HX_("dragMinY",9b,b0,5c,26)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,dragMaxX),HX_("dragMaxX",48,a7,56,26)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,dragMaxY),HX_("dragMaxY",49,a7,56,26)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,dragOriginX),HX_("dragOriginX",1e,b2,16,0c)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,dragOriginY),HX_("dragOriginY",1f,b2,16,0c)},
	{::hx::fsInt,(int)offsetof(PeoteUIDisplay_obj,activeIndex),HX_("activeIndex",6c,9b,59,1a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PeoteUIDisplay_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &PeoteUIDisplay_obj::AVAILABLE_NUMBER,HX_("AVAILABLE_NUMBER",df,f1,e0,8e)},
	{::hx::fsObject /*  ::peote::ui::PeoteUIDisplay */ ,(void *) &PeoteUIDisplay_obj::inputFocusUIDisplay,HX_("inputFocusUIDisplay",20,35,24,df)},
	{::hx::fsObject /* ::Dynamic */ ,(void *) &PeoteUIDisplay_obj::intoSelectionTextLine,HX_("intoSelectionTextLine",ed,92,31,1d)},
	{::hx::fsInt,(void *) &PeoteUIDisplay_obj::maxActiveIndex,HX_("maxActiveIndex",28,a3,03,22)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &PeoteUIDisplay_obj::activeUIDisplay,HX_("activeUIDisplay",c8,0f,28,75)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &PeoteUIDisplay_obj::draggingMouseDisplays,HX_("draggingMouseDisplays",e7,cc,30,07)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &PeoteUIDisplay_obj::draggingTouchDisplays,HX_("draggingTouchDisplays",81,f8,a0,63)},
	{::hx::fsBool,(void *) &PeoteUIDisplay_obj::isMouseMove,HX_("isMouseMove",8c,52,36,d3)},
	{::hx::fsFloat,(void *) &PeoteUIDisplay_obj::lastMouseMoveX,HX_("lastMouseMoveX",b8,55,b9,9d)},
	{::hx::fsFloat,(void *) &PeoteUIDisplay_obj::lastMouseMoveY,HX_("lastMouseMoveY",b9,55,b9,9d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PeoteUIDisplay_obj_sMemberFields[] = {
	HX_("number",c9,86,7a,a1),
	HX_("overOutEventsBubble",3f,1a,32,d2),
	HX_("moveEventsBubble",36,80,2d,e5),
	HX_("upDownEventsBubble",82,b3,40,e7),
	HX_("uiElements",ab,cc,82,c4),
	HX_("movePickBuffer",32,3f,ad,69),
	HX_("movePickProgram",12,b4,52,50),
	HX_("clickPickBuffer",29,23,cd,c5),
	HX_("clickPickProgram",3b,48,1a,90),
	HX_("draggingMouseElements",2d,33,5a,65),
	HX_("draggingTouchElements",c7,5e,ca,c1),
	HX_("maxTouchpoints",de,0a,7a,2f),
	HX_("usedStyleProgram",30,0b,b4,ec),
	HX_("usedStyleID",8f,5a,15,a8),
	HX_("stylePosBeforeFont",b1,ac,d8,22),
	HX_("autoAddStyles",b4,35,49,af),
	HX_("addToPeoteView",34,bf,16,a1),
	HX_("add",21,f2,49,00),
	HX_("remove",44,9c,88,04),
	HX_("update",09,86,05,87),
	HX_("startDraggingElement",6b,33,16,2c),
	HX_("stopDraggingElement",cb,cb,a1,df),
	HX_("mouseEnabled",dc,54,d6,5f),
	HX_("touchEnabled",82,1a,93,a8),
	HX_("lastTouchOverIndex",55,4a,f2,40),
	HX_("lastTouchDownIndex",87,90,46,f3),
	HX_("lockTouchDown",56,76,06,ce),
	HX_("lastMouseOverIndex",2f,4f,3c,bb),
	HX_("lastMouseDownIndex",61,95,90,6d),
	HX_("lockMouseDown",bc,9f,ee,b4),
	HX_("onPointerOver",d2,3d,39,4f),
	HX_("onPointerOut",d0,8d,e3,97),
	HX_("onPointerDown",e0,a4,ee,47),
	HX_("onPointerUp",59,57,e4,4f),
	HX_("onPointerClick",0a,be,74,13),
	HX_("onPointerMove",8f,8f,e1,4d),
	HX_("isMouseInside",37,c4,8c,9c),
	HX_("isMouseOver",cf,00,8e,d4),
	HX_("lastMouseX",89,2d,e9,96),
	HX_("lastMouseY",8a,2d,e9,96),
	HX_("isTriggerMouse",d7,24,9d,81),
	HX_("isTouchInside",51,f5,3a,0c),
	HX_("isTouchOver",69,d7,a5,ed),
	HX_("isMouseDown",dd,67,43,cd),
	HX_("isTouchDown",77,3e,5b,e6),
	HX_("inputFocusElement",ee,98,71,34),
	HX_("dragMinX",9a,b0,5c,26),
	HX_("dragMinY",9b,b0,5c,26),
	HX_("dragMaxX",48,a7,56,26),
	HX_("dragMaxY",49,a7,56,26),
	HX_("dragOriginX",1e,b2,16,0c),
	HX_("dragOriginY",1f,b2,16,0c),
	HX_("activeIndex",6c,9b,59,1a),
	::String(null()) };

static void PeoteUIDisplay_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PeoteUIDisplay_obj::AVAILABLE_NUMBER,"AVAILABLE_NUMBER");
	HX_MARK_MEMBER_NAME(PeoteUIDisplay_obj::inputFocusUIDisplay,"inputFocusUIDisplay");
	HX_MARK_MEMBER_NAME(PeoteUIDisplay_obj::intoSelectionTextLine,"intoSelectionTextLine");
	HX_MARK_MEMBER_NAME(PeoteUIDisplay_obj::maxActiveIndex,"maxActiveIndex");
	HX_MARK_MEMBER_NAME(PeoteUIDisplay_obj::activeUIDisplay,"activeUIDisplay");
	HX_MARK_MEMBER_NAME(PeoteUIDisplay_obj::draggingMouseDisplays,"draggingMouseDisplays");
	HX_MARK_MEMBER_NAME(PeoteUIDisplay_obj::draggingTouchDisplays,"draggingTouchDisplays");
	HX_MARK_MEMBER_NAME(PeoteUIDisplay_obj::isMouseMove,"isMouseMove");
	HX_MARK_MEMBER_NAME(PeoteUIDisplay_obj::lastMouseMoveX,"lastMouseMoveX");
	HX_MARK_MEMBER_NAME(PeoteUIDisplay_obj::lastMouseMoveY,"lastMouseMoveY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PeoteUIDisplay_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PeoteUIDisplay_obj::AVAILABLE_NUMBER,"AVAILABLE_NUMBER");
	HX_VISIT_MEMBER_NAME(PeoteUIDisplay_obj::inputFocusUIDisplay,"inputFocusUIDisplay");
	HX_VISIT_MEMBER_NAME(PeoteUIDisplay_obj::intoSelectionTextLine,"intoSelectionTextLine");
	HX_VISIT_MEMBER_NAME(PeoteUIDisplay_obj::maxActiveIndex,"maxActiveIndex");
	HX_VISIT_MEMBER_NAME(PeoteUIDisplay_obj::activeUIDisplay,"activeUIDisplay");
	HX_VISIT_MEMBER_NAME(PeoteUIDisplay_obj::draggingMouseDisplays,"draggingMouseDisplays");
	HX_VISIT_MEMBER_NAME(PeoteUIDisplay_obj::draggingTouchDisplays,"draggingTouchDisplays");
	HX_VISIT_MEMBER_NAME(PeoteUIDisplay_obj::isMouseMove,"isMouseMove");
	HX_VISIT_MEMBER_NAME(PeoteUIDisplay_obj::lastMouseMoveX,"lastMouseMoveX");
	HX_VISIT_MEMBER_NAME(PeoteUIDisplay_obj::lastMouseMoveY,"lastMouseMoveY");
};

#endif

::hx::Class PeoteUIDisplay_obj::__mClass;

static ::String PeoteUIDisplay_obj_sStaticFields[] = {
	HX_("AVAILABLE_NUMBER",df,f1,e0,8e),
	HX_("getFreeNumber",cb,bc,8c,b8),
	HX_("inputFocusUIDisplay",20,35,24,df),
	HX_("intoSelectionTextLine",ed,92,31,1d),
	HX_("maxActiveIndex",28,a3,03,22),
	HX_("activeUIDisplay",c8,0f,28,75),
	HX_("draggingMouseDisplays",e7,cc,30,07),
	HX_("draggingTouchDisplays",81,f8,a0,63),
	HX_("mouseDownActive",4d,3e,fd,63),
	HX_("mouseUpActive",c6,d1,4d,2f),
	HX_("mouseWheelActive",9c,ea,b6,31),
	HX_("touchMoveActive",56,9c,ad,f0),
	HX_("touchStartActive",49,4a,b8,f5),
	HX_("touchEndActive",42,e8,bc,6d),
	HX_("touchCancelActive",3f,81,22,0e),
	HX_("keyDownActive",47,8e,16,4b),
	HX_("keyUpActive",40,4f,71,e8),
	HX_("textInputActive",c3,7d,0b,bd),
	HX_("registerEvents",dc,d5,ab,5c),
	HX_("isMouseMove",8c,52,36,d3),
	HX_("lastMouseMoveX",b8,55,b9,9d),
	HX_("lastMouseMoveY",b9,55,b9,9d),
	HX_("_mouseMove",97,17,58,50),
	HX_("_mouseMoveFrameSynced",30,f5,6c,0b),
	HX_("_windowLeave",e8,78,2f,c9),
	::String(null())
};

void PeoteUIDisplay_obj::__register()
{
	PeoteUIDisplay_obj _hx_dummy;
	PeoteUIDisplay_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.ui.PeoteUIDisplay",ba,64,f7,96);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PeoteUIDisplay_obj::__GetStatic;
	__mClass->mSetStaticField = &PeoteUIDisplay_obj::__SetStatic;
	__mClass->mMarkFunc = PeoteUIDisplay_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PeoteUIDisplay_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PeoteUIDisplay_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PeoteUIDisplay_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PeoteUIDisplay_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PeoteUIDisplay_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PeoteUIDisplay_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PeoteUIDisplay_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_48_boot)
HXDLIN(  48)		AVAILABLE_NUMBER = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1119_boot)
HXDLIN(1119)		inputFocusUIDisplay = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1143_boot)
HXDLIN(1143)		intoSelectionTextLine = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1281_boot)
HXDLIN(1281)		maxActiveIndex = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1282_boot)
HXDLIN(1282)		activeUIDisplay = ::Array_obj< ::Dynamic>::__new(16);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1349_boot)
HXDLIN(1349)		draggingMouseDisplays = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1350_boot)
HXDLIN(1350)		draggingTouchDisplays = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1464_boot)
HXDLIN(1464)		isMouseMove = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1465_boot)
HXDLIN(1465)		lastMouseMoveX = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c7537b15687821b9_1466_boot)
HXDLIN(1466)		lastMouseMoveY = ((Float)0.0);
            	}
}

} // end namespace peote
} // end namespace ui
