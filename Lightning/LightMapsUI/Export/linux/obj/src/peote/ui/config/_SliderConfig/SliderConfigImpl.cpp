// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_peote_ui_config_Space
#include <peote/ui/config/Space.h>
#endif
#ifndef INCLUDED_peote_ui_config__SliderConfig_SliderConfigImpl
#include <peote/ui/config/_SliderConfig/SliderConfigImpl.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_Style
#include <peote/ui/style/interfaces/Style.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_StyleID
#include <peote/ui/style/interfaces/StyleID.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_265af645227753e6_7_new,"peote.ui.config._SliderConfig.SliderConfigImpl","new",0x24792d16,"peote.ui.config._SliderConfig.SliderConfigImpl.new","peote/ui/config/SliderConfig.hx",7,0x8e1a9845)
namespace peote{
namespace ui{
namespace config{
namespace _SliderConfig{

void SliderConfigImpl_obj::__construct(::Dynamic backgroundStyle,::Dynamic draggerStyle, ::Dynamic vertical, ::Dynamic reverse, ::peote::ui::config::Space draggerSpace, ::peote::ui::config::Space backgroundSpace, ::Dynamic draggerSize, ::Dynamic draggerSizePercent, ::Dynamic draggerOffset, ::Dynamic draggerOffsetPercent, ::Dynamic backgroundSize, ::Dynamic backgroundSizePercent, ::Dynamic backgroundOffset, ::Dynamic backgroundOffsetPercent, ::Dynamic draggerLength, ::Dynamic draggerLengthPercent, ::Dynamic backgroundLength, ::Dynamic backgroundLengthPercent, ::Dynamic draggSpace, ::Dynamic draggSpaceStart, ::Dynamic draggSpaceEnd){
            	HX_STACKFRAME(&_hx_pos_265af645227753e6_7_new)
HXLINE(  64)		this->draggSpaceEnd = null();
HXLINE(  63)		this->draggSpaceStart = null();
HXLINE(  62)		this->draggSpace = null();
HXLINE(  58)		this->backgroundLengthPercent = null();
HXLINE(  57)		this->backgroundLength = null();
HXLINE(  55)		this->draggerLengthPercent = null();
HXLINE(  54)		this->draggerLength = null();
HXLINE(  47)		this->backgroundOffsetPercent = null();
HXLINE(  46)		this->backgroundOffset = null();
HXLINE(  43)		this->backgroundSizePercent = null();
HXLINE(  42)		this->backgroundSize = null();
HXLINE(  39)		this->draggerOffsetPercent = null();
HXLINE(  38)		this->draggerOffset = null();
HXLINE(  35)		this->draggerSizePercent = null();
HXLINE(  34)		this->draggerSize = null();
HXLINE(  29)		this->backgroundSpace = null();
HXLINE(  28)		this->draggerSpace = null();
HXLINE(  26)		this->reverse = false;
HXLINE(  14)		this->vertical = null();
HXLINE(  10)		this->draggerStyle = null();
HXLINE(   9)		this->backgroundStyle = null();
HXLINE(   7)		if (::hx::IsNotNull( backgroundStyle )) {
HXDLIN(   7)			this->backgroundStyle = backgroundStyle;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( draggerStyle )) {
HXDLIN(   7)			this->draggerStyle = draggerStyle;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( vertical )) {
HXDLIN(   7)			this->vertical = vertical;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( reverse )) {
HXDLIN(   7)			this->reverse = ( (bool)(reverse) );
            		}
HXDLIN(   7)		if (::hx::IsNotNull( draggerSpace )) {
HXDLIN(   7)			this->draggerSpace = draggerSpace;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( backgroundSpace )) {
HXDLIN(   7)			this->backgroundSpace = backgroundSpace;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( draggerSize )) {
HXDLIN(   7)			this->draggerSize = draggerSize;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( draggerSizePercent )) {
HXDLIN(   7)			this->draggerSizePercent = draggerSizePercent;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( draggerOffset )) {
HXDLIN(   7)			this->draggerOffset = draggerOffset;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( draggerOffsetPercent )) {
HXDLIN(   7)			this->draggerOffsetPercent = draggerOffsetPercent;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( backgroundSize )) {
HXDLIN(   7)			this->backgroundSize = backgroundSize;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( backgroundSizePercent )) {
HXDLIN(   7)			this->backgroundSizePercent = backgroundSizePercent;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( backgroundOffset )) {
HXDLIN(   7)			this->backgroundOffset = backgroundOffset;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( backgroundOffsetPercent )) {
HXDLIN(   7)			this->backgroundOffsetPercent = backgroundOffsetPercent;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( draggerLength )) {
HXDLIN(   7)			this->draggerLength = draggerLength;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( draggerLengthPercent )) {
HXDLIN(   7)			this->draggerLengthPercent = draggerLengthPercent;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( backgroundLength )) {
HXDLIN(   7)			this->backgroundLength = backgroundLength;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( backgroundLengthPercent )) {
HXDLIN(   7)			this->backgroundLengthPercent = backgroundLengthPercent;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( draggSpace )) {
HXDLIN(   7)			this->draggSpace = draggSpace;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( draggSpaceStart )) {
HXDLIN(   7)			this->draggSpaceStart = draggSpaceStart;
            		}
HXDLIN(   7)		if (::hx::IsNotNull( draggSpaceEnd )) {
HXDLIN(   7)			this->draggSpaceEnd = draggSpaceEnd;
            		}
            	}

Dynamic SliderConfigImpl_obj::__CreateEmpty() { return new SliderConfigImpl_obj; }

void *SliderConfigImpl_obj::_hx_vtable = 0;

Dynamic SliderConfigImpl_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SliderConfigImpl_obj > _hx_result = new SliderConfigImpl_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15],inArgs[16],inArgs[17],inArgs[18],inArgs[19],inArgs[20]);
	return _hx_result;
}

bool SliderConfigImpl_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x12cf1764;
}


::hx::ObjectPtr< SliderConfigImpl_obj > SliderConfigImpl_obj::__new(::Dynamic backgroundStyle,::Dynamic draggerStyle, ::Dynamic vertical, ::Dynamic reverse, ::peote::ui::config::Space draggerSpace, ::peote::ui::config::Space backgroundSpace, ::Dynamic draggerSize, ::Dynamic draggerSizePercent, ::Dynamic draggerOffset, ::Dynamic draggerOffsetPercent, ::Dynamic backgroundSize, ::Dynamic backgroundSizePercent, ::Dynamic backgroundOffset, ::Dynamic backgroundOffsetPercent, ::Dynamic draggerLength, ::Dynamic draggerLengthPercent, ::Dynamic backgroundLength, ::Dynamic backgroundLengthPercent, ::Dynamic draggSpace, ::Dynamic draggSpaceStart, ::Dynamic draggSpaceEnd) {
	::hx::ObjectPtr< SliderConfigImpl_obj > __this = new SliderConfigImpl_obj();
	__this->__construct(backgroundStyle,draggerStyle,vertical,reverse,draggerSpace,backgroundSpace,draggerSize,draggerSizePercent,draggerOffset,draggerOffsetPercent,backgroundSize,backgroundSizePercent,backgroundOffset,backgroundOffsetPercent,draggerLength,draggerLengthPercent,backgroundLength,backgroundLengthPercent,draggSpace,draggSpaceStart,draggSpaceEnd);
	return __this;
}

::hx::ObjectPtr< SliderConfigImpl_obj > SliderConfigImpl_obj::__alloc(::hx::Ctx *_hx_ctx,::Dynamic backgroundStyle,::Dynamic draggerStyle, ::Dynamic vertical, ::Dynamic reverse, ::peote::ui::config::Space draggerSpace, ::peote::ui::config::Space backgroundSpace, ::Dynamic draggerSize, ::Dynamic draggerSizePercent, ::Dynamic draggerOffset, ::Dynamic draggerOffsetPercent, ::Dynamic backgroundSize, ::Dynamic backgroundSizePercent, ::Dynamic backgroundOffset, ::Dynamic backgroundOffsetPercent, ::Dynamic draggerLength, ::Dynamic draggerLengthPercent, ::Dynamic backgroundLength, ::Dynamic backgroundLengthPercent, ::Dynamic draggSpace, ::Dynamic draggSpaceStart, ::Dynamic draggSpaceEnd) {
	SliderConfigImpl_obj *__this = (SliderConfigImpl_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SliderConfigImpl_obj), true, "peote.ui.config._SliderConfig.SliderConfigImpl"));
	*(void **)__this = SliderConfigImpl_obj::_hx_vtable;
	__this->__construct(backgroundStyle,draggerStyle,vertical,reverse,draggerSpace,backgroundSpace,draggerSize,draggerSizePercent,draggerOffset,draggerOffsetPercent,backgroundSize,backgroundSizePercent,backgroundOffset,backgroundOffsetPercent,draggerLength,draggerLengthPercent,backgroundLength,backgroundLengthPercent,draggSpace,draggSpaceStart,draggSpaceEnd);
	return __this;
}

SliderConfigImpl_obj::SliderConfigImpl_obj()
{
}

void SliderConfigImpl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SliderConfigImpl);
	HX_MARK_MEMBER_NAME(backgroundStyle,"backgroundStyle");
	HX_MARK_MEMBER_NAME(draggerStyle,"draggerStyle");
	HX_MARK_MEMBER_NAME(vertical,"vertical");
	HX_MARK_MEMBER_NAME(reverse,"reverse");
	HX_MARK_MEMBER_NAME(draggerSpace,"draggerSpace");
	HX_MARK_MEMBER_NAME(backgroundSpace,"backgroundSpace");
	HX_MARK_MEMBER_NAME(draggerSize,"draggerSize");
	HX_MARK_MEMBER_NAME(draggerSizePercent,"draggerSizePercent");
	HX_MARK_MEMBER_NAME(draggerOffset,"draggerOffset");
	HX_MARK_MEMBER_NAME(draggerOffsetPercent,"draggerOffsetPercent");
	HX_MARK_MEMBER_NAME(backgroundSize,"backgroundSize");
	HX_MARK_MEMBER_NAME(backgroundSizePercent,"backgroundSizePercent");
	HX_MARK_MEMBER_NAME(backgroundOffset,"backgroundOffset");
	HX_MARK_MEMBER_NAME(backgroundOffsetPercent,"backgroundOffsetPercent");
	HX_MARK_MEMBER_NAME(draggerLength,"draggerLength");
	HX_MARK_MEMBER_NAME(draggerLengthPercent,"draggerLengthPercent");
	HX_MARK_MEMBER_NAME(backgroundLength,"backgroundLength");
	HX_MARK_MEMBER_NAME(backgroundLengthPercent,"backgroundLengthPercent");
	HX_MARK_MEMBER_NAME(draggSpace,"draggSpace");
	HX_MARK_MEMBER_NAME(draggSpaceStart,"draggSpaceStart");
	HX_MARK_MEMBER_NAME(draggSpaceEnd,"draggSpaceEnd");
	HX_MARK_END_CLASS();
}

void SliderConfigImpl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(backgroundStyle,"backgroundStyle");
	HX_VISIT_MEMBER_NAME(draggerStyle,"draggerStyle");
	HX_VISIT_MEMBER_NAME(vertical,"vertical");
	HX_VISIT_MEMBER_NAME(reverse,"reverse");
	HX_VISIT_MEMBER_NAME(draggerSpace,"draggerSpace");
	HX_VISIT_MEMBER_NAME(backgroundSpace,"backgroundSpace");
	HX_VISIT_MEMBER_NAME(draggerSize,"draggerSize");
	HX_VISIT_MEMBER_NAME(draggerSizePercent,"draggerSizePercent");
	HX_VISIT_MEMBER_NAME(draggerOffset,"draggerOffset");
	HX_VISIT_MEMBER_NAME(draggerOffsetPercent,"draggerOffsetPercent");
	HX_VISIT_MEMBER_NAME(backgroundSize,"backgroundSize");
	HX_VISIT_MEMBER_NAME(backgroundSizePercent,"backgroundSizePercent");
	HX_VISIT_MEMBER_NAME(backgroundOffset,"backgroundOffset");
	HX_VISIT_MEMBER_NAME(backgroundOffsetPercent,"backgroundOffsetPercent");
	HX_VISIT_MEMBER_NAME(draggerLength,"draggerLength");
	HX_VISIT_MEMBER_NAME(draggerLengthPercent,"draggerLengthPercent");
	HX_VISIT_MEMBER_NAME(backgroundLength,"backgroundLength");
	HX_VISIT_MEMBER_NAME(backgroundLengthPercent,"backgroundLengthPercent");
	HX_VISIT_MEMBER_NAME(draggSpace,"draggSpace");
	HX_VISIT_MEMBER_NAME(draggSpaceStart,"draggSpaceStart");
	HX_VISIT_MEMBER_NAME(draggSpaceEnd,"draggSpaceEnd");
}

::hx::Val SliderConfigImpl_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"reverse") ) { return ::hx::Val( reverse ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertical") ) { return ::hx::Val( vertical ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"draggSpace") ) { return ::hx::Val( draggSpace ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"draggerSize") ) { return ::hx::Val( draggerSize ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"draggerStyle") ) { return ::hx::Val( draggerStyle ); }
		if (HX_FIELD_EQ(inName,"draggerSpace") ) { return ::hx::Val( draggerSpace ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"draggerOffset") ) { return ::hx::Val( draggerOffset ); }
		if (HX_FIELD_EQ(inName,"draggerLength") ) { return ::hx::Val( draggerLength ); }
		if (HX_FIELD_EQ(inName,"draggSpaceEnd") ) { return ::hx::Val( draggSpaceEnd ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSize") ) { return ::hx::Val( backgroundSize ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundStyle") ) { return ::hx::Val( backgroundStyle ); }
		if (HX_FIELD_EQ(inName,"backgroundSpace") ) { return ::hx::Val( backgroundSpace ); }
		if (HX_FIELD_EQ(inName,"draggSpaceStart") ) { return ::hx::Val( draggSpaceStart ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backgroundOffset") ) { return ::hx::Val( backgroundOffset ); }
		if (HX_FIELD_EQ(inName,"backgroundLength") ) { return ::hx::Val( backgroundLength ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"draggerSizePercent") ) { return ::hx::Val( draggerSizePercent ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"draggerOffsetPercent") ) { return ::hx::Val( draggerOffsetPercent ); }
		if (HX_FIELD_EQ(inName,"draggerLengthPercent") ) { return ::hx::Val( draggerLengthPercent ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"backgroundSizePercent") ) { return ::hx::Val( backgroundSizePercent ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"backgroundOffsetPercent") ) { return ::hx::Val( backgroundOffsetPercent ); }
		if (HX_FIELD_EQ(inName,"backgroundLengthPercent") ) { return ::hx::Val( backgroundLengthPercent ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SliderConfigImpl_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"reverse") ) { reverse=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertical") ) { vertical=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"draggSpace") ) { draggSpace=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"draggerSize") ) { draggerSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"draggerStyle") ) { draggerStyle=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"draggerSpace") ) { draggerSpace=inValue.Cast<  ::peote::ui::config::Space >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"draggerOffset") ) { draggerOffset=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"draggerLength") ) { draggerLength=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"draggSpaceEnd") ) { draggSpaceEnd=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSize") ) { backgroundSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundStyle") ) { backgroundStyle=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundSpace") ) { backgroundSpace=inValue.Cast<  ::peote::ui::config::Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"draggSpaceStart") ) { draggSpaceStart=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backgroundOffset") ) { backgroundOffset=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundLength") ) { backgroundLength=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"draggerSizePercent") ) { draggerSizePercent=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"draggerOffsetPercent") ) { draggerOffsetPercent=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"draggerLengthPercent") ) { draggerLengthPercent=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"backgroundSizePercent") ) { backgroundSizePercent=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"backgroundOffsetPercent") ) { backgroundOffsetPercent=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundLengthPercent") ) { backgroundLengthPercent=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SliderConfigImpl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("backgroundStyle",63,82,08,47));
	outFields->push(HX_("draggerStyle",f1,3b,69,e4));
	outFields->push(HX_("vertical",76,bc,15,6a));
	outFields->push(HX_("reverse",22,39,fc,1a));
	outFields->push(HX_("draggerSpace",86,23,b2,e1));
	outFields->push(HX_("backgroundSpace",f8,69,51,44));
	outFields->push(HX_("draggerSize",01,22,d9,e0));
	outFields->push(HX_("draggerSizePercent",c4,62,cd,0e));
	outFields->push(HX_("draggerOffset",d3,e8,17,42));
	outFields->push(HX_("draggerOffsetPercent",32,fa,f4,60));
	outFields->push(HX_("backgroundSize",cf,ef,6d,20));
	outFields->push(HX_("backgroundSizePercent",b6,0a,b4,15));
	outFields->push(HX_("backgroundOffset",21,46,d6,2a));
	outFields->push(HX_("backgroundOffsetPercent",a4,02,cb,ec));
	outFields->push(HX_("draggerLength",26,e6,df,80));
	outFields->push(HX_("draggerLengthPercent",3f,9d,31,ff));
	outFields->push(HX_("backgroundLength",74,43,9e,69));
	outFields->push(HX_("backgroundLengthPercent",b1,a5,07,8b));
	outFields->push(HX_("draggSpace",d3,c1,2d,b7));
	outFields->push(HX_("draggSpaceStart",8f,a5,dc,7a));
	outFields->push(HX_("draggSpaceEnd",c8,9f,cd,60));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SliderConfigImpl_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,backgroundStyle),HX_("backgroundStyle",63,82,08,47)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,draggerStyle),HX_("draggerStyle",f1,3b,69,e4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,vertical),HX_("vertical",76,bc,15,6a)},
	{::hx::fsBool,(int)offsetof(SliderConfigImpl_obj,reverse),HX_("reverse",22,39,fc,1a)},
	{::hx::fsObject /*  ::peote::ui::config::Space */ ,(int)offsetof(SliderConfigImpl_obj,draggerSpace),HX_("draggerSpace",86,23,b2,e1)},
	{::hx::fsObject /*  ::peote::ui::config::Space */ ,(int)offsetof(SliderConfigImpl_obj,backgroundSpace),HX_("backgroundSpace",f8,69,51,44)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,draggerSize),HX_("draggerSize",01,22,d9,e0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,draggerSizePercent),HX_("draggerSizePercent",c4,62,cd,0e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,draggerOffset),HX_("draggerOffset",d3,e8,17,42)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,draggerOffsetPercent),HX_("draggerOffsetPercent",32,fa,f4,60)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,backgroundSize),HX_("backgroundSize",cf,ef,6d,20)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,backgroundSizePercent),HX_("backgroundSizePercent",b6,0a,b4,15)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,backgroundOffset),HX_("backgroundOffset",21,46,d6,2a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,backgroundOffsetPercent),HX_("backgroundOffsetPercent",a4,02,cb,ec)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,draggerLength),HX_("draggerLength",26,e6,df,80)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,draggerLengthPercent),HX_("draggerLengthPercent",3f,9d,31,ff)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,backgroundLength),HX_("backgroundLength",74,43,9e,69)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,backgroundLengthPercent),HX_("backgroundLengthPercent",b1,a5,07,8b)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,draggSpace),HX_("draggSpace",d3,c1,2d,b7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,draggSpaceStart),HX_("draggSpaceStart",8f,a5,dc,7a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SliderConfigImpl_obj,draggSpaceEnd),HX_("draggSpaceEnd",c8,9f,cd,60)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SliderConfigImpl_obj_sStaticStorageInfo = 0;
#endif

static ::String SliderConfigImpl_obj_sMemberFields[] = {
	HX_("backgroundStyle",63,82,08,47),
	HX_("draggerStyle",f1,3b,69,e4),
	HX_("vertical",76,bc,15,6a),
	HX_("reverse",22,39,fc,1a),
	HX_("draggerSpace",86,23,b2,e1),
	HX_("backgroundSpace",f8,69,51,44),
	HX_("draggerSize",01,22,d9,e0),
	HX_("draggerSizePercent",c4,62,cd,0e),
	HX_("draggerOffset",d3,e8,17,42),
	HX_("draggerOffsetPercent",32,fa,f4,60),
	HX_("backgroundSize",cf,ef,6d,20),
	HX_("backgroundSizePercent",b6,0a,b4,15),
	HX_("backgroundOffset",21,46,d6,2a),
	HX_("backgroundOffsetPercent",a4,02,cb,ec),
	HX_("draggerLength",26,e6,df,80),
	HX_("draggerLengthPercent",3f,9d,31,ff),
	HX_("backgroundLength",74,43,9e,69),
	HX_("backgroundLengthPercent",b1,a5,07,8b),
	HX_("draggSpace",d3,c1,2d,b7),
	HX_("draggSpaceStart",8f,a5,dc,7a),
	HX_("draggSpaceEnd",c8,9f,cd,60),
	::String(null()) };

::hx::Class SliderConfigImpl_obj::__mClass;

void SliderConfigImpl_obj::__register()
{
	SliderConfigImpl_obj _hx_dummy;
	SliderConfigImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.ui.config._SliderConfig.SliderConfigImpl",24,aa,33,17);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SliderConfigImpl_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SliderConfigImpl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SliderConfigImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SliderConfigImpl_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace peote
} // end namespace ui
} // end namespace config
} // end namespace _SliderConfig
