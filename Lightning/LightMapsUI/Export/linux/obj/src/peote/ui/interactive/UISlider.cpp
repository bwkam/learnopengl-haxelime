// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_peote_ui_PeoteUIDisplay
#include <peote/ui/PeoteUIDisplay.h>
#endif
#ifndef INCLUDED_peote_ui_config_Space
#include <peote/ui/config/Space.h>
#endif
#ifndef INCLUDED_peote_ui_config__ElementConfig_ElementConfigImpl
#include <peote/ui/config/_ElementConfig/ElementConfigImpl.h>
#endif
#ifndef INCLUDED_peote_ui_config__SliderConfig_SliderConfigImpl
#include <peote/ui/config/_SliderConfig/SliderConfigImpl.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_Interactive
#include <peote/ui/interactive/Interactive.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_UIElement
#include <peote/ui/interactive/UIElement.h>
#endif
#ifndef INCLUDED_peote_ui_interactive_UISlider
#include <peote/ui/interactive/UISlider.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_Style
#include <peote/ui/style/interfaces/Style.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_StyleElement
#include <peote/ui/style/interfaces/StyleElement.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_StyleID
#include <peote/ui/style/interfaces/StyleID.h>
#endif
#ifndef INCLUDED_peote_ui_style_interfaces_StyleProgram
#include <peote/ui/style/interfaces/StyleProgram.h>
#endif
#ifndef INCLUDED_peote_view_Display
#include <peote/view/Display.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f110b15ea9daebc7_19_new,"peote.ui.interactive.UISlider","new",0x1dbedc4a,"peote.ui.interactive.UISlider.new","peote/ui/interactive/UISlider.hx",19,0xc171c565)
HX_DEFINE_STACK_FRAME(_hx_pos_f110b15ea9daebc7_190_new,"peote.ui.interactive.UISlider","new",0x1dbedc4a,"peote.ui.interactive.UISlider.new","peote/ui/interactive/UISlider.hx",190,0xc171c565)
HX_DEFINE_STACK_FRAME(_hx_pos_f110b15ea9daebc7_191_new,"peote.ui.interactive.UISlider","new",0x1dbedc4a,"peote.ui.interactive.UISlider.new","peote/ui/interactive/UISlider.hx",191,0xc171c565)
HX_DEFINE_STACK_FRAME(_hx_pos_f110b15ea9daebc7_194_new,"peote.ui.interactive.UISlider","new",0x1dbedc4a,"peote.ui.interactive.UISlider.new","peote/ui/interactive/UISlider.hx",194,0xc171c565)
HX_DEFINE_STACK_FRAME(_hx_pos_f110b15ea9daebc7_203_new,"peote.ui.interactive.UISlider","new",0x1dbedc4a,"peote.ui.interactive.UISlider.new","peote/ui/interactive/UISlider.hx",203,0xc171c565)
HX_DEFINE_STACK_FRAME(_hx_pos_f110b15ea9daebc7_210_new,"peote.ui.interactive.UISlider","new",0x1dbedc4a,"peote.ui.interactive.UISlider.new","peote/ui/interactive/UISlider.hx",210,0xc171c565)
HX_LOCAL_STACK_FRAME(_hx_pos_f110b15ea9daebc7_233_onChangeZIndex,"peote.ui.interactive.UISlider","onChangeZIndex",0x510e31dd,"peote.ui.interactive.UISlider.onChangeZIndex","peote/ui/interactive/UISlider.hx",233,0xc171c565)
HX_LOCAL_STACK_FRAME(_hx_pos_f110b15ea9daebc7_245_updateVisibleLayout,"peote.ui.interactive.UISlider","updateVisibleLayout",0x5b8074dd,"peote.ui.interactive.UISlider.updateVisibleLayout","peote/ui/interactive/UISlider.hx",245,0xc171c565)
HX_LOCAL_STACK_FRAME(_hx_pos_f110b15ea9daebc7_268_updateVisible,"peote.ui.interactive.UISlider","updateVisible",0xf9a7b1d3,"peote.ui.interactive.UISlider.updateVisible","peote/ui/interactive/UISlider.hx",268,0xc171c565)
HX_LOCAL_STACK_FRAME(_hx_pos_f110b15ea9daebc7_274_onAddVisibleToDisplay,"peote.ui.interactive.UISlider","onAddVisibleToDisplay",0x318a0001,"peote.ui.interactive.UISlider.onAddVisibleToDisplay","peote/ui/interactive/UISlider.hx",274,0xc171c565)
HX_LOCAL_STACK_FRAME(_hx_pos_f110b15ea9daebc7_283_onRemoveVisibleFromDisplay,"peote.ui.interactive.UISlider","onRemoveVisibleFromDisplay",0x3670539f,"peote.ui.interactive.UISlider.onRemoveVisibleFromDisplay","peote/ui/interactive/UISlider.hx",283,0xc171c565)
namespace peote{
namespace ui{
namespace interactive{

void UISlider_obj::__construct(int xPosition,int yPosition,int width,int height,::hx::Null< int >  __o_zIndex, ::peote::ui::config::_SliderConfig::SliderConfigImpl config){
            		int zIndex = __o_zIndex.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_f110b15ea9daebc7_19_new)
HXLINE( 297)		this->onChange = null();
HXLINE( 295)		this->onDraggerPointerUp = null();
HXLINE( 294)		this->onDraggerPointerDown = null();
HXLINE( 293)		this->onDraggerPointerOut = null();
HXLINE( 292)		this->onDraggerPointerOver = null();
HXLINE( 289)		this->_onChange = null();
HXLINE( 154)		this->draggSpaceEnd = 0;
HXLINE( 153)		this->draggSpaceStart = 0;
HXLINE( 133)		this->draggerLengthPercent = null();
HXLINE( 131)		this->draggerLength = null();
HXLINE( 129)		this->reverse = false;
HXLINE( 128)		this->isVertical = false;
HXLINE( 118)		this->background = null();
HXLINE( 117)		this->dragger = null();
HXLINE(  35)		this->valueEnd = ((Float)1.0);
HXLINE(  34)		this->valueStart = ((Float)0.0);
HXLINE(  24)		this->_percent = ((Float)0.0);
HXLINE( 157)		 ::peote::ui::interactive::UISlider _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 158)		super::__construct(xPosition,yPosition,width,height,zIndex);
HXLINE( 160)		if (::hx::IsNotNull( config )) {
HXLINE( 162)			bool _hx_tmp;
HXDLIN( 162)			if (::hx::IsNull( config->vertical )) {
HXLINE( 162)				_hx_tmp = (width < height);
            			}
            			else {
HXLINE( 162)				_hx_tmp = ( (bool)(config->vertical) );
            			}
HXDLIN( 162)			this->isVertical = _hx_tmp;
HXLINE( 163)			this->reverse = config->reverse;
HXLINE( 165)			if (::hx::IsNotNull( config->backgroundStyle )) {
HXLINE( 166)				 ::peote::ui::config::Space backgroundSpace;
HXDLIN( 166)				if (::hx::IsNotNull( config->backgroundSpace )) {
HXLINE( 166)					 ::peote::ui::config::Space _this = config->backgroundSpace;
HXDLIN( 166)					backgroundSpace =  ::peote::ui::config::Space_obj::__alloc( HX_CTX ,_this->left,_this->top,_this->right,_this->bottom);
            				}
            				else {
HXLINE( 166)					backgroundSpace =  ::peote::ui::config::Space_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXLINE( 167)				{
HXLINE( 167)					 ::Dynamic size = config->backgroundSize;
HXDLIN( 167)					 ::Dynamic sizePercent = config->backgroundSizePercent;
HXDLIN( 167)					 ::Dynamic offset = config->backgroundOffset;
HXDLIN( 167)					 ::Dynamic offsetPercent = config->backgroundOffsetPercent;
HXDLIN( 167)					if (this->isVertical) {
HXLINE( 167)						bool _hx_tmp1;
HXDLIN( 167)						if (::hx::IsNull( size )) {
HXLINE( 167)							_hx_tmp1 = ::hx::IsNotNull( sizePercent );
            						}
            						else {
HXLINE( 167)							_hx_tmp1 = true;
            						}
HXDLIN( 167)						if (_hx_tmp1) {
HXLINE( 167)							if (::hx::IsNotNull( sizePercent )) {
HXLINE( 167)								Float innerWidth;
HXDLIN( 167)								if (::hx::IsNull( size )) {
HXLINE( 167)									innerWidth = (( (Float)(width) ) * ( (Float)(sizePercent) ));
            								}
            								else {
HXLINE( 167)									innerWidth = ::Math_obj::max(( (Float)(size) ),(( (Float)(width) ) * ( (Float)(sizePercent) )));
            								}
HXDLIN( 167)								int innerWidth1 = ::Std_obj::_hx_int(innerWidth);
HXDLIN( 167)								if (::hx::IsNotNull( offsetPercent )) {
HXLINE( 167)									 ::Dynamic _hx_tmp2;
HXDLIN( 167)									if (::hx::IsNotNull( offset )) {
HXLINE( 167)										_hx_tmp2 = offset;
            									}
            									else {
HXLINE( 167)										_hx_tmp2 = 0;
            									}
HXDLIN( 167)									backgroundSpace->left = ::Std_obj::_hx_int(((( (Float)((width - innerWidth1)) ) * ( (Float)(offsetPercent) )) + _hx_tmp2));
            								}
            								else {
HXLINE( 167)									int _hx_tmp3;
HXDLIN( 167)									if (::hx::IsNull( offset )) {
HXLINE( 167)										_hx_tmp3 = ::Std_obj::_hx_int((( (Float)((width - innerWidth1)) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 167)										_hx_tmp3 = ( (int)(offset) );
            									}
HXDLIN( 167)									backgroundSpace->left = _hx_tmp3;
            								}
HXDLIN( 167)								backgroundSpace->right = ((width - backgroundSpace->left) - innerWidth1);
            							}
            							else {
HXLINE( 167)								if (::hx::IsNotNull( offsetPercent )) {
HXLINE( 167)									 ::Dynamic _hx_tmp4;
HXDLIN( 167)									if (::hx::IsNotNull( offset )) {
HXLINE( 167)										_hx_tmp4 = offset;
            									}
            									else {
HXLINE( 167)										_hx_tmp4 = 0;
            									}
HXDLIN( 167)									backgroundSpace->left = ::Std_obj::_hx_int(((( (Float)((width - ( (int)(size) ))) ) * ( (Float)(offsetPercent) )) + _hx_tmp4));
            								}
            								else {
HXLINE( 167)									int _hx_tmp5;
HXDLIN( 167)									if (::hx::IsNull( offset )) {
HXLINE( 167)										_hx_tmp5 = ::Std_obj::_hx_int((( (Float)((width - ( (int)(size) ))) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 167)										_hx_tmp5 = ( (int)(offset) );
            									}
HXDLIN( 167)									backgroundSpace->left = _hx_tmp5;
            								}
HXDLIN( 167)								backgroundSpace->right = ((width - backgroundSpace->left) - ( (int)(size) ));
            							}
            						}
            					}
            					else {
HXLINE( 167)						bool _hx_tmp6;
HXDLIN( 167)						if (::hx::IsNull( size )) {
HXLINE( 167)							_hx_tmp6 = ::hx::IsNotNull( sizePercent );
            						}
            						else {
HXLINE( 167)							_hx_tmp6 = true;
            						}
HXDLIN( 167)						if (_hx_tmp6) {
HXLINE( 167)							if (::hx::IsNotNull( sizePercent )) {
HXLINE( 167)								Float innerHeight;
HXDLIN( 167)								if (::hx::IsNull( size )) {
HXLINE( 167)									innerHeight = (( (Float)(height) ) * ( (Float)(sizePercent) ));
            								}
            								else {
HXLINE( 167)									innerHeight = ::Math_obj::max(( (Float)(size) ),(( (Float)(height) ) * ( (Float)(sizePercent) )));
            								}
HXDLIN( 167)								int innerHeight1 = ::Std_obj::_hx_int(innerHeight);
HXDLIN( 167)								if (::hx::IsNotNull( offsetPercent )) {
HXLINE( 167)									 ::Dynamic _hx_tmp7;
HXDLIN( 167)									if (::hx::IsNotNull( offset )) {
HXLINE( 167)										_hx_tmp7 = offset;
            									}
            									else {
HXLINE( 167)										_hx_tmp7 = 0;
            									}
HXDLIN( 167)									backgroundSpace->top = ::Std_obj::_hx_int(((( (Float)((height - innerHeight1)) ) * ( (Float)(offsetPercent) )) + _hx_tmp7));
            								}
            								else {
HXLINE( 167)									int _hx_tmp8;
HXDLIN( 167)									if (::hx::IsNull( offset )) {
HXLINE( 167)										_hx_tmp8 = ::Std_obj::_hx_int((( (Float)((height - innerHeight1)) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 167)										_hx_tmp8 = ( (int)(offset) );
            									}
HXDLIN( 167)									backgroundSpace->top = _hx_tmp8;
            								}
HXDLIN( 167)								backgroundSpace->bottom = ((height - backgroundSpace->top) - innerHeight1);
            							}
            							else {
HXLINE( 167)								if (::hx::IsNotNull( offsetPercent )) {
HXLINE( 167)									 ::Dynamic _hx_tmp9;
HXDLIN( 167)									if (::hx::IsNotNull( offset )) {
HXLINE( 167)										_hx_tmp9 = offset;
            									}
            									else {
HXLINE( 167)										_hx_tmp9 = 0;
            									}
HXDLIN( 167)									backgroundSpace->top = ::Std_obj::_hx_int(((( (Float)((height - ( (int)(size) ))) ) * ( (Float)(offsetPercent) )) + _hx_tmp9));
            								}
            								else {
HXLINE( 167)									int _hx_tmp10;
HXDLIN( 167)									if (::hx::IsNull( offset )) {
HXLINE( 167)										_hx_tmp10 = ::Std_obj::_hx_int((( (Float)((height - ( (int)(size) ))) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 167)										_hx_tmp10 = ( (int)(offset) );
            									}
HXDLIN( 167)									backgroundSpace->top = _hx_tmp10;
            								}
HXDLIN( 167)								backgroundSpace->bottom = ((height - backgroundSpace->top) - ( (int)(size) ));
            							}
            						}
            					}
            				}
HXLINE( 168)				{
HXLINE( 168)					 ::Dynamic size1 = config->backgroundLength;
HXDLIN( 168)					 ::Dynamic sizePercent1 = config->backgroundLengthPercent;
HXDLIN( 168)					 ::Dynamic offset1 = null();
HXDLIN( 168)					 ::Dynamic offsetPercent1 = null();
HXDLIN( 168)					if (!(this->isVertical)) {
HXLINE( 168)						bool _hx_tmp11;
HXDLIN( 168)						if (::hx::IsNull( size1 )) {
HXLINE( 168)							_hx_tmp11 = ::hx::IsNotNull( sizePercent1 );
            						}
            						else {
HXLINE( 168)							_hx_tmp11 = true;
            						}
HXDLIN( 168)						if (_hx_tmp11) {
HXLINE( 168)							if (::hx::IsNotNull( sizePercent1 )) {
HXLINE( 168)								Float innerWidth2;
HXDLIN( 168)								if (::hx::IsNull( size1 )) {
HXLINE( 168)									innerWidth2 = (( (Float)(width) ) * ( (Float)(sizePercent1) ));
            								}
            								else {
HXLINE( 168)									innerWidth2 = ::Math_obj::max(( (Float)(size1) ),(( (Float)(width) ) * ( (Float)(sizePercent1) )));
            								}
HXDLIN( 168)								int innerWidth3 = ::Std_obj::_hx_int(innerWidth2);
HXDLIN( 168)								if (::hx::IsNotNull( offsetPercent1 )) {
HXLINE( 168)									 ::Dynamic _hx_tmp12;
HXDLIN( 168)									if (::hx::IsNotNull( offset1 )) {
HXLINE( 168)										_hx_tmp12 = offset1;
            									}
            									else {
HXLINE( 168)										_hx_tmp12 = 0;
            									}
HXDLIN( 168)									backgroundSpace->left = ::Std_obj::_hx_int(((( (Float)((width - innerWidth3)) ) * ( (Float)(offsetPercent1) )) + _hx_tmp12));
            								}
            								else {
HXLINE( 168)									int _hx_tmp13;
HXDLIN( 168)									if (::hx::IsNull( offset1 )) {
HXLINE( 168)										_hx_tmp13 = ::Std_obj::_hx_int((( (Float)((width - innerWidth3)) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 168)										_hx_tmp13 = ( (int)(offset1) );
            									}
HXDLIN( 168)									backgroundSpace->left = _hx_tmp13;
            								}
HXDLIN( 168)								backgroundSpace->right = ((width - backgroundSpace->left) - innerWidth3);
            							}
            							else {
HXLINE( 168)								if (::hx::IsNotNull( offsetPercent1 )) {
HXLINE( 168)									 ::Dynamic _hx_tmp14;
HXDLIN( 168)									if (::hx::IsNotNull( offset1 )) {
HXLINE( 168)										_hx_tmp14 = offset1;
            									}
            									else {
HXLINE( 168)										_hx_tmp14 = 0;
            									}
HXDLIN( 168)									backgroundSpace->left = ::Std_obj::_hx_int(((( (Float)((width - ( (int)(size1) ))) ) * ( (Float)(offsetPercent1) )) + _hx_tmp14));
            								}
            								else {
HXLINE( 168)									int _hx_tmp15;
HXDLIN( 168)									if (::hx::IsNull( offset1 )) {
HXLINE( 168)										_hx_tmp15 = ::Std_obj::_hx_int((( (Float)((width - ( (int)(size1) ))) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 168)										_hx_tmp15 = ( (int)(offset1) );
            									}
HXDLIN( 168)									backgroundSpace->left = _hx_tmp15;
            								}
HXDLIN( 168)								backgroundSpace->right = ((width - backgroundSpace->left) - ( (int)(size1) ));
            							}
            						}
            					}
            					else {
HXLINE( 168)						bool _hx_tmp16;
HXDLIN( 168)						if (::hx::IsNull( size1 )) {
HXLINE( 168)							_hx_tmp16 = ::hx::IsNotNull( sizePercent1 );
            						}
            						else {
HXLINE( 168)							_hx_tmp16 = true;
            						}
HXDLIN( 168)						if (_hx_tmp16) {
HXLINE( 168)							if (::hx::IsNotNull( sizePercent1 )) {
HXLINE( 168)								Float innerHeight2;
HXDLIN( 168)								if (::hx::IsNull( size1 )) {
HXLINE( 168)									innerHeight2 = (( (Float)(height) ) * ( (Float)(sizePercent1) ));
            								}
            								else {
HXLINE( 168)									innerHeight2 = ::Math_obj::max(( (Float)(size1) ),(( (Float)(height) ) * ( (Float)(sizePercent1) )));
            								}
HXDLIN( 168)								int innerHeight3 = ::Std_obj::_hx_int(innerHeight2);
HXDLIN( 168)								if (::hx::IsNotNull( offsetPercent1 )) {
HXLINE( 168)									 ::Dynamic _hx_tmp17;
HXDLIN( 168)									if (::hx::IsNotNull( offset1 )) {
HXLINE( 168)										_hx_tmp17 = offset1;
            									}
            									else {
HXLINE( 168)										_hx_tmp17 = 0;
            									}
HXDLIN( 168)									backgroundSpace->top = ::Std_obj::_hx_int(((( (Float)((height - innerHeight3)) ) * ( (Float)(offsetPercent1) )) + _hx_tmp17));
            								}
            								else {
HXLINE( 168)									int _hx_tmp18;
HXDLIN( 168)									if (::hx::IsNull( offset1 )) {
HXLINE( 168)										_hx_tmp18 = ::Std_obj::_hx_int((( (Float)((height - innerHeight3)) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 168)										_hx_tmp18 = ( (int)(offset1) );
            									}
HXDLIN( 168)									backgroundSpace->top = _hx_tmp18;
            								}
HXDLIN( 168)								backgroundSpace->bottom = ((height - backgroundSpace->top) - innerHeight3);
            							}
            							else {
HXLINE( 168)								if (::hx::IsNotNull( offsetPercent1 )) {
HXLINE( 168)									 ::Dynamic _hx_tmp19;
HXDLIN( 168)									if (::hx::IsNotNull( offset1 )) {
HXLINE( 168)										_hx_tmp19 = offset1;
            									}
            									else {
HXLINE( 168)										_hx_tmp19 = 0;
            									}
HXDLIN( 168)									backgroundSpace->top = ::Std_obj::_hx_int(((( (Float)((height - ( (int)(size1) ))) ) * ( (Float)(offsetPercent1) )) + _hx_tmp19));
            								}
            								else {
HXLINE( 168)									int _hx_tmp20;
HXDLIN( 168)									if (::hx::IsNull( offset1 )) {
HXLINE( 168)										_hx_tmp20 = ::Std_obj::_hx_int((( (Float)((height - ( (int)(size1) ))) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 168)										_hx_tmp20 = ( (int)(offset1) );
            									}
HXDLIN( 168)									backgroundSpace->top = _hx_tmp20;
            								}
HXDLIN( 168)								backgroundSpace->bottom = ((height - backgroundSpace->top) - ( (int)(size1) ));
            							}
            						}
            					}
            				}
HXLINE( 170)				int _hx_tmp21 = this->x;
HXDLIN( 170)				int _hx_tmp22 = this->y;
HXDLIN( 170)				this->background =  ::peote::ui::interactive::UIElement_obj::__alloc( HX_CTX ,_hx_tmp21,_hx_tmp22,width,height,(zIndex + 1), ::peote::ui::config::_ElementConfig::ElementConfigImpl_obj::__alloc( HX_CTX ,config->backgroundStyle,backgroundSpace));
            			}
HXLINE( 173)			if (::hx::IsNotNull( config->draggSpace )) {
HXLINE( 173)				this->draggSpaceStart = (this->draggSpaceEnd = ( (int)(config->draggSpace) ));
            			}
HXLINE( 174)			if (::hx::IsNotNull( config->draggSpaceStart )) {
HXLINE( 174)				this->draggSpaceStart = ( (int)(config->draggSpaceStart) );
            			}
HXLINE( 175)			if (::hx::IsNotNull( config->draggSpaceEnd )) {
HXLINE( 175)				this->draggSpaceEnd = ( (int)(config->draggSpaceEnd) );
            			}
HXLINE( 177)			this->draggerLength = config->draggerLength;
HXLINE( 178)			{
HXLINE( 178)				 ::Dynamic p = config->draggerLengthPercent;
HXDLIN( 178)				 ::Dynamic _hx_tmp23;
HXDLIN( 178)				bool _hx_tmp24;
HXDLIN( 178)				if (::hx::IsNotNull( p )) {
HXLINE( 178)					_hx_tmp24 = ::hx::IsGreater( p,((Float)1.0) );
            				}
            				else {
HXLINE( 178)					_hx_tmp24 = false;
            				}
HXDLIN( 178)				if (_hx_tmp24) {
HXLINE( 178)					_hx_tmp23 = ((Float)1.0);
            				}
            				else {
HXLINE( 178)					_hx_tmp23 = p;
            				}
HXDLIN( 178)				this->draggerLengthPercent = _hx_tmp23;
            			}
HXLINE( 180)			if (::hx::IsNotNull( config->draggerStyle )) {
HXLINE( 181)				 ::peote::ui::config::Space draggerSpace;
HXDLIN( 181)				if (::hx::IsNotNull( config->draggerSpace )) {
HXLINE( 181)					 ::peote::ui::config::Space _this1 = config->draggerSpace;
HXDLIN( 181)					draggerSpace =  ::peote::ui::config::Space_obj::__alloc( HX_CTX ,_this1->left,_this1->top,_this1->right,_this1->bottom);
            				}
            				else {
HXLINE( 181)					draggerSpace =  ::peote::ui::config::Space_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXLINE( 182)				{
HXLINE( 182)					 ::Dynamic size2 = config->draggerSize;
HXDLIN( 182)					 ::Dynamic sizePercent2 = config->draggerSizePercent;
HXDLIN( 182)					 ::Dynamic offset2 = config->draggerOffset;
HXDLIN( 182)					 ::Dynamic offsetPercent2 = config->draggerOffsetPercent;
HXDLIN( 182)					if (this->isVertical) {
HXLINE( 182)						bool _hx_tmp25;
HXDLIN( 182)						if (::hx::IsNull( size2 )) {
HXLINE( 182)							_hx_tmp25 = ::hx::IsNotNull( sizePercent2 );
            						}
            						else {
HXLINE( 182)							_hx_tmp25 = true;
            						}
HXDLIN( 182)						if (_hx_tmp25) {
HXLINE( 182)							if (::hx::IsNotNull( sizePercent2 )) {
HXLINE( 182)								Float innerWidth4;
HXDLIN( 182)								if (::hx::IsNull( size2 )) {
HXLINE( 182)									innerWidth4 = (( (Float)(width) ) * ( (Float)(sizePercent2) ));
            								}
            								else {
HXLINE( 182)									innerWidth4 = ::Math_obj::max(( (Float)(size2) ),(( (Float)(width) ) * ( (Float)(sizePercent2) )));
            								}
HXDLIN( 182)								int innerWidth5 = ::Std_obj::_hx_int(innerWidth4);
HXDLIN( 182)								if (::hx::IsNotNull( offsetPercent2 )) {
HXLINE( 182)									 ::Dynamic _hx_tmp26;
HXDLIN( 182)									if (::hx::IsNotNull( offset2 )) {
HXLINE( 182)										_hx_tmp26 = offset2;
            									}
            									else {
HXLINE( 182)										_hx_tmp26 = 0;
            									}
HXDLIN( 182)									draggerSpace->left = ::Std_obj::_hx_int(((( (Float)((width - innerWidth5)) ) * ( (Float)(offsetPercent2) )) + _hx_tmp26));
            								}
            								else {
HXLINE( 182)									int _hx_tmp27;
HXDLIN( 182)									if (::hx::IsNull( offset2 )) {
HXLINE( 182)										_hx_tmp27 = ::Std_obj::_hx_int((( (Float)((width - innerWidth5)) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 182)										_hx_tmp27 = ( (int)(offset2) );
            									}
HXDLIN( 182)									draggerSpace->left = _hx_tmp27;
            								}
HXDLIN( 182)								draggerSpace->right = ((width - draggerSpace->left) - innerWidth5);
            							}
            							else {
HXLINE( 182)								if (::hx::IsNotNull( offsetPercent2 )) {
HXLINE( 182)									 ::Dynamic _hx_tmp28;
HXDLIN( 182)									if (::hx::IsNotNull( offset2 )) {
HXLINE( 182)										_hx_tmp28 = offset2;
            									}
            									else {
HXLINE( 182)										_hx_tmp28 = 0;
            									}
HXDLIN( 182)									draggerSpace->left = ::Std_obj::_hx_int(((( (Float)((width - ( (int)(size2) ))) ) * ( (Float)(offsetPercent2) )) + _hx_tmp28));
            								}
            								else {
HXLINE( 182)									int _hx_tmp29;
HXDLIN( 182)									if (::hx::IsNull( offset2 )) {
HXLINE( 182)										_hx_tmp29 = ::Std_obj::_hx_int((( (Float)((width - ( (int)(size2) ))) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 182)										_hx_tmp29 = ( (int)(offset2) );
            									}
HXDLIN( 182)									draggerSpace->left = _hx_tmp29;
            								}
HXDLIN( 182)								draggerSpace->right = ((width - draggerSpace->left) - ( (int)(size2) ));
            							}
            						}
            					}
            					else {
HXLINE( 182)						bool _hx_tmp30;
HXDLIN( 182)						if (::hx::IsNull( size2 )) {
HXLINE( 182)							_hx_tmp30 = ::hx::IsNotNull( sizePercent2 );
            						}
            						else {
HXLINE( 182)							_hx_tmp30 = true;
            						}
HXDLIN( 182)						if (_hx_tmp30) {
HXLINE( 182)							if (::hx::IsNotNull( sizePercent2 )) {
HXLINE( 182)								Float innerHeight4;
HXDLIN( 182)								if (::hx::IsNull( size2 )) {
HXLINE( 182)									innerHeight4 = (( (Float)(height) ) * ( (Float)(sizePercent2) ));
            								}
            								else {
HXLINE( 182)									innerHeight4 = ::Math_obj::max(( (Float)(size2) ),(( (Float)(height) ) * ( (Float)(sizePercent2) )));
            								}
HXDLIN( 182)								int innerHeight5 = ::Std_obj::_hx_int(innerHeight4);
HXDLIN( 182)								if (::hx::IsNotNull( offsetPercent2 )) {
HXLINE( 182)									 ::Dynamic _hx_tmp31;
HXDLIN( 182)									if (::hx::IsNotNull( offset2 )) {
HXLINE( 182)										_hx_tmp31 = offset2;
            									}
            									else {
HXLINE( 182)										_hx_tmp31 = 0;
            									}
HXDLIN( 182)									draggerSpace->top = ::Std_obj::_hx_int(((( (Float)((height - innerHeight5)) ) * ( (Float)(offsetPercent2) )) + _hx_tmp31));
            								}
            								else {
HXLINE( 182)									int _hx_tmp32;
HXDLIN( 182)									if (::hx::IsNull( offset2 )) {
HXLINE( 182)										_hx_tmp32 = ::Std_obj::_hx_int((( (Float)((height - innerHeight5)) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 182)										_hx_tmp32 = ( (int)(offset2) );
            									}
HXDLIN( 182)									draggerSpace->top = _hx_tmp32;
            								}
HXDLIN( 182)								draggerSpace->bottom = ((height - draggerSpace->top) - innerHeight5);
            							}
            							else {
HXLINE( 182)								if (::hx::IsNotNull( offsetPercent2 )) {
HXLINE( 182)									 ::Dynamic _hx_tmp33;
HXDLIN( 182)									if (::hx::IsNotNull( offset2 )) {
HXLINE( 182)										_hx_tmp33 = offset2;
            									}
            									else {
HXLINE( 182)										_hx_tmp33 = 0;
            									}
HXDLIN( 182)									draggerSpace->top = ::Std_obj::_hx_int(((( (Float)((height - ( (int)(size2) ))) ) * ( (Float)(offsetPercent2) )) + _hx_tmp33));
            								}
            								else {
HXLINE( 182)									int _hx_tmp34;
HXDLIN( 182)									if (::hx::IsNull( offset2 )) {
HXLINE( 182)										_hx_tmp34 = ::Std_obj::_hx_int((( (Float)((height - ( (int)(size2) ))) ) * ((Float)0.5)));
            									}
            									else {
HXLINE( 182)										_hx_tmp34 = ( (int)(offset2) );
            									}
HXDLIN( 182)									draggerSpace->top = _hx_tmp34;
            								}
HXDLIN( 182)								draggerSpace->bottom = ((height - draggerSpace->top) - ( (int)(size2) ));
            							}
            						}
            					}
            				}
HXLINE( 184)				bool _isVertical = this->isVertical;
HXDLIN( 184)				int pos = this->x;
HXDLIN( 184)				int w = this->width;
HXDLIN( 184)				int draggerSize;
HXDLIN( 184)				if (this->isVertical) {
HXLINE( 184)					draggerSize = w;
            				}
            				else {
HXLINE( 184)					if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 184)						if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 184)							draggerSize = ( (int)(this->draggerLength) );
            						}
            						else {
HXLINE( 184)							draggerSize = this->height;
            						}
            					}
            					else {
HXLINE( 184)						Float draggerSize1;
HXDLIN( 184)						if (::hx::IsNull( this->draggerLength )) {
HXLINE( 184)							draggerSize1 = (( (Float)(((w - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            						}
            						else {
HXLINE( 184)							draggerSize1 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            						}
HXDLIN( 184)						draggerSize = ::Std_obj::_hx_int(draggerSize1);
            					}
            				}
HXDLIN( 184)				int _hx_tmp35;
HXDLIN( 184)				if (_isVertical) {
HXLINE( 184)					_hx_tmp35 = pos;
            				}
            				else {
HXLINE( 184)					int _hx_tmp36 = (pos + this->draggSpaceStart);
HXDLIN( 184)					Float _hx_tmp37;
HXDLIN( 184)					if (this->reverse) {
HXLINE( 184)						_hx_tmp37 = (((Float)1.0) - this->_percent);
            					}
            					else {
HXLINE( 184)						_hx_tmp37 = this->_percent;
            					}
HXDLIN( 184)					_hx_tmp35 = (_hx_tmp36 + ::Std_obj::_hx_int((( (Float)((((width - draggerSize) - this->draggSpaceStart) - this->draggSpaceEnd)) ) * _hx_tmp37)));
            				}
HXDLIN( 184)				bool _isVertical1 = !(this->isVertical);
HXDLIN( 184)				int pos1 = this->y;
HXDLIN( 184)				int w1 = this->height;
HXDLIN( 184)				int draggerSize2;
HXDLIN( 184)				if (!(this->isVertical)) {
HXLINE( 184)					draggerSize2 = w1;
            				}
            				else {
HXLINE( 184)					if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 184)						if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 184)							draggerSize2 = ( (int)(this->draggerLength) );
            						}
            						else {
HXLINE( 184)							draggerSize2 = this->width;
            						}
            					}
            					else {
HXLINE( 184)						Float draggerSize3;
HXDLIN( 184)						if (::hx::IsNull( this->draggerLength )) {
HXLINE( 184)							draggerSize3 = (( (Float)(((w1 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            						}
            						else {
HXLINE( 184)							draggerSize3 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w1 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            						}
HXDLIN( 184)						draggerSize2 = ::Std_obj::_hx_int(draggerSize3);
            					}
            				}
HXDLIN( 184)				int _hx_tmp38;
HXDLIN( 184)				if (_isVertical1) {
HXLINE( 184)					_hx_tmp38 = pos1;
            				}
            				else {
HXLINE( 184)					int _hx_tmp39 = (pos1 + this->draggSpaceStart);
HXDLIN( 184)					Float _hx_tmp40;
HXDLIN( 184)					if (this->reverse) {
HXLINE( 184)						_hx_tmp40 = (((Float)1.0) - this->_percent);
            					}
            					else {
HXLINE( 184)						_hx_tmp40 = this->_percent;
            					}
HXDLIN( 184)					_hx_tmp38 = (_hx_tmp39 + ::Std_obj::_hx_int((( (Float)((((height - draggerSize2) - this->draggSpaceStart) - this->draggSpaceEnd)) ) * _hx_tmp40)));
            				}
HXDLIN( 184)				int w2 = this->width;
HXDLIN( 184)				int _hx_tmp41;
HXDLIN( 184)				if (this->isVertical) {
HXLINE( 184)					_hx_tmp41 = w2;
            				}
            				else {
HXLINE( 184)					if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 184)						if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 184)							_hx_tmp41 = ( (int)(this->draggerLength) );
            						}
            						else {
HXLINE( 184)							_hx_tmp41 = this->height;
            						}
            					}
            					else {
HXLINE( 184)						Float _hx_tmp42;
HXDLIN( 184)						if (::hx::IsNull( this->draggerLength )) {
HXLINE( 184)							_hx_tmp42 = (( (Float)(((w2 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            						}
            						else {
HXLINE( 184)							_hx_tmp42 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w2 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            						}
HXDLIN( 184)						_hx_tmp41 = ::Std_obj::_hx_int(_hx_tmp42);
            					}
            				}
HXDLIN( 184)				int w3 = this->height;
HXDLIN( 184)				int _hx_tmp43;
HXDLIN( 184)				if (!(this->isVertical)) {
HXLINE( 184)					_hx_tmp43 = w3;
            				}
            				else {
HXLINE( 184)					if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 184)						if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 184)							_hx_tmp43 = ( (int)(this->draggerLength) );
            						}
            						else {
HXLINE( 184)							_hx_tmp43 = this->width;
            						}
            					}
            					else {
HXLINE( 184)						Float _hx_tmp44;
HXDLIN( 184)						if (::hx::IsNull( this->draggerLength )) {
HXLINE( 184)							_hx_tmp44 = (( (Float)(((w3 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            						}
            						else {
HXLINE( 184)							_hx_tmp44 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w3 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            						}
HXDLIN( 184)						_hx_tmp43 = ::Std_obj::_hx_int(_hx_tmp44);
            					}
            				}
HXDLIN( 184)				this->dragger =  ::peote::ui::interactive::UIElement_obj::__alloc( HX_CTX ,_hx_tmp35,_hx_tmp38,_hx_tmp41,_hx_tmp43,(zIndex + 2), ::peote::ui::config::_ElementConfig::ElementConfigImpl_obj::__alloc( HX_CTX ,config->draggerStyle,draggerSpace));
            			}
            			else {
HXLINE( 186)				bool _isVertical2 = this->isVertical;
HXDLIN( 186)				int pos2 = this->x;
HXDLIN( 186)				int w4 = this->width;
HXDLIN( 186)				int draggerSize4;
HXDLIN( 186)				if (this->isVertical) {
HXLINE( 186)					draggerSize4 = w4;
            				}
            				else {
HXLINE( 186)					if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 186)						if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 186)							draggerSize4 = ( (int)(this->draggerLength) );
            						}
            						else {
HXLINE( 186)							draggerSize4 = this->height;
            						}
            					}
            					else {
HXLINE( 186)						Float draggerSize5;
HXDLIN( 186)						if (::hx::IsNull( this->draggerLength )) {
HXLINE( 186)							draggerSize5 = (( (Float)(((w4 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            						}
            						else {
HXLINE( 186)							draggerSize5 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w4 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            						}
HXDLIN( 186)						draggerSize4 = ::Std_obj::_hx_int(draggerSize5);
            					}
            				}
HXDLIN( 186)				int _hx_tmp45;
HXDLIN( 186)				if (_isVertical2) {
HXLINE( 186)					_hx_tmp45 = pos2;
            				}
            				else {
HXLINE( 186)					int _hx_tmp46 = (pos2 + this->draggSpaceStart);
HXDLIN( 186)					Float _hx_tmp47;
HXDLIN( 186)					if (this->reverse) {
HXLINE( 186)						_hx_tmp47 = (((Float)1.0) - this->_percent);
            					}
            					else {
HXLINE( 186)						_hx_tmp47 = this->_percent;
            					}
HXDLIN( 186)					_hx_tmp45 = (_hx_tmp46 + ::Std_obj::_hx_int((( (Float)((((width - draggerSize4) - this->draggSpaceStart) - this->draggSpaceEnd)) ) * _hx_tmp47)));
            				}
HXDLIN( 186)				bool _isVertical3 = !(this->isVertical);
HXDLIN( 186)				int pos3 = this->y;
HXDLIN( 186)				int w5 = this->height;
HXDLIN( 186)				int draggerSize6;
HXDLIN( 186)				if (!(this->isVertical)) {
HXLINE( 186)					draggerSize6 = w5;
            				}
            				else {
HXLINE( 186)					if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 186)						if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 186)							draggerSize6 = ( (int)(this->draggerLength) );
            						}
            						else {
HXLINE( 186)							draggerSize6 = this->width;
            						}
            					}
            					else {
HXLINE( 186)						Float draggerSize7;
HXDLIN( 186)						if (::hx::IsNull( this->draggerLength )) {
HXLINE( 186)							draggerSize7 = (( (Float)(((w5 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            						}
            						else {
HXLINE( 186)							draggerSize7 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w5 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            						}
HXDLIN( 186)						draggerSize6 = ::Std_obj::_hx_int(draggerSize7);
            					}
            				}
HXDLIN( 186)				int _hx_tmp48;
HXDLIN( 186)				if (_isVertical3) {
HXLINE( 186)					_hx_tmp48 = pos3;
            				}
            				else {
HXLINE( 186)					int _hx_tmp49 = (pos3 + this->draggSpaceStart);
HXDLIN( 186)					Float _hx_tmp50;
HXDLIN( 186)					if (this->reverse) {
HXLINE( 186)						_hx_tmp50 = (((Float)1.0) - this->_percent);
            					}
            					else {
HXLINE( 186)						_hx_tmp50 = this->_percent;
            					}
HXDLIN( 186)					_hx_tmp48 = (_hx_tmp49 + ::Std_obj::_hx_int((( (Float)((((height - draggerSize6) - this->draggSpaceStart) - this->draggSpaceEnd)) ) * _hx_tmp50)));
            				}
HXDLIN( 186)				int w6 = this->width;
HXDLIN( 186)				int _hx_tmp51;
HXDLIN( 186)				if (this->isVertical) {
HXLINE( 186)					_hx_tmp51 = w6;
            				}
            				else {
HXLINE( 186)					if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 186)						if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 186)							_hx_tmp51 = ( (int)(this->draggerLength) );
            						}
            						else {
HXLINE( 186)							_hx_tmp51 = this->height;
            						}
            					}
            					else {
HXLINE( 186)						Float _hx_tmp52;
HXDLIN( 186)						if (::hx::IsNull( this->draggerLength )) {
HXLINE( 186)							_hx_tmp52 = (( (Float)(((w6 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            						}
            						else {
HXLINE( 186)							_hx_tmp52 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w6 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            						}
HXDLIN( 186)						_hx_tmp51 = ::Std_obj::_hx_int(_hx_tmp52);
            					}
            				}
HXDLIN( 186)				int w7 = this->height;
HXDLIN( 186)				int _hx_tmp53;
HXDLIN( 186)				if (!(this->isVertical)) {
HXLINE( 186)					_hx_tmp53 = w7;
            				}
            				else {
HXLINE( 186)					if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 186)						if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 186)							_hx_tmp53 = ( (int)(this->draggerLength) );
            						}
            						else {
HXLINE( 186)							_hx_tmp53 = this->width;
            						}
            					}
            					else {
HXLINE( 186)						Float _hx_tmp54;
HXDLIN( 186)						if (::hx::IsNull( this->draggerLength )) {
HXLINE( 186)							_hx_tmp54 = (( (Float)(((w7 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            						}
            						else {
HXLINE( 186)							_hx_tmp54 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w7 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            						}
HXDLIN( 186)						_hx_tmp53 = ::Std_obj::_hx_int(_hx_tmp54);
            					}
            				}
HXDLIN( 186)				this->dragger =  ::peote::ui::interactive::UIElement_obj::__alloc( HX_CTX ,_hx_tmp45,_hx_tmp48,_hx_tmp51,_hx_tmp53,(zIndex + 2),null());
            			}
            		}
HXLINE( 190)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::peote::ui::interactive::UISlider,_gthis) HXARGC(2)
            			void _hx_run( ::peote::ui::interactive::UIElement uiElement, ::Dynamic e){
            				HX_GC_STACKFRAME(&_hx_pos_f110b15ea9daebc7_190_new)
HXLINE( 190)				if (::hx::IsNotNull( _gthis->onDraggerPointerOver )) {
HXLINE( 190)					_gthis->onDraggerPointerOver(_gthis,e);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 190)			 ::peote::ui::interactive::UIElement _this2 = this->dragger;
HXDLIN( 190)			 ::Dynamic f =  ::Dynamic(new _hx_Closure_0(_gthis));
HXDLIN( 190)			if (::hx::IsNotNull( f )) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::peote::ui::interactive::UIElement,a1, ::Dynamic,_g) HXARGC(1)
            				void _hx_run( ::Dynamic a2){
            					HX_GC_STACKFRAME(&_hx_pos_f110b15ea9daebc7_190_new)
HXLINE( 190)					_g(a1,a2);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 190)				 ::Dynamic _g = f;
HXDLIN( 190)				 ::peote::ui::interactive::UIElement a1 = _this2;
HXDLIN( 190)				_this2->pointerOver =  ::Dynamic(new _hx_Closure_1(a1,_g));
HXDLIN( 190)				if ((_this2->hasMoveEvent == 0)) {
HXLINE( 190)					_this2->addPickableMove();
            				}
HXDLIN( 190)				 ::peote::ui::interactive::UIElement _this3 = _this2;
HXDLIN( 190)				_this3->hasMoveEvent = (_this3->hasMoveEvent | 1);
            			}
            			else {
HXLINE( 190)				if (((_this2->hasMoveEvent & 1) > 0)) {
HXLINE( 190)					 ::peote::ui::interactive::UIElement _this4 = _this2;
HXDLIN( 190)					_this4->hasMoveEvent = (_this4->hasMoveEvent & -2);
HXDLIN( 190)					if ((_this2->hasMoveEvent == 0)) {
HXLINE( 190)						_this2->removePickableMove();
            					}
HXDLIN( 190)					_this2->pointerOver = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
            				}
            			}
            		}
HXLINE( 191)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::peote::ui::interactive::UISlider,_gthis) HXARGC(2)
            			void _hx_run( ::peote::ui::interactive::UIElement uiElement, ::Dynamic e){
            				HX_GC_STACKFRAME(&_hx_pos_f110b15ea9daebc7_191_new)
HXLINE( 191)				if (::hx::IsNotNull( _gthis->onDraggerPointerOut )) {
HXLINE( 191)					_gthis->onDraggerPointerOut(_gthis,e);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 191)			 ::peote::ui::interactive::UIElement _this5 = this->dragger;
HXDLIN( 191)			 ::Dynamic f1 =  ::Dynamic(new _hx_Closure_2(_gthis));
HXDLIN( 191)			if (::hx::IsNotNull( f1 )) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::peote::ui::interactive::UIElement,a11, ::Dynamic,_g1) HXARGC(1)
            				void _hx_run( ::Dynamic a2){
            					HX_GC_STACKFRAME(&_hx_pos_f110b15ea9daebc7_191_new)
HXLINE( 191)					_g1(a11,a2);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 191)				 ::Dynamic _g1 = f1;
HXDLIN( 191)				 ::peote::ui::interactive::UIElement a11 = _this5;
HXDLIN( 191)				_this5->pointerOut =  ::Dynamic(new _hx_Closure_3(a11,_g1));
HXDLIN( 191)				if ((_this5->hasMoveEvent == 0)) {
HXLINE( 191)					_this5->addPickableMove();
            				}
HXDLIN( 191)				 ::peote::ui::interactive::UIElement _this6 = _this5;
HXDLIN( 191)				_this6->hasMoveEvent = (_this6->hasMoveEvent | 2);
            			}
            			else {
HXLINE( 191)				if (((_this5->hasMoveEvent & 2) > 0)) {
HXLINE( 191)					 ::peote::ui::interactive::UIElement _this7 = _this5;
HXDLIN( 191)					_this7->hasMoveEvent = (_this7->hasMoveEvent & -3);
HXDLIN( 191)					if ((_this5->hasMoveEvent == 0)) {
HXLINE( 191)						_this5->removePickableMove();
            					}
HXDLIN( 191)					_this5->pointerOut = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
            				}
            			}
            		}
HXLINE( 194)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::peote::ui::interactive::UISlider,_gthis) HXARGC(2)
            			void _hx_run( ::peote::ui::interactive::UIElement uiElement, ::Dynamic e){
            				HX_GC_STACKFRAME(&_hx_pos_f110b15ea9daebc7_194_new)
HXLINE( 195)				if (::hx::IsNotNull( _gthis->onDraggerPointerDown )) {
HXLINE( 195)					_gthis->onDraggerPointerDown(_gthis,e);
            				}
HXLINE( 197)				_gthis->dragger->masked = false;
HXLINE( 200)				if ((_gthis->valueStart != _gthis->valueEnd)) {
HXLINE( 200)					_gthis->dragger->startDragging(e);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 194)			 ::peote::ui::interactive::UIElement _this8 = this->dragger;
HXDLIN( 194)			 ::Dynamic f2 =  ::Dynamic(new _hx_Closure_4(_gthis));
HXDLIN( 194)			if (::hx::IsNotNull( f2 )) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::Dynamic,_g2, ::peote::ui::interactive::UIElement,a12) HXARGC(1)
            				void _hx_run( ::Dynamic a2){
            					HX_GC_STACKFRAME(&_hx_pos_f110b15ea9daebc7_194_new)
HXLINE( 194)					_g2(a12,a2);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 194)				 ::Dynamic _g2 = f2;
HXDLIN( 194)				 ::peote::ui::interactive::UIElement a12 = _this8;
HXDLIN( 194)				_this8->pointerDown =  ::Dynamic(new _hx_Closure_5(_g2,a12));
HXDLIN( 194)				if ((_this8->hasClickEvent == 0)) {
HXLINE( 194)					_this8->addPickableClick();
            				}
HXDLIN( 194)				 ::peote::ui::interactive::UIElement _this9 = _this8;
HXDLIN( 194)				_this9->hasClickEvent = (_this9->hasClickEvent | 1);
            			}
            			else {
HXLINE( 194)				if (((_this8->hasMoveEvent & 1) > 0)) {
HXLINE( 194)					 ::peote::ui::interactive::UIElement _this10 = _this8;
HXDLIN( 194)					_this10->hasClickEvent = (_this10->hasClickEvent & -2);
HXDLIN( 194)					if ((_this8->hasClickEvent == 0)) {
HXLINE( 194)						_this8->removePickableClick();
            					}
HXDLIN( 194)					_this8->pointerDown = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
            				}
            			}
            		}
HXLINE( 203)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::peote::ui::interactive::UISlider,_gthis) HXARGC(2)
            			void _hx_run( ::peote::ui::interactive::UIElement uiElement, ::Dynamic e){
            				HX_GC_STACKFRAME(&_hx_pos_f110b15ea9daebc7_203_new)
HXLINE( 204)				_gthis->dragger->stopDragging(e);
HXLINE( 205)				_gthis->updateLayout();
HXLINE( 206)				if (::hx::IsNotNull( _gthis->onDraggerPointerUp )) {
HXLINE( 206)					_gthis->onDraggerPointerUp(_gthis,e);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 203)			 ::peote::ui::interactive::UIElement _this11 = this->dragger;
HXDLIN( 203)			 ::Dynamic f3 =  ::Dynamic(new _hx_Closure_6(_gthis));
HXDLIN( 203)			if (::hx::IsNotNull( f3 )) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_7, ::peote::ui::interactive::UIElement,a13, ::Dynamic,_g3) HXARGC(1)
            				void _hx_run( ::Dynamic a2){
            					HX_GC_STACKFRAME(&_hx_pos_f110b15ea9daebc7_203_new)
HXLINE( 203)					_g3(a13,a2);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 203)				 ::Dynamic _g3 = f3;
HXDLIN( 203)				 ::peote::ui::interactive::UIElement a13 = _this11;
HXDLIN( 203)				_this11->pointerUp =  ::Dynamic(new _hx_Closure_7(a13,_g3));
HXDLIN( 203)				if ((_this11->hasClickEvent == 0)) {
HXLINE( 203)					_this11->addPickableClick();
            				}
HXDLIN( 203)				 ::peote::ui::interactive::UIElement _this12 = _this11;
HXDLIN( 203)				_this12->hasClickEvent = (_this12->hasClickEvent | 2);
            			}
            			else {
HXLINE( 203)				if (((_this11->hasMoveEvent & 2) > 0)) {
HXLINE( 203)					 ::peote::ui::interactive::UIElement _this13 = _this11;
HXDLIN( 203)					_this13->hasClickEvent = (_this13->hasClickEvent & -3);
HXDLIN( 203)					if ((_this11->hasClickEvent == 0)) {
HXLINE( 203)						_this11->removePickableClick();
            					}
HXDLIN( 203)					_this11->pointerUp = ::peote::ui::interactive::Interactive_obj::noOperation_dyn();
            				}
            			}
            		}
HXLINE( 210)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::peote::ui::interactive::UISlider,_gthis) HXARGC(3)
            			void _hx_run( ::peote::ui::interactive::UIElement uiElement,Float percentX,Float percentY){
            				HX_GC_STACKFRAME(&_hx_pos_f110b15ea9daebc7_210_new)
HXLINE( 211)				Float f;
HXDLIN( 211)				if (_gthis->isVertical) {
HXLINE( 211)					f = percentY;
            				}
            				else {
HXLINE( 211)					f = percentX;
            				}
HXDLIN( 211)				_gthis->_percent = f;
HXLINE( 212)				if (::hx::IsNotNull( _gthis->_onChange )) {
HXLINE( 212)					Float f1;
HXDLIN( 212)					if (_gthis->reverse) {
HXLINE( 212)						f1 = (((Float)1.0) - _gthis->_percent);
            					}
            					else {
HXLINE( 212)						f1 = _gthis->_percent;
            					}
HXDLIN( 212)					Float f2;
HXDLIN( 212)					if (_gthis->reverse) {
HXLINE( 212)						f2 = (((Float)1.0) - _gthis->_percent);
            					}
            					else {
HXLINE( 212)						f2 = _gthis->_percent;
            					}
HXDLIN( 212)					_gthis->_onChange(_gthis,(_gthis->valueStart + (f1 * (_gthis->valueEnd - _gthis->valueStart))),f2);
            				}
HXLINE( 213)				if (::hx::IsNotNull( _gthis->onChange )) {
HXLINE( 213)					Float f3;
HXDLIN( 213)					if (_gthis->reverse) {
HXLINE( 213)						f3 = (((Float)1.0) - _gthis->_percent);
            					}
            					else {
HXLINE( 213)						f3 = _gthis->_percent;
            					}
HXDLIN( 213)					Float f4;
HXDLIN( 213)					if (_gthis->reverse) {
HXLINE( 213)						f4 = (((Float)1.0) - _gthis->_percent);
            					}
            					else {
HXLINE( 213)						f4 = _gthis->_percent;
            					}
HXDLIN( 213)					_gthis->onChange(_gthis,(_gthis->valueStart + (f3 * (_gthis->valueEnd - _gthis->valueStart))),f4);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 210)			 ::peote::ui::interactive::UIElement _this14 = this->dragger;
HXDLIN( 210)			 ::Dynamic f4 =  ::Dynamic(new _hx_Closure_8(_gthis));
HXDLIN( 210)			if (::hx::IsNull( f4 )) {
HXLINE( 210)				_this14->drag = null();
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_9, ::Dynamic,_g4, ::peote::ui::interactive::UIElement,a14) HXARGC(2)
            				void _hx_run(Float a2,Float a3){
            					HX_GC_STACKFRAME(&_hx_pos_f110b15ea9daebc7_210_new)
HXLINE( 210)					_g4(a14,a2,a3);
            				}
            				HX_END_LOCAL_FUNC2((void))

HXLINE( 210)				 ::Dynamic _g4 = f4;
HXDLIN( 210)				 ::peote::ui::interactive::UIElement a14 = _this14;
HXDLIN( 210)				_this14->drag =  ::Dynamic(new _hx_Closure_9(_g4,a14));
            			}
            		}
HXLINE( 217)		this->dragger->overOutEventsBubbleTo = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 218)		this->dragger->upDownEventsBubbleTo = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 219)		this->dragger->wheelEventsBubbleTo = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 221)		bool _hx_tmp55;
HXDLIN( 221)		if (::hx::IsNull( this->background )) {
HXLINE( 221)			_hx_tmp55 = ::hx::IsNotNull( this->dragger );
            		}
            		else {
HXLINE( 221)			_hx_tmp55 = true;
            		}
HXDLIN( 221)		if (_hx_tmp55) {
HXLINE( 221)			this->changeZIndex = this->onChangeZIndex_dyn();
            		}
            	}

Dynamic UISlider_obj::__CreateEmpty() { return new UISlider_obj; }

void *UISlider_obj::_hx_vtable = 0;

Dynamic UISlider_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< UISlider_obj > _hx_result = new UISlider_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool UISlider_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x314a7f1b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x314a7f1b;
	} else {
		return inClassId==(int)0x7ba4ff38;
	}
}

void UISlider_obj::onChangeZIndex(int z,int deltaZ){
            	HX_STACKFRAME(&_hx_pos_f110b15ea9daebc7_233_onChangeZIndex)
HXLINE( 234)		if (::hx::IsNotNull( this->background )) {
HXLINE( 234)			 ::peote::ui::interactive::UIElement fh = this->background;
HXDLIN( 234)			{
HXLINE( 234)				int v = (fh->z + deltaZ);
HXDLIN( 234)				if ((v != fh->z)) {
HXLINE( 234)					if (::hx::IsNotNull( fh->changeZIndex )) {
HXLINE( 234)						int oldZ = fh->z;
HXDLIN( 234)						fh->changeZIndex((fh->z = v),(v - oldZ));
            					}
            					else {
HXLINE( 234)						fh->z = v;
            					}
            				}
            			}
            		}
HXLINE( 235)		if (::hx::IsNotNull( this->dragger )) {
HXLINE( 235)			 ::peote::ui::interactive::UIElement fh1 = this->dragger;
HXDLIN( 235)			{
HXLINE( 235)				int v1 = (fh1->z + deltaZ);
HXDLIN( 235)				if ((v1 != fh1->z)) {
HXLINE( 235)					if (::hx::IsNotNull( fh1->changeZIndex )) {
HXLINE( 235)						int oldZ1 = fh1->z;
HXDLIN( 235)						fh1->changeZIndex((fh1->z = v1),(v1 - oldZ1));
            					}
            					else {
HXLINE( 235)						fh1->z = v1;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(UISlider_obj,onChangeZIndex,(void))

void UISlider_obj::updateVisibleLayout(){
            	HX_STACKFRAME(&_hx_pos_f110b15ea9daebc7_245_updateVisibleLayout)
HXLINE( 246)		if (!(this->isVisible)) {
HXLINE( 246)			return;
            		}
HXLINE( 248)		if (::hx::IsNotNull( this->background )) {
HXLINE( 249)			this->background->x = this->x;
HXLINE( 250)			this->background->y = this->y;
HXLINE( 251)			{
HXLINE( 251)				 ::peote::ui::interactive::UIElement _this = this->background;
HXDLIN( 251)				int w = this->width;
HXDLIN( 251)				if ((w != _this->width)) {
HXLINE( 251)					if (::hx::IsNotNull( _this->resizeWidth )) {
HXLINE( 251)						int oldWidth = _this->width;
HXDLIN( 251)						_this->resizeWidth((_this->width = w),(w - oldWidth));
            					}
            					else {
HXLINE( 251)						_this->width = w;
            					}
            				}
            			}
HXLINE( 252)			{
HXLINE( 252)				 ::peote::ui::interactive::UIElement _this1 = this->background;
HXDLIN( 252)				int h = this->height;
HXDLIN( 252)				if ((h != _this1->height)) {
HXLINE( 252)					if (::hx::IsNotNull( _this1->resizeHeight )) {
HXLINE( 252)						int oldHeight = _this1->height;
HXDLIN( 252)						_this1->resizeHeight((_this1->height = h),(h - oldHeight));
            					}
            					else {
HXLINE( 252)						_this1->height = h;
            					}
            				}
            			}
HXLINE( 253)			{
HXLINE( 253)				 ::peote::ui::interactive::UIElement _this2 = this->background;
HXDLIN( 253)				bool _hx_tmp;
HXDLIN( 253)				_hx_tmp = !(_this2->isDragging);
HXDLIN( 253)				if (_hx_tmp) {
HXLINE( 253)					bool _hx_tmp1;
HXDLIN( 253)					if (this->masked) {
HXLINE( 253)						int _x = (this->x + this->maskX);
HXDLIN( 253)						int _y = (this->y + this->maskY);
HXDLIN( 253)						int _width = this->maskWidth;
HXDLIN( 253)						int _height = this->maskHeight;
HXDLIN( 253)						bool _isVisible = this->isVisible;
HXDLIN( 253)						if ((_this2->x < _x)) {
HXLINE( 253)							if (((_this2->x + _this2->width) <= _x)) {
HXLINE( 253)								_this2->maskWidth = 0;
HXDLIN( 253)								bool _hx_tmp2;
HXDLIN( 253)								if (_isVisible) {
HXLINE( 253)									_hx_tmp2 = _this2->isVisible;
            								}
            								else {
HXLINE( 253)									_hx_tmp2 = false;
            								}
HXDLIN( 253)								if (_hx_tmp2) {
HXLINE( 253)									_this2->uiDisplay->remove(_this2);
            								}
HXDLIN( 253)								_hx_tmp1 = false;
            							}
            							else {
HXLINE( 253)								_this2->maskX = (_x - _this2->x);
HXDLIN( 253)								if (((_this2->x + _this2->width) >= (_x + _width))) {
HXLINE( 253)									_this2->maskWidth = _width;
            								}
            								else {
HXLINE( 253)									_this2->maskWidth = (_this2->width - _this2->maskX);
            								}
HXDLIN( 253)								if ((_this2->y < _y)) {
HXLINE( 253)									if (((_this2->y + _this2->height) <= _y)) {
HXLINE( 253)										_this2->maskHeight = 0;
HXDLIN( 253)										bool _hx_tmp3;
HXDLIN( 253)										if (_isVisible) {
HXLINE( 253)											_hx_tmp3 = _this2->isVisible;
            										}
            										else {
HXLINE( 253)											_hx_tmp3 = false;
            										}
HXDLIN( 253)										if (_hx_tmp3) {
HXLINE( 253)											_this2->uiDisplay->remove(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = false;
            									}
            									else {
HXLINE( 253)										_this2->maskY = (_y - _this2->y);
HXDLIN( 253)										if (((_this2->y + _this2->height) >= (_y + _height))) {
HXLINE( 253)											_this2->maskHeight = _height;
            										}
            										else {
HXLINE( 253)											_this2->maskHeight = (_this2->height - _this2->maskY);
            										}
HXDLIN( 253)										bool _hx_tmp4;
HXDLIN( 253)										if (_isVisible) {
HXLINE( 253)											_hx_tmp4 = !(_this2->isVisible);
            										}
            										else {
HXLINE( 253)											_hx_tmp4 = false;
            										}
HXDLIN( 253)										if (_hx_tmp4) {
HXLINE( 253)											_this2->uiDisplay->add(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = true;
            									}
            								}
            								else {
HXLINE( 253)									if (((_this2->y + _this2->height) > (_y + _height))) {
HXLINE( 253)										if ((_this2->y >= (_y + _height))) {
HXLINE( 253)											_this2->maskHeight = 0;
HXDLIN( 253)											bool _hx_tmp5;
HXDLIN( 253)											if (_isVisible) {
HXLINE( 253)												_hx_tmp5 = _this2->isVisible;
            											}
            											else {
HXLINE( 253)												_hx_tmp5 = false;
            											}
HXDLIN( 253)											if (_hx_tmp5) {
HXLINE( 253)												_this2->uiDisplay->remove(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = false;
            										}
            										else {
HXLINE( 253)											_this2->maskY = 0;
HXDLIN( 253)											_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y + _height)));
HXDLIN( 253)											bool _hx_tmp6;
HXDLIN( 253)											if (_isVisible) {
HXLINE( 253)												_hx_tmp6 = !(_this2->isVisible);
            											}
            											else {
HXLINE( 253)												_hx_tmp6 = false;
            											}
HXDLIN( 253)											if (_hx_tmp6) {
HXLINE( 253)												_this2->uiDisplay->add(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = true;
            										}
            									}
            									else {
HXLINE( 253)										_this2->maskY = 0;
HXDLIN( 253)										_this2->maskHeight = _this2->height;
HXDLIN( 253)										bool _hx_tmp7;
HXDLIN( 253)										if (_isVisible) {
HXLINE( 253)											_hx_tmp7 = !(_this2->isVisible);
            										}
            										else {
HXLINE( 253)											_hx_tmp7 = false;
            										}
HXDLIN( 253)										if (_hx_tmp7) {
HXLINE( 253)											_this2->uiDisplay->add(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = true;
            									}
            								}
            							}
            						}
            						else {
HXLINE( 253)							if (((_this2->x + _this2->width) > (_x + _width))) {
HXLINE( 253)								if ((_this2->x >= (_x + _width))) {
HXLINE( 253)									_this2->maskWidth = 0;
HXDLIN( 253)									bool _hx_tmp8;
HXDLIN( 253)									if (_isVisible) {
HXLINE( 253)										_hx_tmp8 = _this2->isVisible;
            									}
            									else {
HXLINE( 253)										_hx_tmp8 = false;
            									}
HXDLIN( 253)									if (_hx_tmp8) {
HXLINE( 253)										_this2->uiDisplay->remove(_this2);
            									}
HXDLIN( 253)									_hx_tmp1 = false;
            								}
            								else {
HXLINE( 253)									_this2->maskX = 0;
HXDLIN( 253)									_this2->maskWidth = (_this2->width - ((_this2->x + _this2->width) - (_x + _width)));
HXDLIN( 253)									if ((_this2->y < _y)) {
HXLINE( 253)										if (((_this2->y + _this2->height) <= _y)) {
HXLINE( 253)											_this2->maskHeight = 0;
HXDLIN( 253)											bool _hx_tmp9;
HXDLIN( 253)											if (_isVisible) {
HXLINE( 253)												_hx_tmp9 = _this2->isVisible;
            											}
            											else {
HXLINE( 253)												_hx_tmp9 = false;
            											}
HXDLIN( 253)											if (_hx_tmp9) {
HXLINE( 253)												_this2->uiDisplay->remove(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = false;
            										}
            										else {
HXLINE( 253)											_this2->maskY = (_y - _this2->y);
HXDLIN( 253)											if (((_this2->y + _this2->height) >= (_y + _height))) {
HXLINE( 253)												_this2->maskHeight = _height;
            											}
            											else {
HXLINE( 253)												_this2->maskHeight = (_this2->height - _this2->maskY);
            											}
HXDLIN( 253)											bool _hx_tmp10;
HXDLIN( 253)											if (_isVisible) {
HXLINE( 253)												_hx_tmp10 = !(_this2->isVisible);
            											}
            											else {
HXLINE( 253)												_hx_tmp10 = false;
            											}
HXDLIN( 253)											if (_hx_tmp10) {
HXLINE( 253)												_this2->uiDisplay->add(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = true;
            										}
            									}
            									else {
HXLINE( 253)										if (((_this2->y + _this2->height) > (_y + _height))) {
HXLINE( 253)											if ((_this2->y >= (_y + _height))) {
HXLINE( 253)												_this2->maskHeight = 0;
HXDLIN( 253)												bool _hx_tmp11;
HXDLIN( 253)												if (_isVisible) {
HXLINE( 253)													_hx_tmp11 = _this2->isVisible;
            												}
            												else {
HXLINE( 253)													_hx_tmp11 = false;
            												}
HXDLIN( 253)												if (_hx_tmp11) {
HXLINE( 253)													_this2->uiDisplay->remove(_this2);
            												}
HXDLIN( 253)												_hx_tmp1 = false;
            											}
            											else {
HXLINE( 253)												_this2->maskY = 0;
HXDLIN( 253)												_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y + _height)));
HXDLIN( 253)												bool _hx_tmp12;
HXDLIN( 253)												if (_isVisible) {
HXLINE( 253)													_hx_tmp12 = !(_this2->isVisible);
            												}
            												else {
HXLINE( 253)													_hx_tmp12 = false;
            												}
HXDLIN( 253)												if (_hx_tmp12) {
HXLINE( 253)													_this2->uiDisplay->add(_this2);
            												}
HXDLIN( 253)												_hx_tmp1 = true;
            											}
            										}
            										else {
HXLINE( 253)											_this2->maskY = 0;
HXDLIN( 253)											_this2->maskHeight = _this2->height;
HXDLIN( 253)											bool _hx_tmp13;
HXDLIN( 253)											if (_isVisible) {
HXLINE( 253)												_hx_tmp13 = !(_this2->isVisible);
            											}
            											else {
HXLINE( 253)												_hx_tmp13 = false;
            											}
HXDLIN( 253)											if (_hx_tmp13) {
HXLINE( 253)												_this2->uiDisplay->add(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = true;
            										}
            									}
            								}
            							}
            							else {
HXLINE( 253)								_this2->maskX = 0;
HXDLIN( 253)								_this2->maskWidth = _this2->width;
HXDLIN( 253)								if ((_this2->y < _y)) {
HXLINE( 253)									if (((_this2->y + _this2->height) <= _y)) {
HXLINE( 253)										_this2->maskHeight = 0;
HXDLIN( 253)										bool _hx_tmp14;
HXDLIN( 253)										if (_isVisible) {
HXLINE( 253)											_hx_tmp14 = _this2->isVisible;
            										}
            										else {
HXLINE( 253)											_hx_tmp14 = false;
            										}
HXDLIN( 253)										if (_hx_tmp14) {
HXLINE( 253)											_this2->uiDisplay->remove(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = false;
            									}
            									else {
HXLINE( 253)										_this2->maskY = (_y - _this2->y);
HXDLIN( 253)										if (((_this2->y + _this2->height) >= (_y + _height))) {
HXLINE( 253)											_this2->maskHeight = _height;
            										}
            										else {
HXLINE( 253)											_this2->maskHeight = (_this2->height - _this2->maskY);
            										}
HXDLIN( 253)										bool _hx_tmp15;
HXDLIN( 253)										if (_isVisible) {
HXLINE( 253)											_hx_tmp15 = !(_this2->isVisible);
            										}
            										else {
HXLINE( 253)											_hx_tmp15 = false;
            										}
HXDLIN( 253)										if (_hx_tmp15) {
HXLINE( 253)											_this2->uiDisplay->add(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = true;
            									}
            								}
            								else {
HXLINE( 253)									if (((_this2->y + _this2->height) > (_y + _height))) {
HXLINE( 253)										if ((_this2->y >= (_y + _height))) {
HXLINE( 253)											_this2->maskHeight = 0;
HXDLIN( 253)											bool _hx_tmp16;
HXDLIN( 253)											if (_isVisible) {
HXLINE( 253)												_hx_tmp16 = _this2->isVisible;
            											}
            											else {
HXLINE( 253)												_hx_tmp16 = false;
            											}
HXDLIN( 253)											if (_hx_tmp16) {
HXLINE( 253)												_this2->uiDisplay->remove(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = false;
            										}
            										else {
HXLINE( 253)											_this2->maskY = 0;
HXDLIN( 253)											_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y + _height)));
HXDLIN( 253)											bool _hx_tmp17;
HXDLIN( 253)											if (_isVisible) {
HXLINE( 253)												_hx_tmp17 = !(_this2->isVisible);
            											}
            											else {
HXLINE( 253)												_hx_tmp17 = false;
            											}
HXDLIN( 253)											if (_hx_tmp17) {
HXLINE( 253)												_this2->uiDisplay->add(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = true;
            										}
            									}
            									else {
HXLINE( 253)										_this2->maskY = 0;
HXDLIN( 253)										_this2->maskHeight = _this2->height;
HXDLIN( 253)										bool _hx_tmp18;
HXDLIN( 253)										if (_isVisible) {
HXLINE( 253)											_hx_tmp18 = !(_this2->isVisible);
            										}
            										else {
HXLINE( 253)											_hx_tmp18 = false;
            										}
HXDLIN( 253)										if (_hx_tmp18) {
HXLINE( 253)											_this2->uiDisplay->add(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = false;
            									}
            								}
            							}
            						}
            					}
            					else {
HXLINE( 253)						int _x1 = this->x;
HXDLIN( 253)						int _y1 = this->y;
HXDLIN( 253)						int _width1 = this->width;
HXDLIN( 253)						int _height1 = this->height;
HXDLIN( 253)						bool _isVisible1 = this->isVisible;
HXDLIN( 253)						if ((_this2->x < _x1)) {
HXLINE( 253)							if (((_this2->x + _this2->width) <= _x1)) {
HXLINE( 253)								_this2->maskWidth = 0;
HXDLIN( 253)								bool _hx_tmp19;
HXDLIN( 253)								if (_isVisible1) {
HXLINE( 253)									_hx_tmp19 = _this2->isVisible;
            								}
            								else {
HXLINE( 253)									_hx_tmp19 = false;
            								}
HXDLIN( 253)								if (_hx_tmp19) {
HXLINE( 253)									_this2->uiDisplay->remove(_this2);
            								}
HXDLIN( 253)								_hx_tmp1 = false;
            							}
            							else {
HXLINE( 253)								_this2->maskX = (_x1 - _this2->x);
HXDLIN( 253)								if (((_this2->x + _this2->width) >= (_x1 + _width1))) {
HXLINE( 253)									_this2->maskWidth = _width1;
            								}
            								else {
HXLINE( 253)									_this2->maskWidth = (_this2->width - _this2->maskX);
            								}
HXDLIN( 253)								if ((_this2->y < _y1)) {
HXLINE( 253)									if (((_this2->y + _this2->height) <= _y1)) {
HXLINE( 253)										_this2->maskHeight = 0;
HXDLIN( 253)										bool _hx_tmp20;
HXDLIN( 253)										if (_isVisible1) {
HXLINE( 253)											_hx_tmp20 = _this2->isVisible;
            										}
            										else {
HXLINE( 253)											_hx_tmp20 = false;
            										}
HXDLIN( 253)										if (_hx_tmp20) {
HXLINE( 253)											_this2->uiDisplay->remove(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = false;
            									}
            									else {
HXLINE( 253)										_this2->maskY = (_y1 - _this2->y);
HXDLIN( 253)										if (((_this2->y + _this2->height) >= (_y1 + _height1))) {
HXLINE( 253)											_this2->maskHeight = _height1;
            										}
            										else {
HXLINE( 253)											_this2->maskHeight = (_this2->height - _this2->maskY);
            										}
HXDLIN( 253)										bool _hx_tmp21;
HXDLIN( 253)										if (_isVisible1) {
HXLINE( 253)											_hx_tmp21 = !(_this2->isVisible);
            										}
            										else {
HXLINE( 253)											_hx_tmp21 = false;
            										}
HXDLIN( 253)										if (_hx_tmp21) {
HXLINE( 253)											_this2->uiDisplay->add(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = true;
            									}
            								}
            								else {
HXLINE( 253)									if (((_this2->y + _this2->height) > (_y1 + _height1))) {
HXLINE( 253)										if ((_this2->y >= (_y1 + _height1))) {
HXLINE( 253)											_this2->maskHeight = 0;
HXDLIN( 253)											bool _hx_tmp22;
HXDLIN( 253)											if (_isVisible1) {
HXLINE( 253)												_hx_tmp22 = _this2->isVisible;
            											}
            											else {
HXLINE( 253)												_hx_tmp22 = false;
            											}
HXDLIN( 253)											if (_hx_tmp22) {
HXLINE( 253)												_this2->uiDisplay->remove(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = false;
            										}
            										else {
HXLINE( 253)											_this2->maskY = 0;
HXDLIN( 253)											_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y1 + _height1)));
HXDLIN( 253)											bool _hx_tmp23;
HXDLIN( 253)											if (_isVisible1) {
HXLINE( 253)												_hx_tmp23 = !(_this2->isVisible);
            											}
            											else {
HXLINE( 253)												_hx_tmp23 = false;
            											}
HXDLIN( 253)											if (_hx_tmp23) {
HXLINE( 253)												_this2->uiDisplay->add(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = true;
            										}
            									}
            									else {
HXLINE( 253)										_this2->maskY = 0;
HXDLIN( 253)										_this2->maskHeight = _this2->height;
HXDLIN( 253)										bool _hx_tmp24;
HXDLIN( 253)										if (_isVisible1) {
HXLINE( 253)											_hx_tmp24 = !(_this2->isVisible);
            										}
            										else {
HXLINE( 253)											_hx_tmp24 = false;
            										}
HXDLIN( 253)										if (_hx_tmp24) {
HXLINE( 253)											_this2->uiDisplay->add(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = true;
            									}
            								}
            							}
            						}
            						else {
HXLINE( 253)							if (((_this2->x + _this2->width) > (_x1 + _width1))) {
HXLINE( 253)								if ((_this2->x >= (_x1 + _width1))) {
HXLINE( 253)									_this2->maskWidth = 0;
HXDLIN( 253)									bool _hx_tmp25;
HXDLIN( 253)									if (_isVisible1) {
HXLINE( 253)										_hx_tmp25 = _this2->isVisible;
            									}
            									else {
HXLINE( 253)										_hx_tmp25 = false;
            									}
HXDLIN( 253)									if (_hx_tmp25) {
HXLINE( 253)										_this2->uiDisplay->remove(_this2);
            									}
HXDLIN( 253)									_hx_tmp1 = false;
            								}
            								else {
HXLINE( 253)									_this2->maskX = 0;
HXDLIN( 253)									_this2->maskWidth = (_this2->width - ((_this2->x + _this2->width) - (_x1 + _width1)));
HXDLIN( 253)									if ((_this2->y < _y1)) {
HXLINE( 253)										if (((_this2->y + _this2->height) <= _y1)) {
HXLINE( 253)											_this2->maskHeight = 0;
HXDLIN( 253)											bool _hx_tmp26;
HXDLIN( 253)											if (_isVisible1) {
HXLINE( 253)												_hx_tmp26 = _this2->isVisible;
            											}
            											else {
HXLINE( 253)												_hx_tmp26 = false;
            											}
HXDLIN( 253)											if (_hx_tmp26) {
HXLINE( 253)												_this2->uiDisplay->remove(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = false;
            										}
            										else {
HXLINE( 253)											_this2->maskY = (_y1 - _this2->y);
HXDLIN( 253)											if (((_this2->y + _this2->height) >= (_y1 + _height1))) {
HXLINE( 253)												_this2->maskHeight = _height1;
            											}
            											else {
HXLINE( 253)												_this2->maskHeight = (_this2->height - _this2->maskY);
            											}
HXDLIN( 253)											bool _hx_tmp27;
HXDLIN( 253)											if (_isVisible1) {
HXLINE( 253)												_hx_tmp27 = !(_this2->isVisible);
            											}
            											else {
HXLINE( 253)												_hx_tmp27 = false;
            											}
HXDLIN( 253)											if (_hx_tmp27) {
HXLINE( 253)												_this2->uiDisplay->add(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = true;
            										}
            									}
            									else {
HXLINE( 253)										if (((_this2->y + _this2->height) > (_y1 + _height1))) {
HXLINE( 253)											if ((_this2->y >= (_y1 + _height1))) {
HXLINE( 253)												_this2->maskHeight = 0;
HXDLIN( 253)												bool _hx_tmp28;
HXDLIN( 253)												if (_isVisible1) {
HXLINE( 253)													_hx_tmp28 = _this2->isVisible;
            												}
            												else {
HXLINE( 253)													_hx_tmp28 = false;
            												}
HXDLIN( 253)												if (_hx_tmp28) {
HXLINE( 253)													_this2->uiDisplay->remove(_this2);
            												}
HXDLIN( 253)												_hx_tmp1 = false;
            											}
            											else {
HXLINE( 253)												_this2->maskY = 0;
HXDLIN( 253)												_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y1 + _height1)));
HXDLIN( 253)												bool _hx_tmp29;
HXDLIN( 253)												if (_isVisible1) {
HXLINE( 253)													_hx_tmp29 = !(_this2->isVisible);
            												}
            												else {
HXLINE( 253)													_hx_tmp29 = false;
            												}
HXDLIN( 253)												if (_hx_tmp29) {
HXLINE( 253)													_this2->uiDisplay->add(_this2);
            												}
HXDLIN( 253)												_hx_tmp1 = true;
            											}
            										}
            										else {
HXLINE( 253)											_this2->maskY = 0;
HXDLIN( 253)											_this2->maskHeight = _this2->height;
HXDLIN( 253)											bool _hx_tmp30;
HXDLIN( 253)											if (_isVisible1) {
HXLINE( 253)												_hx_tmp30 = !(_this2->isVisible);
            											}
            											else {
HXLINE( 253)												_hx_tmp30 = false;
            											}
HXDLIN( 253)											if (_hx_tmp30) {
HXLINE( 253)												_this2->uiDisplay->add(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = true;
            										}
            									}
            								}
            							}
            							else {
HXLINE( 253)								_this2->maskX = 0;
HXDLIN( 253)								_this2->maskWidth = _this2->width;
HXDLIN( 253)								if ((_this2->y < _y1)) {
HXLINE( 253)									if (((_this2->y + _this2->height) <= _y1)) {
HXLINE( 253)										_this2->maskHeight = 0;
HXDLIN( 253)										bool _hx_tmp31;
HXDLIN( 253)										if (_isVisible1) {
HXLINE( 253)											_hx_tmp31 = _this2->isVisible;
            										}
            										else {
HXLINE( 253)											_hx_tmp31 = false;
            										}
HXDLIN( 253)										if (_hx_tmp31) {
HXLINE( 253)											_this2->uiDisplay->remove(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = false;
            									}
            									else {
HXLINE( 253)										_this2->maskY = (_y1 - _this2->y);
HXDLIN( 253)										if (((_this2->y + _this2->height) >= (_y1 + _height1))) {
HXLINE( 253)											_this2->maskHeight = _height1;
            										}
            										else {
HXLINE( 253)											_this2->maskHeight = (_this2->height - _this2->maskY);
            										}
HXDLIN( 253)										bool _hx_tmp32;
HXDLIN( 253)										if (_isVisible1) {
HXLINE( 253)											_hx_tmp32 = !(_this2->isVisible);
            										}
            										else {
HXLINE( 253)											_hx_tmp32 = false;
            										}
HXDLIN( 253)										if (_hx_tmp32) {
HXLINE( 253)											_this2->uiDisplay->add(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = true;
            									}
            								}
            								else {
HXLINE( 253)									if (((_this2->y + _this2->height) > (_y1 + _height1))) {
HXLINE( 253)										if ((_this2->y >= (_y1 + _height1))) {
HXLINE( 253)											_this2->maskHeight = 0;
HXDLIN( 253)											bool _hx_tmp33;
HXDLIN( 253)											if (_isVisible1) {
HXLINE( 253)												_hx_tmp33 = _this2->isVisible;
            											}
            											else {
HXLINE( 253)												_hx_tmp33 = false;
            											}
HXDLIN( 253)											if (_hx_tmp33) {
HXLINE( 253)												_this2->uiDisplay->remove(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = false;
            										}
            										else {
HXLINE( 253)											_this2->maskY = 0;
HXDLIN( 253)											_this2->maskHeight = (_this2->height - ((_this2->y + _this2->height) - (_y1 + _height1)));
HXDLIN( 253)											bool _hx_tmp34;
HXDLIN( 253)											if (_isVisible1) {
HXLINE( 253)												_hx_tmp34 = !(_this2->isVisible);
            											}
            											else {
HXLINE( 253)												_hx_tmp34 = false;
            											}
HXDLIN( 253)											if (_hx_tmp34) {
HXLINE( 253)												_this2->uiDisplay->add(_this2);
            											}
HXDLIN( 253)											_hx_tmp1 = true;
            										}
            									}
            									else {
HXLINE( 253)										_this2->maskY = 0;
HXDLIN( 253)										_this2->maskHeight = _this2->height;
HXDLIN( 253)										bool _hx_tmp35;
HXDLIN( 253)										if (_isVisible1) {
HXLINE( 253)											_hx_tmp35 = !(_this2->isVisible);
            										}
            										else {
HXLINE( 253)											_hx_tmp35 = false;
            										}
HXDLIN( 253)										if (_hx_tmp35) {
HXLINE( 253)											_this2->uiDisplay->add(_this2);
            										}
HXDLIN( 253)										_hx_tmp1 = false;
            									}
            								}
            							}
            						}
            					}
HXDLIN( 253)					_this2->masked = _hx_tmp1;
            				}
            			}
HXLINE( 254)			this->background->updateLayout();
            		}
HXLINE( 256)		if (::hx::IsNotNull( this->dragger )) {
HXLINE( 257)			{
HXLINE( 257)				 ::peote::ui::interactive::UIElement _this3 = this->dragger;
HXDLIN( 257)				int w1 = this->width;
HXDLIN( 257)				int w2;
HXDLIN( 257)				if (this->isVertical) {
HXLINE( 257)					w2 = w1;
            				}
            				else {
HXLINE( 257)					if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 257)						if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 257)							w2 = ( (int)(this->draggerLength) );
            						}
            						else {
HXLINE( 257)							w2 = this->height;
            						}
            					}
            					else {
HXLINE( 257)						Float w3;
HXDLIN( 257)						if (::hx::IsNull( this->draggerLength )) {
HXLINE( 257)							w3 = (( (Float)(((w1 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            						}
            						else {
HXLINE( 257)							w3 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w1 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            						}
HXDLIN( 257)						w2 = ::Std_obj::_hx_int(w3);
            					}
            				}
HXDLIN( 257)				if ((w2 != _this3->width)) {
HXLINE( 257)					if (::hx::IsNotNull( _this3->resizeWidth )) {
HXLINE( 257)						int oldWidth1 = _this3->width;
HXDLIN( 257)						_this3->resizeWidth((_this3->width = w2),(w2 - oldWidth1));
            					}
            					else {
HXLINE( 257)						_this3->width = w2;
            					}
            				}
            			}
HXLINE( 258)			{
HXLINE( 258)				 ::peote::ui::interactive::UIElement _this4 = this->dragger;
HXDLIN( 258)				int w4 = this->height;
HXDLIN( 258)				int h1;
HXDLIN( 258)				if (!(this->isVertical)) {
HXLINE( 258)					h1 = w4;
            				}
            				else {
HXLINE( 258)					if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 258)						if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 258)							h1 = ( (int)(this->draggerLength) );
            						}
            						else {
HXLINE( 258)							h1 = this->width;
            						}
            					}
            					else {
HXLINE( 258)						Float h2;
HXDLIN( 258)						if (::hx::IsNull( this->draggerLength )) {
HXLINE( 258)							h2 = (( (Float)(((w4 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            						}
            						else {
HXLINE( 258)							h2 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w4 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            						}
HXDLIN( 258)						h1 = ::Std_obj::_hx_int(h2);
            					}
            				}
HXDLIN( 258)				if ((h1 != _this4->height)) {
HXLINE( 258)					if (::hx::IsNotNull( _this4->resizeHeight )) {
HXLINE( 258)						int oldHeight1 = _this4->height;
HXDLIN( 258)						_this4->resizeHeight((_this4->height = h1),(h1 - oldHeight1));
            					}
            					else {
HXLINE( 258)						_this4->height = h1;
            					}
            				}
            			}
HXLINE( 259)			int pos = this->x;
HXDLIN( 259)			int _hx_tmp36;
HXDLIN( 259)			if (this->isVertical) {
HXLINE( 259)				_hx_tmp36 = pos;
            			}
            			else {
HXLINE( 259)				int _hx_tmp37 = (pos + this->draggSpaceStart);
HXDLIN( 259)				Float _hx_tmp38;
HXDLIN( 259)				if (this->reverse) {
HXLINE( 259)					_hx_tmp38 = (((Float)1.0) - this->_percent);
            				}
            				else {
HXLINE( 259)					_hx_tmp38 = this->_percent;
            				}
HXDLIN( 259)				_hx_tmp36 = (_hx_tmp37 + ::Std_obj::_hx_int((( (Float)((((this->width - this->dragger->width) - this->draggSpaceStart) - this->draggSpaceEnd)) ) * _hx_tmp38)));
            			}
HXDLIN( 259)			this->dragger->x = _hx_tmp36;
HXLINE( 260)			int pos1 = this->y;
HXDLIN( 260)			int _hx_tmp39;
HXDLIN( 260)			if (!(this->isVertical)) {
HXLINE( 260)				_hx_tmp39 = pos1;
            			}
            			else {
HXLINE( 260)				int _hx_tmp40 = (pos1 + this->draggSpaceStart);
HXDLIN( 260)				Float _hx_tmp41;
HXDLIN( 260)				if (this->reverse) {
HXLINE( 260)					_hx_tmp41 = (((Float)1.0) - this->_percent);
            				}
            				else {
HXLINE( 260)					_hx_tmp41 = this->_percent;
            				}
HXDLIN( 260)				_hx_tmp39 = (_hx_tmp40 + ::Std_obj::_hx_int((( (Float)((((this->height - this->dragger->height) - this->draggSpaceStart) - this->draggSpaceEnd)) ) * _hx_tmp41)));
            			}
HXDLIN( 260)			this->dragger->y = _hx_tmp39;
HXLINE( 261)			if (this->isVertical) {
HXLINE( 261)				 ::peote::ui::interactive::UIElement _this5 = this->dragger;
HXDLIN( 261)				int dragAreaX = this->dragger->x;
HXDLIN( 261)				int dragAreaY = (this->y + this->draggSpaceStart);
HXDLIN( 261)				_this5->dragMinX = dragAreaX;
HXDLIN( 261)				_this5->dragMinY = dragAreaY;
HXDLIN( 261)				_this5->dragMaxX = (dragAreaX + this->dragger->width);
HXDLIN( 261)				_this5->dragMaxY = (dragAreaY + ((this->height - this->draggSpaceStart) - this->draggSpaceEnd));
            			}
            			else {
HXLINE( 261)				 ::peote::ui::interactive::UIElement _this6 = this->dragger;
HXDLIN( 261)				int dragAreaX1 = (this->x + this->draggSpaceStart);
HXDLIN( 261)				int dragAreaY1 = this->dragger->y;
HXDLIN( 261)				_this6->dragMinX = dragAreaX1;
HXDLIN( 261)				_this6->dragMinY = dragAreaY1;
HXDLIN( 261)				_this6->dragMaxX = (dragAreaX1 + ((this->width - this->draggSpaceStart) - this->draggSpaceEnd));
HXDLIN( 261)				_this6->dragMaxY = (dragAreaY1 + this->dragger->height);
            			}
HXLINE( 262)			{
HXLINE( 262)				 ::peote::ui::interactive::UIElement _this7 = this->dragger;
HXDLIN( 262)				bool _hx_tmp42;
HXDLIN( 262)				_hx_tmp42 = !(_this7->isDragging);
HXDLIN( 262)				if (_hx_tmp42) {
HXLINE( 262)					bool _hx_tmp43;
HXDLIN( 262)					if (this->masked) {
HXLINE( 262)						int _x2 = (this->x + this->maskX);
HXDLIN( 262)						int _y2 = (this->y + this->maskY);
HXDLIN( 262)						int _width2 = this->maskWidth;
HXDLIN( 262)						int _height2 = this->maskHeight;
HXDLIN( 262)						bool _isVisible2 = this->isVisible;
HXDLIN( 262)						if ((_this7->x < _x2)) {
HXLINE( 262)							if (((_this7->x + _this7->width) <= _x2)) {
HXLINE( 262)								_this7->maskWidth = 0;
HXDLIN( 262)								bool _hx_tmp44;
HXDLIN( 262)								if (_isVisible2) {
HXLINE( 262)									_hx_tmp44 = _this7->isVisible;
            								}
            								else {
HXLINE( 262)									_hx_tmp44 = false;
            								}
HXDLIN( 262)								if (_hx_tmp44) {
HXLINE( 262)									_this7->uiDisplay->remove(_this7);
            								}
HXDLIN( 262)								_hx_tmp43 = false;
            							}
            							else {
HXLINE( 262)								_this7->maskX = (_x2 - _this7->x);
HXDLIN( 262)								if (((_this7->x + _this7->width) >= (_x2 + _width2))) {
HXLINE( 262)									_this7->maskWidth = _width2;
            								}
            								else {
HXLINE( 262)									_this7->maskWidth = (_this7->width - _this7->maskX);
            								}
HXDLIN( 262)								if ((_this7->y < _y2)) {
HXLINE( 262)									if (((_this7->y + _this7->height) <= _y2)) {
HXLINE( 262)										_this7->maskHeight = 0;
HXDLIN( 262)										bool _hx_tmp45;
HXDLIN( 262)										if (_isVisible2) {
HXLINE( 262)											_hx_tmp45 = _this7->isVisible;
            										}
            										else {
HXLINE( 262)											_hx_tmp45 = false;
            										}
HXDLIN( 262)										if (_hx_tmp45) {
HXLINE( 262)											_this7->uiDisplay->remove(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = false;
            									}
            									else {
HXLINE( 262)										_this7->maskY = (_y2 - _this7->y);
HXDLIN( 262)										if (((_this7->y + _this7->height) >= (_y2 + _height2))) {
HXLINE( 262)											_this7->maskHeight = _height2;
            										}
            										else {
HXLINE( 262)											_this7->maskHeight = (_this7->height - _this7->maskY);
            										}
HXDLIN( 262)										bool _hx_tmp46;
HXDLIN( 262)										if (_isVisible2) {
HXLINE( 262)											_hx_tmp46 = !(_this7->isVisible);
            										}
            										else {
HXLINE( 262)											_hx_tmp46 = false;
            										}
HXDLIN( 262)										if (_hx_tmp46) {
HXLINE( 262)											_this7->uiDisplay->add(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = true;
            									}
            								}
            								else {
HXLINE( 262)									if (((_this7->y + _this7->height) > (_y2 + _height2))) {
HXLINE( 262)										if ((_this7->y >= (_y2 + _height2))) {
HXLINE( 262)											_this7->maskHeight = 0;
HXDLIN( 262)											bool _hx_tmp47;
HXDLIN( 262)											if (_isVisible2) {
HXLINE( 262)												_hx_tmp47 = _this7->isVisible;
            											}
            											else {
HXLINE( 262)												_hx_tmp47 = false;
            											}
HXDLIN( 262)											if (_hx_tmp47) {
HXLINE( 262)												_this7->uiDisplay->remove(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = false;
            										}
            										else {
HXLINE( 262)											_this7->maskY = 0;
HXDLIN( 262)											_this7->maskHeight = (_this7->height - ((_this7->y + _this7->height) - (_y2 + _height2)));
HXDLIN( 262)											bool _hx_tmp48;
HXDLIN( 262)											if (_isVisible2) {
HXLINE( 262)												_hx_tmp48 = !(_this7->isVisible);
            											}
            											else {
HXLINE( 262)												_hx_tmp48 = false;
            											}
HXDLIN( 262)											if (_hx_tmp48) {
HXLINE( 262)												_this7->uiDisplay->add(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = true;
            										}
            									}
            									else {
HXLINE( 262)										_this7->maskY = 0;
HXDLIN( 262)										_this7->maskHeight = _this7->height;
HXDLIN( 262)										bool _hx_tmp49;
HXDLIN( 262)										if (_isVisible2) {
HXLINE( 262)											_hx_tmp49 = !(_this7->isVisible);
            										}
            										else {
HXLINE( 262)											_hx_tmp49 = false;
            										}
HXDLIN( 262)										if (_hx_tmp49) {
HXLINE( 262)											_this7->uiDisplay->add(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = true;
            									}
            								}
            							}
            						}
            						else {
HXLINE( 262)							if (((_this7->x + _this7->width) > (_x2 + _width2))) {
HXLINE( 262)								if ((_this7->x >= (_x2 + _width2))) {
HXLINE( 262)									_this7->maskWidth = 0;
HXDLIN( 262)									bool _hx_tmp50;
HXDLIN( 262)									if (_isVisible2) {
HXLINE( 262)										_hx_tmp50 = _this7->isVisible;
            									}
            									else {
HXLINE( 262)										_hx_tmp50 = false;
            									}
HXDLIN( 262)									if (_hx_tmp50) {
HXLINE( 262)										_this7->uiDisplay->remove(_this7);
            									}
HXDLIN( 262)									_hx_tmp43 = false;
            								}
            								else {
HXLINE( 262)									_this7->maskX = 0;
HXDLIN( 262)									_this7->maskWidth = (_this7->width - ((_this7->x + _this7->width) - (_x2 + _width2)));
HXDLIN( 262)									if ((_this7->y < _y2)) {
HXLINE( 262)										if (((_this7->y + _this7->height) <= _y2)) {
HXLINE( 262)											_this7->maskHeight = 0;
HXDLIN( 262)											bool _hx_tmp51;
HXDLIN( 262)											if (_isVisible2) {
HXLINE( 262)												_hx_tmp51 = _this7->isVisible;
            											}
            											else {
HXLINE( 262)												_hx_tmp51 = false;
            											}
HXDLIN( 262)											if (_hx_tmp51) {
HXLINE( 262)												_this7->uiDisplay->remove(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = false;
            										}
            										else {
HXLINE( 262)											_this7->maskY = (_y2 - _this7->y);
HXDLIN( 262)											if (((_this7->y + _this7->height) >= (_y2 + _height2))) {
HXLINE( 262)												_this7->maskHeight = _height2;
            											}
            											else {
HXLINE( 262)												_this7->maskHeight = (_this7->height - _this7->maskY);
            											}
HXDLIN( 262)											bool _hx_tmp52;
HXDLIN( 262)											if (_isVisible2) {
HXLINE( 262)												_hx_tmp52 = !(_this7->isVisible);
            											}
            											else {
HXLINE( 262)												_hx_tmp52 = false;
            											}
HXDLIN( 262)											if (_hx_tmp52) {
HXLINE( 262)												_this7->uiDisplay->add(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = true;
            										}
            									}
            									else {
HXLINE( 262)										if (((_this7->y + _this7->height) > (_y2 + _height2))) {
HXLINE( 262)											if ((_this7->y >= (_y2 + _height2))) {
HXLINE( 262)												_this7->maskHeight = 0;
HXDLIN( 262)												bool _hx_tmp53;
HXDLIN( 262)												if (_isVisible2) {
HXLINE( 262)													_hx_tmp53 = _this7->isVisible;
            												}
            												else {
HXLINE( 262)													_hx_tmp53 = false;
            												}
HXDLIN( 262)												if (_hx_tmp53) {
HXLINE( 262)													_this7->uiDisplay->remove(_this7);
            												}
HXDLIN( 262)												_hx_tmp43 = false;
            											}
            											else {
HXLINE( 262)												_this7->maskY = 0;
HXDLIN( 262)												_this7->maskHeight = (_this7->height - ((_this7->y + _this7->height) - (_y2 + _height2)));
HXDLIN( 262)												bool _hx_tmp54;
HXDLIN( 262)												if (_isVisible2) {
HXLINE( 262)													_hx_tmp54 = !(_this7->isVisible);
            												}
            												else {
HXLINE( 262)													_hx_tmp54 = false;
            												}
HXDLIN( 262)												if (_hx_tmp54) {
HXLINE( 262)													_this7->uiDisplay->add(_this7);
            												}
HXDLIN( 262)												_hx_tmp43 = true;
            											}
            										}
            										else {
HXLINE( 262)											_this7->maskY = 0;
HXDLIN( 262)											_this7->maskHeight = _this7->height;
HXDLIN( 262)											bool _hx_tmp55;
HXDLIN( 262)											if (_isVisible2) {
HXLINE( 262)												_hx_tmp55 = !(_this7->isVisible);
            											}
            											else {
HXLINE( 262)												_hx_tmp55 = false;
            											}
HXDLIN( 262)											if (_hx_tmp55) {
HXLINE( 262)												_this7->uiDisplay->add(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = true;
            										}
            									}
            								}
            							}
            							else {
HXLINE( 262)								_this7->maskX = 0;
HXDLIN( 262)								_this7->maskWidth = _this7->width;
HXDLIN( 262)								if ((_this7->y < _y2)) {
HXLINE( 262)									if (((_this7->y + _this7->height) <= _y2)) {
HXLINE( 262)										_this7->maskHeight = 0;
HXDLIN( 262)										bool _hx_tmp56;
HXDLIN( 262)										if (_isVisible2) {
HXLINE( 262)											_hx_tmp56 = _this7->isVisible;
            										}
            										else {
HXLINE( 262)											_hx_tmp56 = false;
            										}
HXDLIN( 262)										if (_hx_tmp56) {
HXLINE( 262)											_this7->uiDisplay->remove(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = false;
            									}
            									else {
HXLINE( 262)										_this7->maskY = (_y2 - _this7->y);
HXDLIN( 262)										if (((_this7->y + _this7->height) >= (_y2 + _height2))) {
HXLINE( 262)											_this7->maskHeight = _height2;
            										}
            										else {
HXLINE( 262)											_this7->maskHeight = (_this7->height - _this7->maskY);
            										}
HXDLIN( 262)										bool _hx_tmp57;
HXDLIN( 262)										if (_isVisible2) {
HXLINE( 262)											_hx_tmp57 = !(_this7->isVisible);
            										}
            										else {
HXLINE( 262)											_hx_tmp57 = false;
            										}
HXDLIN( 262)										if (_hx_tmp57) {
HXLINE( 262)											_this7->uiDisplay->add(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = true;
            									}
            								}
            								else {
HXLINE( 262)									if (((_this7->y + _this7->height) > (_y2 + _height2))) {
HXLINE( 262)										if ((_this7->y >= (_y2 + _height2))) {
HXLINE( 262)											_this7->maskHeight = 0;
HXDLIN( 262)											bool _hx_tmp58;
HXDLIN( 262)											if (_isVisible2) {
HXLINE( 262)												_hx_tmp58 = _this7->isVisible;
            											}
            											else {
HXLINE( 262)												_hx_tmp58 = false;
            											}
HXDLIN( 262)											if (_hx_tmp58) {
HXLINE( 262)												_this7->uiDisplay->remove(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = false;
            										}
            										else {
HXLINE( 262)											_this7->maskY = 0;
HXDLIN( 262)											_this7->maskHeight = (_this7->height - ((_this7->y + _this7->height) - (_y2 + _height2)));
HXDLIN( 262)											bool _hx_tmp59;
HXDLIN( 262)											if (_isVisible2) {
HXLINE( 262)												_hx_tmp59 = !(_this7->isVisible);
            											}
            											else {
HXLINE( 262)												_hx_tmp59 = false;
            											}
HXDLIN( 262)											if (_hx_tmp59) {
HXLINE( 262)												_this7->uiDisplay->add(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = true;
            										}
            									}
            									else {
HXLINE( 262)										_this7->maskY = 0;
HXDLIN( 262)										_this7->maskHeight = _this7->height;
HXDLIN( 262)										bool _hx_tmp60;
HXDLIN( 262)										if (_isVisible2) {
HXLINE( 262)											_hx_tmp60 = !(_this7->isVisible);
            										}
            										else {
HXLINE( 262)											_hx_tmp60 = false;
            										}
HXDLIN( 262)										if (_hx_tmp60) {
HXLINE( 262)											_this7->uiDisplay->add(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = false;
            									}
            								}
            							}
            						}
            					}
            					else {
HXLINE( 262)						int _x3 = this->x;
HXDLIN( 262)						int _y3 = this->y;
HXDLIN( 262)						int _width3 = this->width;
HXDLIN( 262)						int _height3 = this->height;
HXDLIN( 262)						bool _isVisible3 = this->isVisible;
HXDLIN( 262)						if ((_this7->x < _x3)) {
HXLINE( 262)							if (((_this7->x + _this7->width) <= _x3)) {
HXLINE( 262)								_this7->maskWidth = 0;
HXDLIN( 262)								bool _hx_tmp61;
HXDLIN( 262)								if (_isVisible3) {
HXLINE( 262)									_hx_tmp61 = _this7->isVisible;
            								}
            								else {
HXLINE( 262)									_hx_tmp61 = false;
            								}
HXDLIN( 262)								if (_hx_tmp61) {
HXLINE( 262)									_this7->uiDisplay->remove(_this7);
            								}
HXDLIN( 262)								_hx_tmp43 = false;
            							}
            							else {
HXLINE( 262)								_this7->maskX = (_x3 - _this7->x);
HXDLIN( 262)								if (((_this7->x + _this7->width) >= (_x3 + _width3))) {
HXLINE( 262)									_this7->maskWidth = _width3;
            								}
            								else {
HXLINE( 262)									_this7->maskWidth = (_this7->width - _this7->maskX);
            								}
HXDLIN( 262)								if ((_this7->y < _y3)) {
HXLINE( 262)									if (((_this7->y + _this7->height) <= _y3)) {
HXLINE( 262)										_this7->maskHeight = 0;
HXDLIN( 262)										bool _hx_tmp62;
HXDLIN( 262)										if (_isVisible3) {
HXLINE( 262)											_hx_tmp62 = _this7->isVisible;
            										}
            										else {
HXLINE( 262)											_hx_tmp62 = false;
            										}
HXDLIN( 262)										if (_hx_tmp62) {
HXLINE( 262)											_this7->uiDisplay->remove(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = false;
            									}
            									else {
HXLINE( 262)										_this7->maskY = (_y3 - _this7->y);
HXDLIN( 262)										if (((_this7->y + _this7->height) >= (_y3 + _height3))) {
HXLINE( 262)											_this7->maskHeight = _height3;
            										}
            										else {
HXLINE( 262)											_this7->maskHeight = (_this7->height - _this7->maskY);
            										}
HXDLIN( 262)										bool _hx_tmp63;
HXDLIN( 262)										if (_isVisible3) {
HXLINE( 262)											_hx_tmp63 = !(_this7->isVisible);
            										}
            										else {
HXLINE( 262)											_hx_tmp63 = false;
            										}
HXDLIN( 262)										if (_hx_tmp63) {
HXLINE( 262)											_this7->uiDisplay->add(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = true;
            									}
            								}
            								else {
HXLINE( 262)									if (((_this7->y + _this7->height) > (_y3 + _height3))) {
HXLINE( 262)										if ((_this7->y >= (_y3 + _height3))) {
HXLINE( 262)											_this7->maskHeight = 0;
HXDLIN( 262)											bool _hx_tmp64;
HXDLIN( 262)											if (_isVisible3) {
HXLINE( 262)												_hx_tmp64 = _this7->isVisible;
            											}
            											else {
HXLINE( 262)												_hx_tmp64 = false;
            											}
HXDLIN( 262)											if (_hx_tmp64) {
HXLINE( 262)												_this7->uiDisplay->remove(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = false;
            										}
            										else {
HXLINE( 262)											_this7->maskY = 0;
HXDLIN( 262)											_this7->maskHeight = (_this7->height - ((_this7->y + _this7->height) - (_y3 + _height3)));
HXDLIN( 262)											bool _hx_tmp65;
HXDLIN( 262)											if (_isVisible3) {
HXLINE( 262)												_hx_tmp65 = !(_this7->isVisible);
            											}
            											else {
HXLINE( 262)												_hx_tmp65 = false;
            											}
HXDLIN( 262)											if (_hx_tmp65) {
HXLINE( 262)												_this7->uiDisplay->add(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = true;
            										}
            									}
            									else {
HXLINE( 262)										_this7->maskY = 0;
HXDLIN( 262)										_this7->maskHeight = _this7->height;
HXDLIN( 262)										bool _hx_tmp66;
HXDLIN( 262)										if (_isVisible3) {
HXLINE( 262)											_hx_tmp66 = !(_this7->isVisible);
            										}
            										else {
HXLINE( 262)											_hx_tmp66 = false;
            										}
HXDLIN( 262)										if (_hx_tmp66) {
HXLINE( 262)											_this7->uiDisplay->add(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = true;
            									}
            								}
            							}
            						}
            						else {
HXLINE( 262)							if (((_this7->x + _this7->width) > (_x3 + _width3))) {
HXLINE( 262)								if ((_this7->x >= (_x3 + _width3))) {
HXLINE( 262)									_this7->maskWidth = 0;
HXDLIN( 262)									bool _hx_tmp67;
HXDLIN( 262)									if (_isVisible3) {
HXLINE( 262)										_hx_tmp67 = _this7->isVisible;
            									}
            									else {
HXLINE( 262)										_hx_tmp67 = false;
            									}
HXDLIN( 262)									if (_hx_tmp67) {
HXLINE( 262)										_this7->uiDisplay->remove(_this7);
            									}
HXDLIN( 262)									_hx_tmp43 = false;
            								}
            								else {
HXLINE( 262)									_this7->maskX = 0;
HXDLIN( 262)									_this7->maskWidth = (_this7->width - ((_this7->x + _this7->width) - (_x3 + _width3)));
HXDLIN( 262)									if ((_this7->y < _y3)) {
HXLINE( 262)										if (((_this7->y + _this7->height) <= _y3)) {
HXLINE( 262)											_this7->maskHeight = 0;
HXDLIN( 262)											bool _hx_tmp68;
HXDLIN( 262)											if (_isVisible3) {
HXLINE( 262)												_hx_tmp68 = _this7->isVisible;
            											}
            											else {
HXLINE( 262)												_hx_tmp68 = false;
            											}
HXDLIN( 262)											if (_hx_tmp68) {
HXLINE( 262)												_this7->uiDisplay->remove(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = false;
            										}
            										else {
HXLINE( 262)											_this7->maskY = (_y3 - _this7->y);
HXDLIN( 262)											if (((_this7->y + _this7->height) >= (_y3 + _height3))) {
HXLINE( 262)												_this7->maskHeight = _height3;
            											}
            											else {
HXLINE( 262)												_this7->maskHeight = (_this7->height - _this7->maskY);
            											}
HXDLIN( 262)											bool _hx_tmp69;
HXDLIN( 262)											if (_isVisible3) {
HXLINE( 262)												_hx_tmp69 = !(_this7->isVisible);
            											}
            											else {
HXLINE( 262)												_hx_tmp69 = false;
            											}
HXDLIN( 262)											if (_hx_tmp69) {
HXLINE( 262)												_this7->uiDisplay->add(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = true;
            										}
            									}
            									else {
HXLINE( 262)										if (((_this7->y + _this7->height) > (_y3 + _height3))) {
HXLINE( 262)											if ((_this7->y >= (_y3 + _height3))) {
HXLINE( 262)												_this7->maskHeight = 0;
HXDLIN( 262)												bool _hx_tmp70;
HXDLIN( 262)												if (_isVisible3) {
HXLINE( 262)													_hx_tmp70 = _this7->isVisible;
            												}
            												else {
HXLINE( 262)													_hx_tmp70 = false;
            												}
HXDLIN( 262)												if (_hx_tmp70) {
HXLINE( 262)													_this7->uiDisplay->remove(_this7);
            												}
HXDLIN( 262)												_hx_tmp43 = false;
            											}
            											else {
HXLINE( 262)												_this7->maskY = 0;
HXDLIN( 262)												_this7->maskHeight = (_this7->height - ((_this7->y + _this7->height) - (_y3 + _height3)));
HXDLIN( 262)												bool _hx_tmp71;
HXDLIN( 262)												if (_isVisible3) {
HXLINE( 262)													_hx_tmp71 = !(_this7->isVisible);
            												}
            												else {
HXLINE( 262)													_hx_tmp71 = false;
            												}
HXDLIN( 262)												if (_hx_tmp71) {
HXLINE( 262)													_this7->uiDisplay->add(_this7);
            												}
HXDLIN( 262)												_hx_tmp43 = true;
            											}
            										}
            										else {
HXLINE( 262)											_this7->maskY = 0;
HXDLIN( 262)											_this7->maskHeight = _this7->height;
HXDLIN( 262)											bool _hx_tmp72;
HXDLIN( 262)											if (_isVisible3) {
HXLINE( 262)												_hx_tmp72 = !(_this7->isVisible);
            											}
            											else {
HXLINE( 262)												_hx_tmp72 = false;
            											}
HXDLIN( 262)											if (_hx_tmp72) {
HXLINE( 262)												_this7->uiDisplay->add(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = true;
            										}
            									}
            								}
            							}
            							else {
HXLINE( 262)								_this7->maskX = 0;
HXDLIN( 262)								_this7->maskWidth = _this7->width;
HXDLIN( 262)								if ((_this7->y < _y3)) {
HXLINE( 262)									if (((_this7->y + _this7->height) <= _y3)) {
HXLINE( 262)										_this7->maskHeight = 0;
HXDLIN( 262)										bool _hx_tmp73;
HXDLIN( 262)										if (_isVisible3) {
HXLINE( 262)											_hx_tmp73 = _this7->isVisible;
            										}
            										else {
HXLINE( 262)											_hx_tmp73 = false;
            										}
HXDLIN( 262)										if (_hx_tmp73) {
HXLINE( 262)											_this7->uiDisplay->remove(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = false;
            									}
            									else {
HXLINE( 262)										_this7->maskY = (_y3 - _this7->y);
HXDLIN( 262)										if (((_this7->y + _this7->height) >= (_y3 + _height3))) {
HXLINE( 262)											_this7->maskHeight = _height3;
            										}
            										else {
HXLINE( 262)											_this7->maskHeight = (_this7->height - _this7->maskY);
            										}
HXDLIN( 262)										bool _hx_tmp74;
HXDLIN( 262)										if (_isVisible3) {
HXLINE( 262)											_hx_tmp74 = !(_this7->isVisible);
            										}
            										else {
HXLINE( 262)											_hx_tmp74 = false;
            										}
HXDLIN( 262)										if (_hx_tmp74) {
HXLINE( 262)											_this7->uiDisplay->add(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = true;
            									}
            								}
            								else {
HXLINE( 262)									if (((_this7->y + _this7->height) > (_y3 + _height3))) {
HXLINE( 262)										if ((_this7->y >= (_y3 + _height3))) {
HXLINE( 262)											_this7->maskHeight = 0;
HXDLIN( 262)											bool _hx_tmp75;
HXDLIN( 262)											if (_isVisible3) {
HXLINE( 262)												_hx_tmp75 = _this7->isVisible;
            											}
            											else {
HXLINE( 262)												_hx_tmp75 = false;
            											}
HXDLIN( 262)											if (_hx_tmp75) {
HXLINE( 262)												_this7->uiDisplay->remove(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = false;
            										}
            										else {
HXLINE( 262)											_this7->maskY = 0;
HXDLIN( 262)											_this7->maskHeight = (_this7->height - ((_this7->y + _this7->height) - (_y3 + _height3)));
HXDLIN( 262)											bool _hx_tmp76;
HXDLIN( 262)											if (_isVisible3) {
HXLINE( 262)												_hx_tmp76 = !(_this7->isVisible);
            											}
            											else {
HXLINE( 262)												_hx_tmp76 = false;
            											}
HXDLIN( 262)											if (_hx_tmp76) {
HXLINE( 262)												_this7->uiDisplay->add(_this7);
            											}
HXDLIN( 262)											_hx_tmp43 = true;
            										}
            									}
            									else {
HXLINE( 262)										_this7->maskY = 0;
HXDLIN( 262)										_this7->maskHeight = _this7->height;
HXDLIN( 262)										bool _hx_tmp77;
HXDLIN( 262)										if (_isVisible3) {
HXLINE( 262)											_hx_tmp77 = !(_this7->isVisible);
            										}
            										else {
HXLINE( 262)											_hx_tmp77 = false;
            										}
HXDLIN( 262)										if (_hx_tmp77) {
HXLINE( 262)											_this7->uiDisplay->add(_this7);
            										}
HXDLIN( 262)										_hx_tmp43 = false;
            									}
            								}
            							}
            						}
            					}
HXDLIN( 262)					_this7->masked = _hx_tmp43;
            				}
            			}
HXLINE( 263)			this->dragger->updateLayout();
            		}
            	}


void UISlider_obj::updateVisible(){
            	HX_STACKFRAME(&_hx_pos_f110b15ea9daebc7_268_updateVisible)
HXLINE( 269)		{
HXLINE( 269)			if (::hx::IsNotNull( this->background )) {
HXLINE( 269)				 ::peote::ui::interactive::UIElement _this = this->background;
HXDLIN( 269)				if (::hx::IsNotNull( _this->styleElement )) {
HXLINE( 269)					::peote::ui::style::interfaces::StyleElement_obj::setStyle(_this->styleElement,_this->style);
HXDLIN( 269)					bool _hx_tmp;
HXDLIN( 269)					if (_this->isVisible) {
HXLINE( 269)						_hx_tmp = _this->styleIsVisible;
            					}
            					else {
HXLINE( 269)						_hx_tmp = false;
            					}
HXDLIN( 269)					if (_hx_tmp) {
HXLINE( 269)						::peote::ui::style::interfaces::StyleProgram_obj::update(_this->styleProgram,_this->styleElement);
            					}
            				}
            			}
HXDLIN( 269)			if (::hx::IsNotNull( this->dragger )) {
HXLINE( 269)				 ::peote::ui::interactive::UIElement _this1 = this->dragger;
HXDLIN( 269)				if (::hx::IsNotNull( _this1->styleElement )) {
HXLINE( 269)					::peote::ui::style::interfaces::StyleElement_obj::setStyle(_this1->styleElement,_this1->style);
HXDLIN( 269)					bool _hx_tmp1;
HXDLIN( 269)					if (_this1->isVisible) {
HXLINE( 269)						_hx_tmp1 = _this1->styleIsVisible;
            					}
            					else {
HXLINE( 269)						_hx_tmp1 = false;
            					}
HXDLIN( 269)					if (_hx_tmp1) {
HXLINE( 269)						::peote::ui::style::interfaces::StyleProgram_obj::update(_this1->styleProgram,_this1->styleElement);
            					}
            				}
            			}
            		}
HXLINE( 270)		if (this->isVisible) {
HXLINE( 270)			if (::hx::IsNotNull( this->background )) {
HXLINE( 270)				this->background->x = this->x;
HXDLIN( 270)				this->background->y = this->y;
HXDLIN( 270)				{
HXLINE( 270)					 ::peote::ui::interactive::UIElement _this2 = this->background;
HXDLIN( 270)					int w = this->width;
HXDLIN( 270)					if ((w != _this2->width)) {
HXLINE( 270)						if (::hx::IsNotNull( _this2->resizeWidth )) {
HXLINE( 270)							int oldWidth = _this2->width;
HXDLIN( 270)							_this2->resizeWidth((_this2->width = w),(w - oldWidth));
            						}
            						else {
HXLINE( 270)							_this2->width = w;
            						}
            					}
            				}
HXDLIN( 270)				{
HXLINE( 270)					 ::peote::ui::interactive::UIElement _this3 = this->background;
HXDLIN( 270)					int h = this->height;
HXDLIN( 270)					if ((h != _this3->height)) {
HXLINE( 270)						if (::hx::IsNotNull( _this3->resizeHeight )) {
HXLINE( 270)							int oldHeight = _this3->height;
HXDLIN( 270)							_this3->resizeHeight((_this3->height = h),(h - oldHeight));
            						}
            						else {
HXLINE( 270)							_this3->height = h;
            						}
            					}
            				}
HXDLIN( 270)				{
HXLINE( 270)					 ::peote::ui::interactive::UIElement _this4 = this->background;
HXDLIN( 270)					bool _hx_tmp2;
HXDLIN( 270)					_hx_tmp2 = !(_this4->isDragging);
HXDLIN( 270)					if (_hx_tmp2) {
HXLINE( 270)						bool _hx_tmp3;
HXDLIN( 270)						if (this->masked) {
HXLINE( 270)							int _x = (this->x + this->maskX);
HXDLIN( 270)							int _y = (this->y + this->maskY);
HXDLIN( 270)							int _width = this->maskWidth;
HXDLIN( 270)							int _height = this->maskHeight;
HXDLIN( 270)							bool _isVisible = this->isVisible;
HXDLIN( 270)							if ((_this4->x < _x)) {
HXLINE( 270)								if (((_this4->x + _this4->width) <= _x)) {
HXLINE( 270)									_this4->maskWidth = 0;
HXDLIN( 270)									bool _hx_tmp4;
HXDLIN( 270)									if (_isVisible) {
HXLINE( 270)										_hx_tmp4 = _this4->isVisible;
            									}
            									else {
HXLINE( 270)										_hx_tmp4 = false;
            									}
HXDLIN( 270)									if (_hx_tmp4) {
HXLINE( 270)										_this4->uiDisplay->remove(_this4);
            									}
HXDLIN( 270)									_hx_tmp3 = false;
            								}
            								else {
HXLINE( 270)									_this4->maskX = (_x - _this4->x);
HXDLIN( 270)									if (((_this4->x + _this4->width) >= (_x + _width))) {
HXLINE( 270)										_this4->maskWidth = _width;
            									}
            									else {
HXLINE( 270)										_this4->maskWidth = (_this4->width - _this4->maskX);
            									}
HXDLIN( 270)									if ((_this4->y < _y)) {
HXLINE( 270)										if (((_this4->y + _this4->height) <= _y)) {
HXLINE( 270)											_this4->maskHeight = 0;
HXDLIN( 270)											bool _hx_tmp5;
HXDLIN( 270)											if (_isVisible) {
HXLINE( 270)												_hx_tmp5 = _this4->isVisible;
            											}
            											else {
HXLINE( 270)												_hx_tmp5 = false;
            											}
HXDLIN( 270)											if (_hx_tmp5) {
HXLINE( 270)												_this4->uiDisplay->remove(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = false;
            										}
            										else {
HXLINE( 270)											_this4->maskY = (_y - _this4->y);
HXDLIN( 270)											if (((_this4->y + _this4->height) >= (_y + _height))) {
HXLINE( 270)												_this4->maskHeight = _height;
            											}
            											else {
HXLINE( 270)												_this4->maskHeight = (_this4->height - _this4->maskY);
            											}
HXDLIN( 270)											bool _hx_tmp6;
HXDLIN( 270)											if (_isVisible) {
HXLINE( 270)												_hx_tmp6 = !(_this4->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp6 = false;
            											}
HXDLIN( 270)											if (_hx_tmp6) {
HXLINE( 270)												_this4->uiDisplay->add(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = true;
            										}
            									}
            									else {
HXLINE( 270)										if (((_this4->y + _this4->height) > (_y + _height))) {
HXLINE( 270)											if ((_this4->y >= (_y + _height))) {
HXLINE( 270)												_this4->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp7;
HXDLIN( 270)												if (_isVisible) {
HXLINE( 270)													_hx_tmp7 = _this4->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp7 = false;
            												}
HXDLIN( 270)												if (_hx_tmp7) {
HXLINE( 270)													_this4->uiDisplay->remove(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = false;
            											}
            											else {
HXLINE( 270)												_this4->maskY = 0;
HXDLIN( 270)												_this4->maskHeight = (_this4->height - ((_this4->y + _this4->height) - (_y + _height)));
HXDLIN( 270)												bool _hx_tmp8;
HXDLIN( 270)												if (_isVisible) {
HXLINE( 270)													_hx_tmp8 = !(_this4->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp8 = false;
            												}
HXDLIN( 270)												if (_hx_tmp8) {
HXLINE( 270)													_this4->uiDisplay->add(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = true;
            											}
            										}
            										else {
HXLINE( 270)											_this4->maskY = 0;
HXDLIN( 270)											_this4->maskHeight = _this4->height;
HXDLIN( 270)											bool _hx_tmp9;
HXDLIN( 270)											if (_isVisible) {
HXLINE( 270)												_hx_tmp9 = !(_this4->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp9 = false;
            											}
HXDLIN( 270)											if (_hx_tmp9) {
HXLINE( 270)												_this4->uiDisplay->add(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = true;
            										}
            									}
            								}
            							}
            							else {
HXLINE( 270)								if (((_this4->x + _this4->width) > (_x + _width))) {
HXLINE( 270)									if ((_this4->x >= (_x + _width))) {
HXLINE( 270)										_this4->maskWidth = 0;
HXDLIN( 270)										bool _hx_tmp10;
HXDLIN( 270)										if (_isVisible) {
HXLINE( 270)											_hx_tmp10 = _this4->isVisible;
            										}
            										else {
HXLINE( 270)											_hx_tmp10 = false;
            										}
HXDLIN( 270)										if (_hx_tmp10) {
HXLINE( 270)											_this4->uiDisplay->remove(_this4);
            										}
HXDLIN( 270)										_hx_tmp3 = false;
            									}
            									else {
HXLINE( 270)										_this4->maskX = 0;
HXDLIN( 270)										_this4->maskWidth = (_this4->width - ((_this4->x + _this4->width) - (_x + _width)));
HXDLIN( 270)										if ((_this4->y < _y)) {
HXLINE( 270)											if (((_this4->y + _this4->height) <= _y)) {
HXLINE( 270)												_this4->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp11;
HXDLIN( 270)												if (_isVisible) {
HXLINE( 270)													_hx_tmp11 = _this4->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp11 = false;
            												}
HXDLIN( 270)												if (_hx_tmp11) {
HXLINE( 270)													_this4->uiDisplay->remove(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = false;
            											}
            											else {
HXLINE( 270)												_this4->maskY = (_y - _this4->y);
HXDLIN( 270)												if (((_this4->y + _this4->height) >= (_y + _height))) {
HXLINE( 270)													_this4->maskHeight = _height;
            												}
            												else {
HXLINE( 270)													_this4->maskHeight = (_this4->height - _this4->maskY);
            												}
HXDLIN( 270)												bool _hx_tmp12;
HXDLIN( 270)												if (_isVisible) {
HXLINE( 270)													_hx_tmp12 = !(_this4->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp12 = false;
            												}
HXDLIN( 270)												if (_hx_tmp12) {
HXLINE( 270)													_this4->uiDisplay->add(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = true;
            											}
            										}
            										else {
HXLINE( 270)											if (((_this4->y + _this4->height) > (_y + _height))) {
HXLINE( 270)												if ((_this4->y >= (_y + _height))) {
HXLINE( 270)													_this4->maskHeight = 0;
HXDLIN( 270)													bool _hx_tmp13;
HXDLIN( 270)													if (_isVisible) {
HXLINE( 270)														_hx_tmp13 = _this4->isVisible;
            													}
            													else {
HXLINE( 270)														_hx_tmp13 = false;
            													}
HXDLIN( 270)													if (_hx_tmp13) {
HXLINE( 270)														_this4->uiDisplay->remove(_this4);
            													}
HXDLIN( 270)													_hx_tmp3 = false;
            												}
            												else {
HXLINE( 270)													_this4->maskY = 0;
HXDLIN( 270)													_this4->maskHeight = (_this4->height - ((_this4->y + _this4->height) - (_y + _height)));
HXDLIN( 270)													bool _hx_tmp14;
HXDLIN( 270)													if (_isVisible) {
HXLINE( 270)														_hx_tmp14 = !(_this4->isVisible);
            													}
            													else {
HXLINE( 270)														_hx_tmp14 = false;
            													}
HXDLIN( 270)													if (_hx_tmp14) {
HXLINE( 270)														_this4->uiDisplay->add(_this4);
            													}
HXDLIN( 270)													_hx_tmp3 = true;
            												}
            											}
            											else {
HXLINE( 270)												_this4->maskY = 0;
HXDLIN( 270)												_this4->maskHeight = _this4->height;
HXDLIN( 270)												bool _hx_tmp15;
HXDLIN( 270)												if (_isVisible) {
HXLINE( 270)													_hx_tmp15 = !(_this4->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp15 = false;
            												}
HXDLIN( 270)												if (_hx_tmp15) {
HXLINE( 270)													_this4->uiDisplay->add(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = true;
            											}
            										}
            									}
            								}
            								else {
HXLINE( 270)									_this4->maskX = 0;
HXDLIN( 270)									_this4->maskWidth = _this4->width;
HXDLIN( 270)									if ((_this4->y < _y)) {
HXLINE( 270)										if (((_this4->y + _this4->height) <= _y)) {
HXLINE( 270)											_this4->maskHeight = 0;
HXDLIN( 270)											bool _hx_tmp16;
HXDLIN( 270)											if (_isVisible) {
HXLINE( 270)												_hx_tmp16 = _this4->isVisible;
            											}
            											else {
HXLINE( 270)												_hx_tmp16 = false;
            											}
HXDLIN( 270)											if (_hx_tmp16) {
HXLINE( 270)												_this4->uiDisplay->remove(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = false;
            										}
            										else {
HXLINE( 270)											_this4->maskY = (_y - _this4->y);
HXDLIN( 270)											if (((_this4->y + _this4->height) >= (_y + _height))) {
HXLINE( 270)												_this4->maskHeight = _height;
            											}
            											else {
HXLINE( 270)												_this4->maskHeight = (_this4->height - _this4->maskY);
            											}
HXDLIN( 270)											bool _hx_tmp17;
HXDLIN( 270)											if (_isVisible) {
HXLINE( 270)												_hx_tmp17 = !(_this4->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp17 = false;
            											}
HXDLIN( 270)											if (_hx_tmp17) {
HXLINE( 270)												_this4->uiDisplay->add(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = true;
            										}
            									}
            									else {
HXLINE( 270)										if (((_this4->y + _this4->height) > (_y + _height))) {
HXLINE( 270)											if ((_this4->y >= (_y + _height))) {
HXLINE( 270)												_this4->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp18;
HXDLIN( 270)												if (_isVisible) {
HXLINE( 270)													_hx_tmp18 = _this4->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp18 = false;
            												}
HXDLIN( 270)												if (_hx_tmp18) {
HXLINE( 270)													_this4->uiDisplay->remove(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = false;
            											}
            											else {
HXLINE( 270)												_this4->maskY = 0;
HXDLIN( 270)												_this4->maskHeight = (_this4->height - ((_this4->y + _this4->height) - (_y + _height)));
HXDLIN( 270)												bool _hx_tmp19;
HXDLIN( 270)												if (_isVisible) {
HXLINE( 270)													_hx_tmp19 = !(_this4->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp19 = false;
            												}
HXDLIN( 270)												if (_hx_tmp19) {
HXLINE( 270)													_this4->uiDisplay->add(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = true;
            											}
            										}
            										else {
HXLINE( 270)											_this4->maskY = 0;
HXDLIN( 270)											_this4->maskHeight = _this4->height;
HXDLIN( 270)											bool _hx_tmp20;
HXDLIN( 270)											if (_isVisible) {
HXLINE( 270)												_hx_tmp20 = !(_this4->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp20 = false;
            											}
HXDLIN( 270)											if (_hx_tmp20) {
HXLINE( 270)												_this4->uiDisplay->add(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = false;
            										}
            									}
            								}
            							}
            						}
            						else {
HXLINE( 270)							int _x1 = this->x;
HXDLIN( 270)							int _y1 = this->y;
HXDLIN( 270)							int _width1 = this->width;
HXDLIN( 270)							int _height1 = this->height;
HXDLIN( 270)							bool _isVisible1 = this->isVisible;
HXDLIN( 270)							if ((_this4->x < _x1)) {
HXLINE( 270)								if (((_this4->x + _this4->width) <= _x1)) {
HXLINE( 270)									_this4->maskWidth = 0;
HXDLIN( 270)									bool _hx_tmp21;
HXDLIN( 270)									if (_isVisible1) {
HXLINE( 270)										_hx_tmp21 = _this4->isVisible;
            									}
            									else {
HXLINE( 270)										_hx_tmp21 = false;
            									}
HXDLIN( 270)									if (_hx_tmp21) {
HXLINE( 270)										_this4->uiDisplay->remove(_this4);
            									}
HXDLIN( 270)									_hx_tmp3 = false;
            								}
            								else {
HXLINE( 270)									_this4->maskX = (_x1 - _this4->x);
HXDLIN( 270)									if (((_this4->x + _this4->width) >= (_x1 + _width1))) {
HXLINE( 270)										_this4->maskWidth = _width1;
            									}
            									else {
HXLINE( 270)										_this4->maskWidth = (_this4->width - _this4->maskX);
            									}
HXDLIN( 270)									if ((_this4->y < _y1)) {
HXLINE( 270)										if (((_this4->y + _this4->height) <= _y1)) {
HXLINE( 270)											_this4->maskHeight = 0;
HXDLIN( 270)											bool _hx_tmp22;
HXDLIN( 270)											if (_isVisible1) {
HXLINE( 270)												_hx_tmp22 = _this4->isVisible;
            											}
            											else {
HXLINE( 270)												_hx_tmp22 = false;
            											}
HXDLIN( 270)											if (_hx_tmp22) {
HXLINE( 270)												_this4->uiDisplay->remove(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = false;
            										}
            										else {
HXLINE( 270)											_this4->maskY = (_y1 - _this4->y);
HXDLIN( 270)											if (((_this4->y + _this4->height) >= (_y1 + _height1))) {
HXLINE( 270)												_this4->maskHeight = _height1;
            											}
            											else {
HXLINE( 270)												_this4->maskHeight = (_this4->height - _this4->maskY);
            											}
HXDLIN( 270)											bool _hx_tmp23;
HXDLIN( 270)											if (_isVisible1) {
HXLINE( 270)												_hx_tmp23 = !(_this4->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp23 = false;
            											}
HXDLIN( 270)											if (_hx_tmp23) {
HXLINE( 270)												_this4->uiDisplay->add(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = true;
            										}
            									}
            									else {
HXLINE( 270)										if (((_this4->y + _this4->height) > (_y1 + _height1))) {
HXLINE( 270)											if ((_this4->y >= (_y1 + _height1))) {
HXLINE( 270)												_this4->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp24;
HXDLIN( 270)												if (_isVisible1) {
HXLINE( 270)													_hx_tmp24 = _this4->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp24 = false;
            												}
HXDLIN( 270)												if (_hx_tmp24) {
HXLINE( 270)													_this4->uiDisplay->remove(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = false;
            											}
            											else {
HXLINE( 270)												_this4->maskY = 0;
HXDLIN( 270)												_this4->maskHeight = (_this4->height - ((_this4->y + _this4->height) - (_y1 + _height1)));
HXDLIN( 270)												bool _hx_tmp25;
HXDLIN( 270)												if (_isVisible1) {
HXLINE( 270)													_hx_tmp25 = !(_this4->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp25 = false;
            												}
HXDLIN( 270)												if (_hx_tmp25) {
HXLINE( 270)													_this4->uiDisplay->add(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = true;
            											}
            										}
            										else {
HXLINE( 270)											_this4->maskY = 0;
HXDLIN( 270)											_this4->maskHeight = _this4->height;
HXDLIN( 270)											bool _hx_tmp26;
HXDLIN( 270)											if (_isVisible1) {
HXLINE( 270)												_hx_tmp26 = !(_this4->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp26 = false;
            											}
HXDLIN( 270)											if (_hx_tmp26) {
HXLINE( 270)												_this4->uiDisplay->add(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = true;
            										}
            									}
            								}
            							}
            							else {
HXLINE( 270)								if (((_this4->x + _this4->width) > (_x1 + _width1))) {
HXLINE( 270)									if ((_this4->x >= (_x1 + _width1))) {
HXLINE( 270)										_this4->maskWidth = 0;
HXDLIN( 270)										bool _hx_tmp27;
HXDLIN( 270)										if (_isVisible1) {
HXLINE( 270)											_hx_tmp27 = _this4->isVisible;
            										}
            										else {
HXLINE( 270)											_hx_tmp27 = false;
            										}
HXDLIN( 270)										if (_hx_tmp27) {
HXLINE( 270)											_this4->uiDisplay->remove(_this4);
            										}
HXDLIN( 270)										_hx_tmp3 = false;
            									}
            									else {
HXLINE( 270)										_this4->maskX = 0;
HXDLIN( 270)										_this4->maskWidth = (_this4->width - ((_this4->x + _this4->width) - (_x1 + _width1)));
HXDLIN( 270)										if ((_this4->y < _y1)) {
HXLINE( 270)											if (((_this4->y + _this4->height) <= _y1)) {
HXLINE( 270)												_this4->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp28;
HXDLIN( 270)												if (_isVisible1) {
HXLINE( 270)													_hx_tmp28 = _this4->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp28 = false;
            												}
HXDLIN( 270)												if (_hx_tmp28) {
HXLINE( 270)													_this4->uiDisplay->remove(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = false;
            											}
            											else {
HXLINE( 270)												_this4->maskY = (_y1 - _this4->y);
HXDLIN( 270)												if (((_this4->y + _this4->height) >= (_y1 + _height1))) {
HXLINE( 270)													_this4->maskHeight = _height1;
            												}
            												else {
HXLINE( 270)													_this4->maskHeight = (_this4->height - _this4->maskY);
            												}
HXDLIN( 270)												bool _hx_tmp29;
HXDLIN( 270)												if (_isVisible1) {
HXLINE( 270)													_hx_tmp29 = !(_this4->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp29 = false;
            												}
HXDLIN( 270)												if (_hx_tmp29) {
HXLINE( 270)													_this4->uiDisplay->add(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = true;
            											}
            										}
            										else {
HXLINE( 270)											if (((_this4->y + _this4->height) > (_y1 + _height1))) {
HXLINE( 270)												if ((_this4->y >= (_y1 + _height1))) {
HXLINE( 270)													_this4->maskHeight = 0;
HXDLIN( 270)													bool _hx_tmp30;
HXDLIN( 270)													if (_isVisible1) {
HXLINE( 270)														_hx_tmp30 = _this4->isVisible;
            													}
            													else {
HXLINE( 270)														_hx_tmp30 = false;
            													}
HXDLIN( 270)													if (_hx_tmp30) {
HXLINE( 270)														_this4->uiDisplay->remove(_this4);
            													}
HXDLIN( 270)													_hx_tmp3 = false;
            												}
            												else {
HXLINE( 270)													_this4->maskY = 0;
HXDLIN( 270)													_this4->maskHeight = (_this4->height - ((_this4->y + _this4->height) - (_y1 + _height1)));
HXDLIN( 270)													bool _hx_tmp31;
HXDLIN( 270)													if (_isVisible1) {
HXLINE( 270)														_hx_tmp31 = !(_this4->isVisible);
            													}
            													else {
HXLINE( 270)														_hx_tmp31 = false;
            													}
HXDLIN( 270)													if (_hx_tmp31) {
HXLINE( 270)														_this4->uiDisplay->add(_this4);
            													}
HXDLIN( 270)													_hx_tmp3 = true;
            												}
            											}
            											else {
HXLINE( 270)												_this4->maskY = 0;
HXDLIN( 270)												_this4->maskHeight = _this4->height;
HXDLIN( 270)												bool _hx_tmp32;
HXDLIN( 270)												if (_isVisible1) {
HXLINE( 270)													_hx_tmp32 = !(_this4->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp32 = false;
            												}
HXDLIN( 270)												if (_hx_tmp32) {
HXLINE( 270)													_this4->uiDisplay->add(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = true;
            											}
            										}
            									}
            								}
            								else {
HXLINE( 270)									_this4->maskX = 0;
HXDLIN( 270)									_this4->maskWidth = _this4->width;
HXDLIN( 270)									if ((_this4->y < _y1)) {
HXLINE( 270)										if (((_this4->y + _this4->height) <= _y1)) {
HXLINE( 270)											_this4->maskHeight = 0;
HXDLIN( 270)											bool _hx_tmp33;
HXDLIN( 270)											if (_isVisible1) {
HXLINE( 270)												_hx_tmp33 = _this4->isVisible;
            											}
            											else {
HXLINE( 270)												_hx_tmp33 = false;
            											}
HXDLIN( 270)											if (_hx_tmp33) {
HXLINE( 270)												_this4->uiDisplay->remove(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = false;
            										}
            										else {
HXLINE( 270)											_this4->maskY = (_y1 - _this4->y);
HXDLIN( 270)											if (((_this4->y + _this4->height) >= (_y1 + _height1))) {
HXLINE( 270)												_this4->maskHeight = _height1;
            											}
            											else {
HXLINE( 270)												_this4->maskHeight = (_this4->height - _this4->maskY);
            											}
HXDLIN( 270)											bool _hx_tmp34;
HXDLIN( 270)											if (_isVisible1) {
HXLINE( 270)												_hx_tmp34 = !(_this4->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp34 = false;
            											}
HXDLIN( 270)											if (_hx_tmp34) {
HXLINE( 270)												_this4->uiDisplay->add(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = true;
            										}
            									}
            									else {
HXLINE( 270)										if (((_this4->y + _this4->height) > (_y1 + _height1))) {
HXLINE( 270)											if ((_this4->y >= (_y1 + _height1))) {
HXLINE( 270)												_this4->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp35;
HXDLIN( 270)												if (_isVisible1) {
HXLINE( 270)													_hx_tmp35 = _this4->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp35 = false;
            												}
HXDLIN( 270)												if (_hx_tmp35) {
HXLINE( 270)													_this4->uiDisplay->remove(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = false;
            											}
            											else {
HXLINE( 270)												_this4->maskY = 0;
HXDLIN( 270)												_this4->maskHeight = (_this4->height - ((_this4->y + _this4->height) - (_y1 + _height1)));
HXDLIN( 270)												bool _hx_tmp36;
HXDLIN( 270)												if (_isVisible1) {
HXLINE( 270)													_hx_tmp36 = !(_this4->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp36 = false;
            												}
HXDLIN( 270)												if (_hx_tmp36) {
HXLINE( 270)													_this4->uiDisplay->add(_this4);
            												}
HXDLIN( 270)												_hx_tmp3 = true;
            											}
            										}
            										else {
HXLINE( 270)											_this4->maskY = 0;
HXDLIN( 270)											_this4->maskHeight = _this4->height;
HXDLIN( 270)											bool _hx_tmp37;
HXDLIN( 270)											if (_isVisible1) {
HXLINE( 270)												_hx_tmp37 = !(_this4->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp37 = false;
            											}
HXDLIN( 270)											if (_hx_tmp37) {
HXLINE( 270)												_this4->uiDisplay->add(_this4);
            											}
HXDLIN( 270)											_hx_tmp3 = false;
            										}
            									}
            								}
            							}
            						}
HXDLIN( 270)						_this4->masked = _hx_tmp3;
            					}
            				}
HXDLIN( 270)				this->background->updateLayout();
            			}
HXDLIN( 270)			if (::hx::IsNotNull( this->dragger )) {
HXLINE( 270)				{
HXLINE( 270)					 ::peote::ui::interactive::UIElement _this5 = this->dragger;
HXDLIN( 270)					int w1 = this->width;
HXDLIN( 270)					int w2;
HXDLIN( 270)					if (this->isVertical) {
HXLINE( 270)						w2 = w1;
            					}
            					else {
HXLINE( 270)						if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 270)							if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 270)								w2 = ( (int)(this->draggerLength) );
            							}
            							else {
HXLINE( 270)								w2 = this->height;
            							}
            						}
            						else {
HXLINE( 270)							Float w3;
HXDLIN( 270)							if (::hx::IsNull( this->draggerLength )) {
HXLINE( 270)								w3 = (( (Float)(((w1 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            							}
            							else {
HXLINE( 270)								w3 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w1 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            							}
HXDLIN( 270)							w2 = ::Std_obj::_hx_int(w3);
            						}
            					}
HXDLIN( 270)					if ((w2 != _this5->width)) {
HXLINE( 270)						if (::hx::IsNotNull( _this5->resizeWidth )) {
HXLINE( 270)							int oldWidth1 = _this5->width;
HXDLIN( 270)							_this5->resizeWidth((_this5->width = w2),(w2 - oldWidth1));
            						}
            						else {
HXLINE( 270)							_this5->width = w2;
            						}
            					}
            				}
HXDLIN( 270)				{
HXLINE( 270)					 ::peote::ui::interactive::UIElement _this6 = this->dragger;
HXDLIN( 270)					int w4 = this->height;
HXDLIN( 270)					int h1;
HXDLIN( 270)					if (!(this->isVertical)) {
HXLINE( 270)						h1 = w4;
            					}
            					else {
HXLINE( 270)						if (::hx::IsNull( this->draggerLengthPercent )) {
HXLINE( 270)							if (::hx::IsNotNull( this->draggerLength )) {
HXLINE( 270)								h1 = ( (int)(this->draggerLength) );
            							}
            							else {
HXLINE( 270)								h1 = this->width;
            							}
            						}
            						else {
HXLINE( 270)							Float h2;
HXDLIN( 270)							if (::hx::IsNull( this->draggerLength )) {
HXLINE( 270)								h2 = (( (Float)(((w4 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) ));
            							}
            							else {
HXLINE( 270)								h2 = ::Math_obj::max(( (Float)(this->draggerLength) ),(( (Float)(((w4 - this->draggSpaceStart) - this->draggSpaceEnd)) ) * ( (Float)(this->draggerLengthPercent) )));
            							}
HXDLIN( 270)							h1 = ::Std_obj::_hx_int(h2);
            						}
            					}
HXDLIN( 270)					if ((h1 != _this6->height)) {
HXLINE( 270)						if (::hx::IsNotNull( _this6->resizeHeight )) {
HXLINE( 270)							int oldHeight1 = _this6->height;
HXDLIN( 270)							_this6->resizeHeight((_this6->height = h1),(h1 - oldHeight1));
            						}
            						else {
HXLINE( 270)							_this6->height = h1;
            						}
            					}
            				}
HXDLIN( 270)				int pos = this->x;
HXDLIN( 270)				int _hx_tmp38;
HXDLIN( 270)				if (this->isVertical) {
HXLINE( 270)					_hx_tmp38 = pos;
            				}
            				else {
HXLINE( 270)					int _hx_tmp39 = (pos + this->draggSpaceStart);
HXDLIN( 270)					Float _hx_tmp40;
HXDLIN( 270)					if (this->reverse) {
HXLINE( 270)						_hx_tmp40 = (((Float)1.0) - this->_percent);
            					}
            					else {
HXLINE( 270)						_hx_tmp40 = this->_percent;
            					}
HXDLIN( 270)					_hx_tmp38 = (_hx_tmp39 + ::Std_obj::_hx_int((( (Float)((((this->width - this->dragger->width) - this->draggSpaceStart) - this->draggSpaceEnd)) ) * _hx_tmp40)));
            				}
HXDLIN( 270)				this->dragger->x = _hx_tmp38;
HXDLIN( 270)				int pos1 = this->y;
HXDLIN( 270)				int _hx_tmp41;
HXDLIN( 270)				if (!(this->isVertical)) {
HXLINE( 270)					_hx_tmp41 = pos1;
            				}
            				else {
HXLINE( 270)					int _hx_tmp42 = (pos1 + this->draggSpaceStart);
HXDLIN( 270)					Float _hx_tmp43;
HXDLIN( 270)					if (this->reverse) {
HXLINE( 270)						_hx_tmp43 = (((Float)1.0) - this->_percent);
            					}
            					else {
HXLINE( 270)						_hx_tmp43 = this->_percent;
            					}
HXDLIN( 270)					_hx_tmp41 = (_hx_tmp42 + ::Std_obj::_hx_int((( (Float)((((this->height - this->dragger->height) - this->draggSpaceStart) - this->draggSpaceEnd)) ) * _hx_tmp43)));
            				}
HXDLIN( 270)				this->dragger->y = _hx_tmp41;
HXDLIN( 270)				if (this->isVertical) {
HXLINE( 270)					 ::peote::ui::interactive::UIElement _this7 = this->dragger;
HXDLIN( 270)					int dragAreaX = this->dragger->x;
HXDLIN( 270)					int dragAreaY = (this->y + this->draggSpaceStart);
HXDLIN( 270)					_this7->dragMinX = dragAreaX;
HXDLIN( 270)					_this7->dragMinY = dragAreaY;
HXDLIN( 270)					_this7->dragMaxX = (dragAreaX + this->dragger->width);
HXDLIN( 270)					_this7->dragMaxY = (dragAreaY + ((this->height - this->draggSpaceStart) - this->draggSpaceEnd));
            				}
            				else {
HXLINE( 270)					 ::peote::ui::interactive::UIElement _this8 = this->dragger;
HXDLIN( 270)					int dragAreaX1 = (this->x + this->draggSpaceStart);
HXDLIN( 270)					int dragAreaY1 = this->dragger->y;
HXDLIN( 270)					_this8->dragMinX = dragAreaX1;
HXDLIN( 270)					_this8->dragMinY = dragAreaY1;
HXDLIN( 270)					_this8->dragMaxX = (dragAreaX1 + ((this->width - this->draggSpaceStart) - this->draggSpaceEnd));
HXDLIN( 270)					_this8->dragMaxY = (dragAreaY1 + this->dragger->height);
            				}
HXDLIN( 270)				{
HXLINE( 270)					 ::peote::ui::interactive::UIElement _this9 = this->dragger;
HXDLIN( 270)					bool _hx_tmp44;
HXDLIN( 270)					_hx_tmp44 = !(_this9->isDragging);
HXDLIN( 270)					if (_hx_tmp44) {
HXLINE( 270)						bool _hx_tmp45;
HXDLIN( 270)						if (this->masked) {
HXLINE( 270)							int _x2 = (this->x + this->maskX);
HXDLIN( 270)							int _y2 = (this->y + this->maskY);
HXDLIN( 270)							int _width2 = this->maskWidth;
HXDLIN( 270)							int _height2 = this->maskHeight;
HXDLIN( 270)							bool _isVisible2 = this->isVisible;
HXDLIN( 270)							if ((_this9->x < _x2)) {
HXLINE( 270)								if (((_this9->x + _this9->width) <= _x2)) {
HXLINE( 270)									_this9->maskWidth = 0;
HXDLIN( 270)									bool _hx_tmp46;
HXDLIN( 270)									if (_isVisible2) {
HXLINE( 270)										_hx_tmp46 = _this9->isVisible;
            									}
            									else {
HXLINE( 270)										_hx_tmp46 = false;
            									}
HXDLIN( 270)									if (_hx_tmp46) {
HXLINE( 270)										_this9->uiDisplay->remove(_this9);
            									}
HXDLIN( 270)									_hx_tmp45 = false;
            								}
            								else {
HXLINE( 270)									_this9->maskX = (_x2 - _this9->x);
HXDLIN( 270)									if (((_this9->x + _this9->width) >= (_x2 + _width2))) {
HXLINE( 270)										_this9->maskWidth = _width2;
            									}
            									else {
HXLINE( 270)										_this9->maskWidth = (_this9->width - _this9->maskX);
            									}
HXDLIN( 270)									if ((_this9->y < _y2)) {
HXLINE( 270)										if (((_this9->y + _this9->height) <= _y2)) {
HXLINE( 270)											_this9->maskHeight = 0;
HXDLIN( 270)											bool _hx_tmp47;
HXDLIN( 270)											if (_isVisible2) {
HXLINE( 270)												_hx_tmp47 = _this9->isVisible;
            											}
            											else {
HXLINE( 270)												_hx_tmp47 = false;
            											}
HXDLIN( 270)											if (_hx_tmp47) {
HXLINE( 270)												_this9->uiDisplay->remove(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = false;
            										}
            										else {
HXLINE( 270)											_this9->maskY = (_y2 - _this9->y);
HXDLIN( 270)											if (((_this9->y + _this9->height) >= (_y2 + _height2))) {
HXLINE( 270)												_this9->maskHeight = _height2;
            											}
            											else {
HXLINE( 270)												_this9->maskHeight = (_this9->height - _this9->maskY);
            											}
HXDLIN( 270)											bool _hx_tmp48;
HXDLIN( 270)											if (_isVisible2) {
HXLINE( 270)												_hx_tmp48 = !(_this9->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp48 = false;
            											}
HXDLIN( 270)											if (_hx_tmp48) {
HXLINE( 270)												_this9->uiDisplay->add(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = true;
            										}
            									}
            									else {
HXLINE( 270)										if (((_this9->y + _this9->height) > (_y2 + _height2))) {
HXLINE( 270)											if ((_this9->y >= (_y2 + _height2))) {
HXLINE( 270)												_this9->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp49;
HXDLIN( 270)												if (_isVisible2) {
HXLINE( 270)													_hx_tmp49 = _this9->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp49 = false;
            												}
HXDLIN( 270)												if (_hx_tmp49) {
HXLINE( 270)													_this9->uiDisplay->remove(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = false;
            											}
            											else {
HXLINE( 270)												_this9->maskY = 0;
HXDLIN( 270)												_this9->maskHeight = (_this9->height - ((_this9->y + _this9->height) - (_y2 + _height2)));
HXDLIN( 270)												bool _hx_tmp50;
HXDLIN( 270)												if (_isVisible2) {
HXLINE( 270)													_hx_tmp50 = !(_this9->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp50 = false;
            												}
HXDLIN( 270)												if (_hx_tmp50) {
HXLINE( 270)													_this9->uiDisplay->add(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = true;
            											}
            										}
            										else {
HXLINE( 270)											_this9->maskY = 0;
HXDLIN( 270)											_this9->maskHeight = _this9->height;
HXDLIN( 270)											bool _hx_tmp51;
HXDLIN( 270)											if (_isVisible2) {
HXLINE( 270)												_hx_tmp51 = !(_this9->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp51 = false;
            											}
HXDLIN( 270)											if (_hx_tmp51) {
HXLINE( 270)												_this9->uiDisplay->add(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = true;
            										}
            									}
            								}
            							}
            							else {
HXLINE( 270)								if (((_this9->x + _this9->width) > (_x2 + _width2))) {
HXLINE( 270)									if ((_this9->x >= (_x2 + _width2))) {
HXLINE( 270)										_this9->maskWidth = 0;
HXDLIN( 270)										bool _hx_tmp52;
HXDLIN( 270)										if (_isVisible2) {
HXLINE( 270)											_hx_tmp52 = _this9->isVisible;
            										}
            										else {
HXLINE( 270)											_hx_tmp52 = false;
            										}
HXDLIN( 270)										if (_hx_tmp52) {
HXLINE( 270)											_this9->uiDisplay->remove(_this9);
            										}
HXDLIN( 270)										_hx_tmp45 = false;
            									}
            									else {
HXLINE( 270)										_this9->maskX = 0;
HXDLIN( 270)										_this9->maskWidth = (_this9->width - ((_this9->x + _this9->width) - (_x2 + _width2)));
HXDLIN( 270)										if ((_this9->y < _y2)) {
HXLINE( 270)											if (((_this9->y + _this9->height) <= _y2)) {
HXLINE( 270)												_this9->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp53;
HXDLIN( 270)												if (_isVisible2) {
HXLINE( 270)													_hx_tmp53 = _this9->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp53 = false;
            												}
HXDLIN( 270)												if (_hx_tmp53) {
HXLINE( 270)													_this9->uiDisplay->remove(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = false;
            											}
            											else {
HXLINE( 270)												_this9->maskY = (_y2 - _this9->y);
HXDLIN( 270)												if (((_this9->y + _this9->height) >= (_y2 + _height2))) {
HXLINE( 270)													_this9->maskHeight = _height2;
            												}
            												else {
HXLINE( 270)													_this9->maskHeight = (_this9->height - _this9->maskY);
            												}
HXDLIN( 270)												bool _hx_tmp54;
HXDLIN( 270)												if (_isVisible2) {
HXLINE( 270)													_hx_tmp54 = !(_this9->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp54 = false;
            												}
HXDLIN( 270)												if (_hx_tmp54) {
HXLINE( 270)													_this9->uiDisplay->add(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = true;
            											}
            										}
            										else {
HXLINE( 270)											if (((_this9->y + _this9->height) > (_y2 + _height2))) {
HXLINE( 270)												if ((_this9->y >= (_y2 + _height2))) {
HXLINE( 270)													_this9->maskHeight = 0;
HXDLIN( 270)													bool _hx_tmp55;
HXDLIN( 270)													if (_isVisible2) {
HXLINE( 270)														_hx_tmp55 = _this9->isVisible;
            													}
            													else {
HXLINE( 270)														_hx_tmp55 = false;
            													}
HXDLIN( 270)													if (_hx_tmp55) {
HXLINE( 270)														_this9->uiDisplay->remove(_this9);
            													}
HXDLIN( 270)													_hx_tmp45 = false;
            												}
            												else {
HXLINE( 270)													_this9->maskY = 0;
HXDLIN( 270)													_this9->maskHeight = (_this9->height - ((_this9->y + _this9->height) - (_y2 + _height2)));
HXDLIN( 270)													bool _hx_tmp56;
HXDLIN( 270)													if (_isVisible2) {
HXLINE( 270)														_hx_tmp56 = !(_this9->isVisible);
            													}
            													else {
HXLINE( 270)														_hx_tmp56 = false;
            													}
HXDLIN( 270)													if (_hx_tmp56) {
HXLINE( 270)														_this9->uiDisplay->add(_this9);
            													}
HXDLIN( 270)													_hx_tmp45 = true;
            												}
            											}
            											else {
HXLINE( 270)												_this9->maskY = 0;
HXDLIN( 270)												_this9->maskHeight = _this9->height;
HXDLIN( 270)												bool _hx_tmp57;
HXDLIN( 270)												if (_isVisible2) {
HXLINE( 270)													_hx_tmp57 = !(_this9->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp57 = false;
            												}
HXDLIN( 270)												if (_hx_tmp57) {
HXLINE( 270)													_this9->uiDisplay->add(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = true;
            											}
            										}
            									}
            								}
            								else {
HXLINE( 270)									_this9->maskX = 0;
HXDLIN( 270)									_this9->maskWidth = _this9->width;
HXDLIN( 270)									if ((_this9->y < _y2)) {
HXLINE( 270)										if (((_this9->y + _this9->height) <= _y2)) {
HXLINE( 270)											_this9->maskHeight = 0;
HXDLIN( 270)											bool _hx_tmp58;
HXDLIN( 270)											if (_isVisible2) {
HXLINE( 270)												_hx_tmp58 = _this9->isVisible;
            											}
            											else {
HXLINE( 270)												_hx_tmp58 = false;
            											}
HXDLIN( 270)											if (_hx_tmp58) {
HXLINE( 270)												_this9->uiDisplay->remove(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = false;
            										}
            										else {
HXLINE( 270)											_this9->maskY = (_y2 - _this9->y);
HXDLIN( 270)											if (((_this9->y + _this9->height) >= (_y2 + _height2))) {
HXLINE( 270)												_this9->maskHeight = _height2;
            											}
            											else {
HXLINE( 270)												_this9->maskHeight = (_this9->height - _this9->maskY);
            											}
HXDLIN( 270)											bool _hx_tmp59;
HXDLIN( 270)											if (_isVisible2) {
HXLINE( 270)												_hx_tmp59 = !(_this9->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp59 = false;
            											}
HXDLIN( 270)											if (_hx_tmp59) {
HXLINE( 270)												_this9->uiDisplay->add(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = true;
            										}
            									}
            									else {
HXLINE( 270)										if (((_this9->y + _this9->height) > (_y2 + _height2))) {
HXLINE( 270)											if ((_this9->y >= (_y2 + _height2))) {
HXLINE( 270)												_this9->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp60;
HXDLIN( 270)												if (_isVisible2) {
HXLINE( 270)													_hx_tmp60 = _this9->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp60 = false;
            												}
HXDLIN( 270)												if (_hx_tmp60) {
HXLINE( 270)													_this9->uiDisplay->remove(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = false;
            											}
            											else {
HXLINE( 270)												_this9->maskY = 0;
HXDLIN( 270)												_this9->maskHeight = (_this9->height - ((_this9->y + _this9->height) - (_y2 + _height2)));
HXDLIN( 270)												bool _hx_tmp61;
HXDLIN( 270)												if (_isVisible2) {
HXLINE( 270)													_hx_tmp61 = !(_this9->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp61 = false;
            												}
HXDLIN( 270)												if (_hx_tmp61) {
HXLINE( 270)													_this9->uiDisplay->add(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = true;
            											}
            										}
            										else {
HXLINE( 270)											_this9->maskY = 0;
HXDLIN( 270)											_this9->maskHeight = _this9->height;
HXDLIN( 270)											bool _hx_tmp62;
HXDLIN( 270)											if (_isVisible2) {
HXLINE( 270)												_hx_tmp62 = !(_this9->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp62 = false;
            											}
HXDLIN( 270)											if (_hx_tmp62) {
HXLINE( 270)												_this9->uiDisplay->add(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = false;
            										}
            									}
            								}
            							}
            						}
            						else {
HXLINE( 270)							int _x3 = this->x;
HXDLIN( 270)							int _y3 = this->y;
HXDLIN( 270)							int _width3 = this->width;
HXDLIN( 270)							int _height3 = this->height;
HXDLIN( 270)							bool _isVisible3 = this->isVisible;
HXDLIN( 270)							if ((_this9->x < _x3)) {
HXLINE( 270)								if (((_this9->x + _this9->width) <= _x3)) {
HXLINE( 270)									_this9->maskWidth = 0;
HXDLIN( 270)									bool _hx_tmp63;
HXDLIN( 270)									if (_isVisible3) {
HXLINE( 270)										_hx_tmp63 = _this9->isVisible;
            									}
            									else {
HXLINE( 270)										_hx_tmp63 = false;
            									}
HXDLIN( 270)									if (_hx_tmp63) {
HXLINE( 270)										_this9->uiDisplay->remove(_this9);
            									}
HXDLIN( 270)									_hx_tmp45 = false;
            								}
            								else {
HXLINE( 270)									_this9->maskX = (_x3 - _this9->x);
HXDLIN( 270)									if (((_this9->x + _this9->width) >= (_x3 + _width3))) {
HXLINE( 270)										_this9->maskWidth = _width3;
            									}
            									else {
HXLINE( 270)										_this9->maskWidth = (_this9->width - _this9->maskX);
            									}
HXDLIN( 270)									if ((_this9->y < _y3)) {
HXLINE( 270)										if (((_this9->y + _this9->height) <= _y3)) {
HXLINE( 270)											_this9->maskHeight = 0;
HXDLIN( 270)											bool _hx_tmp64;
HXDLIN( 270)											if (_isVisible3) {
HXLINE( 270)												_hx_tmp64 = _this9->isVisible;
            											}
            											else {
HXLINE( 270)												_hx_tmp64 = false;
            											}
HXDLIN( 270)											if (_hx_tmp64) {
HXLINE( 270)												_this9->uiDisplay->remove(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = false;
            										}
            										else {
HXLINE( 270)											_this9->maskY = (_y3 - _this9->y);
HXDLIN( 270)											if (((_this9->y + _this9->height) >= (_y3 + _height3))) {
HXLINE( 270)												_this9->maskHeight = _height3;
            											}
            											else {
HXLINE( 270)												_this9->maskHeight = (_this9->height - _this9->maskY);
            											}
HXDLIN( 270)											bool _hx_tmp65;
HXDLIN( 270)											if (_isVisible3) {
HXLINE( 270)												_hx_tmp65 = !(_this9->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp65 = false;
            											}
HXDLIN( 270)											if (_hx_tmp65) {
HXLINE( 270)												_this9->uiDisplay->add(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = true;
            										}
            									}
            									else {
HXLINE( 270)										if (((_this9->y + _this9->height) > (_y3 + _height3))) {
HXLINE( 270)											if ((_this9->y >= (_y3 + _height3))) {
HXLINE( 270)												_this9->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp66;
HXDLIN( 270)												if (_isVisible3) {
HXLINE( 270)													_hx_tmp66 = _this9->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp66 = false;
            												}
HXDLIN( 270)												if (_hx_tmp66) {
HXLINE( 270)													_this9->uiDisplay->remove(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = false;
            											}
            											else {
HXLINE( 270)												_this9->maskY = 0;
HXDLIN( 270)												_this9->maskHeight = (_this9->height - ((_this9->y + _this9->height) - (_y3 + _height3)));
HXDLIN( 270)												bool _hx_tmp67;
HXDLIN( 270)												if (_isVisible3) {
HXLINE( 270)													_hx_tmp67 = !(_this9->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp67 = false;
            												}
HXDLIN( 270)												if (_hx_tmp67) {
HXLINE( 270)													_this9->uiDisplay->add(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = true;
            											}
            										}
            										else {
HXLINE( 270)											_this9->maskY = 0;
HXDLIN( 270)											_this9->maskHeight = _this9->height;
HXDLIN( 270)											bool _hx_tmp68;
HXDLIN( 270)											if (_isVisible3) {
HXLINE( 270)												_hx_tmp68 = !(_this9->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp68 = false;
            											}
HXDLIN( 270)											if (_hx_tmp68) {
HXLINE( 270)												_this9->uiDisplay->add(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = true;
            										}
            									}
            								}
            							}
            							else {
HXLINE( 270)								if (((_this9->x + _this9->width) > (_x3 + _width3))) {
HXLINE( 270)									if ((_this9->x >= (_x3 + _width3))) {
HXLINE( 270)										_this9->maskWidth = 0;
HXDLIN( 270)										bool _hx_tmp69;
HXDLIN( 270)										if (_isVisible3) {
HXLINE( 270)											_hx_tmp69 = _this9->isVisible;
            										}
            										else {
HXLINE( 270)											_hx_tmp69 = false;
            										}
HXDLIN( 270)										if (_hx_tmp69) {
HXLINE( 270)											_this9->uiDisplay->remove(_this9);
            										}
HXDLIN( 270)										_hx_tmp45 = false;
            									}
            									else {
HXLINE( 270)										_this9->maskX = 0;
HXDLIN( 270)										_this9->maskWidth = (_this9->width - ((_this9->x + _this9->width) - (_x3 + _width3)));
HXDLIN( 270)										if ((_this9->y < _y3)) {
HXLINE( 270)											if (((_this9->y + _this9->height) <= _y3)) {
HXLINE( 270)												_this9->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp70;
HXDLIN( 270)												if (_isVisible3) {
HXLINE( 270)													_hx_tmp70 = _this9->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp70 = false;
            												}
HXDLIN( 270)												if (_hx_tmp70) {
HXLINE( 270)													_this9->uiDisplay->remove(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = false;
            											}
            											else {
HXLINE( 270)												_this9->maskY = (_y3 - _this9->y);
HXDLIN( 270)												if (((_this9->y + _this9->height) >= (_y3 + _height3))) {
HXLINE( 270)													_this9->maskHeight = _height3;
            												}
            												else {
HXLINE( 270)													_this9->maskHeight = (_this9->height - _this9->maskY);
            												}
HXDLIN( 270)												bool _hx_tmp71;
HXDLIN( 270)												if (_isVisible3) {
HXLINE( 270)													_hx_tmp71 = !(_this9->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp71 = false;
            												}
HXDLIN( 270)												if (_hx_tmp71) {
HXLINE( 270)													_this9->uiDisplay->add(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = true;
            											}
            										}
            										else {
HXLINE( 270)											if (((_this9->y + _this9->height) > (_y3 + _height3))) {
HXLINE( 270)												if ((_this9->y >= (_y3 + _height3))) {
HXLINE( 270)													_this9->maskHeight = 0;
HXDLIN( 270)													bool _hx_tmp72;
HXDLIN( 270)													if (_isVisible3) {
HXLINE( 270)														_hx_tmp72 = _this9->isVisible;
            													}
            													else {
HXLINE( 270)														_hx_tmp72 = false;
            													}
HXDLIN( 270)													if (_hx_tmp72) {
HXLINE( 270)														_this9->uiDisplay->remove(_this9);
            													}
HXDLIN( 270)													_hx_tmp45 = false;
            												}
            												else {
HXLINE( 270)													_this9->maskY = 0;
HXDLIN( 270)													_this9->maskHeight = (_this9->height - ((_this9->y + _this9->height) - (_y3 + _height3)));
HXDLIN( 270)													bool _hx_tmp73;
HXDLIN( 270)													if (_isVisible3) {
HXLINE( 270)														_hx_tmp73 = !(_this9->isVisible);
            													}
            													else {
HXLINE( 270)														_hx_tmp73 = false;
            													}
HXDLIN( 270)													if (_hx_tmp73) {
HXLINE( 270)														_this9->uiDisplay->add(_this9);
            													}
HXDLIN( 270)													_hx_tmp45 = true;
            												}
            											}
            											else {
HXLINE( 270)												_this9->maskY = 0;
HXDLIN( 270)												_this9->maskHeight = _this9->height;
HXDLIN( 270)												bool _hx_tmp74;
HXDLIN( 270)												if (_isVisible3) {
HXLINE( 270)													_hx_tmp74 = !(_this9->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp74 = false;
            												}
HXDLIN( 270)												if (_hx_tmp74) {
HXLINE( 270)													_this9->uiDisplay->add(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = true;
            											}
            										}
            									}
            								}
            								else {
HXLINE( 270)									_this9->maskX = 0;
HXDLIN( 270)									_this9->maskWidth = _this9->width;
HXDLIN( 270)									if ((_this9->y < _y3)) {
HXLINE( 270)										if (((_this9->y + _this9->height) <= _y3)) {
HXLINE( 270)											_this9->maskHeight = 0;
HXDLIN( 270)											bool _hx_tmp75;
HXDLIN( 270)											if (_isVisible3) {
HXLINE( 270)												_hx_tmp75 = _this9->isVisible;
            											}
            											else {
HXLINE( 270)												_hx_tmp75 = false;
            											}
HXDLIN( 270)											if (_hx_tmp75) {
HXLINE( 270)												_this9->uiDisplay->remove(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = false;
            										}
            										else {
HXLINE( 270)											_this9->maskY = (_y3 - _this9->y);
HXDLIN( 270)											if (((_this9->y + _this9->height) >= (_y3 + _height3))) {
HXLINE( 270)												_this9->maskHeight = _height3;
            											}
            											else {
HXLINE( 270)												_this9->maskHeight = (_this9->height - _this9->maskY);
            											}
HXDLIN( 270)											bool _hx_tmp76;
HXDLIN( 270)											if (_isVisible3) {
HXLINE( 270)												_hx_tmp76 = !(_this9->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp76 = false;
            											}
HXDLIN( 270)											if (_hx_tmp76) {
HXLINE( 270)												_this9->uiDisplay->add(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = true;
            										}
            									}
            									else {
HXLINE( 270)										if (((_this9->y + _this9->height) > (_y3 + _height3))) {
HXLINE( 270)											if ((_this9->y >= (_y3 + _height3))) {
HXLINE( 270)												_this9->maskHeight = 0;
HXDLIN( 270)												bool _hx_tmp77;
HXDLIN( 270)												if (_isVisible3) {
HXLINE( 270)													_hx_tmp77 = _this9->isVisible;
            												}
            												else {
HXLINE( 270)													_hx_tmp77 = false;
            												}
HXDLIN( 270)												if (_hx_tmp77) {
HXLINE( 270)													_this9->uiDisplay->remove(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = false;
            											}
            											else {
HXLINE( 270)												_this9->maskY = 0;
HXDLIN( 270)												_this9->maskHeight = (_this9->height - ((_this9->y + _this9->height) - (_y3 + _height3)));
HXDLIN( 270)												bool _hx_tmp78;
HXDLIN( 270)												if (_isVisible3) {
HXLINE( 270)													_hx_tmp78 = !(_this9->isVisible);
            												}
            												else {
HXLINE( 270)													_hx_tmp78 = false;
            												}
HXDLIN( 270)												if (_hx_tmp78) {
HXLINE( 270)													_this9->uiDisplay->add(_this9);
            												}
HXDLIN( 270)												_hx_tmp45 = true;
            											}
            										}
            										else {
HXLINE( 270)											_this9->maskY = 0;
HXDLIN( 270)											_this9->maskHeight = _this9->height;
HXDLIN( 270)											bool _hx_tmp79;
HXDLIN( 270)											if (_isVisible3) {
HXLINE( 270)												_hx_tmp79 = !(_this9->isVisible);
            											}
            											else {
HXLINE( 270)												_hx_tmp79 = false;
            											}
HXDLIN( 270)											if (_hx_tmp79) {
HXLINE( 270)												_this9->uiDisplay->add(_this9);
            											}
HXDLIN( 270)											_hx_tmp45 = false;
            										}
            									}
            								}
            							}
            						}
HXDLIN( 270)						_this9->masked = _hx_tmp45;
            					}
            				}
HXDLIN( 270)				this->dragger->updateLayout();
            			}
            		}
            	}


void UISlider_obj::onAddVisibleToDisplay(){
            	HX_STACKFRAME(&_hx_pos_f110b15ea9daebc7_274_onAddVisibleToDisplay)
HXLINE( 275)		if (::hx::IsNotNull( this->background )) {
HXLINE( 275)			this->uiDisplay->add(this->background);
            		}
HXLINE( 276)		if (::hx::IsNotNull( this->dragger )) {
HXLINE( 277)			this->uiDisplay->add(this->dragger);
HXLINE( 278)			if (this->isVertical) {
HXLINE( 278)				 ::peote::ui::interactive::UIElement _this = this->dragger;
HXDLIN( 278)				int dragAreaX = this->dragger->x;
HXDLIN( 278)				int dragAreaY = (this->y + this->draggSpaceStart);
HXDLIN( 278)				_this->dragMinX = dragAreaX;
HXDLIN( 278)				_this->dragMinY = dragAreaY;
HXDLIN( 278)				_this->dragMaxX = (dragAreaX + this->dragger->width);
HXDLIN( 278)				_this->dragMaxY = (dragAreaY + ((this->height - this->draggSpaceStart) - this->draggSpaceEnd));
            			}
            			else {
HXLINE( 278)				 ::peote::ui::interactive::UIElement _this1 = this->dragger;
HXDLIN( 278)				int dragAreaX1 = (this->x + this->draggSpaceStart);
HXDLIN( 278)				int dragAreaY1 = this->dragger->y;
HXDLIN( 278)				_this1->dragMinX = dragAreaX1;
HXDLIN( 278)				_this1->dragMinY = dragAreaY1;
HXDLIN( 278)				_this1->dragMaxX = (dragAreaX1 + ((this->width - this->draggSpaceStart) - this->draggSpaceEnd));
HXDLIN( 278)				_this1->dragMaxY = (dragAreaY1 + this->dragger->height);
            			}
            		}
            	}


void UISlider_obj::onRemoveVisibleFromDisplay(){
            	HX_STACKFRAME(&_hx_pos_f110b15ea9daebc7_283_onRemoveVisibleFromDisplay)
HXLINE( 284)		if (::hx::IsNotNull( this->background )) {
HXLINE( 284)			this->uiDisplay->remove(this->background);
            		}
HXLINE( 285)		bool _hx_tmp;
HXDLIN( 285)		if (::hx::IsNotNull( this->dragger )) {
HXLINE( 285)			_hx_tmp = this->dragger->isVisible;
            		}
            		else {
HXLINE( 285)			_hx_tmp = false;
            		}
HXDLIN( 285)		if (_hx_tmp) {
HXLINE( 285)			this->uiDisplay->remove(this->dragger);
            		}
            	}



::hx::ObjectPtr< UISlider_obj > UISlider_obj::__new(int xPosition,int yPosition,int width,int height,::hx::Null< int >  __o_zIndex, ::peote::ui::config::_SliderConfig::SliderConfigImpl config) {
	::hx::ObjectPtr< UISlider_obj > __this = new UISlider_obj();
	__this->__construct(xPosition,yPosition,width,height,__o_zIndex,config);
	return __this;
}

::hx::ObjectPtr< UISlider_obj > UISlider_obj::__alloc(::hx::Ctx *_hx_ctx,int xPosition,int yPosition,int width,int height,::hx::Null< int >  __o_zIndex, ::peote::ui::config::_SliderConfig::SliderConfigImpl config) {
	UISlider_obj *__this = (UISlider_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(UISlider_obj), true, "peote.ui.interactive.UISlider"));
	*(void **)__this = UISlider_obj::_hx_vtable;
	__this->__construct(xPosition,yPosition,width,height,__o_zIndex,config);
	return __this;
}

UISlider_obj::UISlider_obj()
{
}

void UISlider_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UISlider);
	HX_MARK_MEMBER_NAME(_percent,"_percent");
	HX_MARK_MEMBER_NAME(valueStart,"valueStart");
	HX_MARK_MEMBER_NAME(valueEnd,"valueEnd");
	HX_MARK_MEMBER_NAME(dragger,"dragger");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(isVertical,"isVertical");
	HX_MARK_MEMBER_NAME(reverse,"reverse");
	HX_MARK_MEMBER_NAME(draggerLength,"draggerLength");
	HX_MARK_MEMBER_NAME(draggerLengthPercent,"draggerLengthPercent");
	HX_MARK_MEMBER_NAME(draggSpaceStart,"draggSpaceStart");
	HX_MARK_MEMBER_NAME(draggSpaceEnd,"draggSpaceEnd");
	HX_MARK_MEMBER_NAME(_onChange,"_onChange");
	HX_MARK_MEMBER_NAME(onDraggerPointerOver,"onDraggerPointerOver");
	HX_MARK_MEMBER_NAME(onDraggerPointerOut,"onDraggerPointerOut");
	HX_MARK_MEMBER_NAME(onDraggerPointerDown,"onDraggerPointerDown");
	HX_MARK_MEMBER_NAME(onDraggerPointerUp,"onDraggerPointerUp");
	HX_MARK_MEMBER_NAME(onChange,"onChange");
	 ::peote::ui::interactive::Interactive_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void UISlider_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_percent,"_percent");
	HX_VISIT_MEMBER_NAME(valueStart,"valueStart");
	HX_VISIT_MEMBER_NAME(valueEnd,"valueEnd");
	HX_VISIT_MEMBER_NAME(dragger,"dragger");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(isVertical,"isVertical");
	HX_VISIT_MEMBER_NAME(reverse,"reverse");
	HX_VISIT_MEMBER_NAME(draggerLength,"draggerLength");
	HX_VISIT_MEMBER_NAME(draggerLengthPercent,"draggerLengthPercent");
	HX_VISIT_MEMBER_NAME(draggSpaceStart,"draggSpaceStart");
	HX_VISIT_MEMBER_NAME(draggSpaceEnd,"draggSpaceEnd");
	HX_VISIT_MEMBER_NAME(_onChange,"_onChange");
	HX_VISIT_MEMBER_NAME(onDraggerPointerOver,"onDraggerPointerOver");
	HX_VISIT_MEMBER_NAME(onDraggerPointerOut,"onDraggerPointerOut");
	HX_VISIT_MEMBER_NAME(onDraggerPointerDown,"onDraggerPointerDown");
	HX_VISIT_MEMBER_NAME(onDraggerPointerUp,"onDraggerPointerUp");
	HX_VISIT_MEMBER_NAME(onChange,"onChange");
	 ::peote::ui::interactive::Interactive_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val UISlider_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"dragger") ) { return ::hx::Val( dragger ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return ::hx::Val( reverse ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_percent") ) { return ::hx::Val( _percent ); }
		if (HX_FIELD_EQ(inName,"valueEnd") ) { return ::hx::Val( valueEnd ); }
		if (HX_FIELD_EQ(inName,"onChange") ) { return ::hx::Val( onChange ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_onChange") ) { return ::hx::Val( _onChange ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"valueStart") ) { return ::hx::Val( valueStart ); }
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"isVertical") ) { return ::hx::Val( isVertical ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"draggerLength") ) { return ::hx::Val( draggerLength ); }
		if (HX_FIELD_EQ(inName,"draggSpaceEnd") ) { return ::hx::Val( draggSpaceEnd ); }
		if (HX_FIELD_EQ(inName,"updateVisible") ) { return ::hx::Val( updateVisible_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onChangeZIndex") ) { return ::hx::Val( onChangeZIndex_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"draggSpaceStart") ) { return ::hx::Val( draggSpaceStart ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onDraggerPointerUp") ) { return ::hx::Val( onDraggerPointerUp ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateVisibleLayout") ) { return ::hx::Val( updateVisibleLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"onDraggerPointerOut") ) { return ::hx::Val( onDraggerPointerOut ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"draggerLengthPercent") ) { return ::hx::Val( draggerLengthPercent ); }
		if (HX_FIELD_EQ(inName,"onDraggerPointerOver") ) { return ::hx::Val( onDraggerPointerOver ); }
		if (HX_FIELD_EQ(inName,"onDraggerPointerDown") ) { return ::hx::Val( onDraggerPointerDown ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"onAddVisibleToDisplay") ) { return ::hx::Val( onAddVisibleToDisplay_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"onRemoveVisibleFromDisplay") ) { return ::hx::Val( onRemoveVisibleFromDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val UISlider_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"dragger") ) { dragger=inValue.Cast<  ::peote::ui::interactive::UIElement >(); return inValue; }
		if (HX_FIELD_EQ(inName,"reverse") ) { reverse=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_percent") ) { _percent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"valueEnd") ) { valueEnd=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onChange") ) { onChange=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_onChange") ) { _onChange=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"valueStart") ) { valueStart=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::peote::ui::interactive::UIElement >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isVertical") ) { isVertical=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"draggerLength") ) { draggerLength=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"draggSpaceEnd") ) { draggSpaceEnd=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"draggSpaceStart") ) { draggSpaceStart=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onDraggerPointerUp") ) { onDraggerPointerUp=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"onDraggerPointerOut") ) { onDraggerPointerOut=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"draggerLengthPercent") ) { draggerLengthPercent=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onDraggerPointerOver") ) { onDraggerPointerOver=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onDraggerPointerDown") ) { onDraggerPointerDown=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UISlider_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_percent",46,04,93,b2));
	outFields->push(HX_("valueStart",31,cb,a7,2b));
	outFields->push(HX_("valueEnd",ea,b8,46,ee));
	outFields->push(HX_("dragger",20,45,53,f1));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("isVertical",80,ce,c4,e4));
	outFields->push(HX_("reverse",22,39,fc,1a));
	outFields->push(HX_("draggerLength",26,e6,df,80));
	outFields->push(HX_("draggerLengthPercent",3f,9d,31,ff));
	outFields->push(HX_("draggSpaceStart",8f,a5,dc,7a));
	outFields->push(HX_("draggSpaceEnd",c8,9f,cd,60));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo UISlider_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(UISlider_obj,_percent),HX_("_percent",46,04,93,b2)},
	{::hx::fsFloat,(int)offsetof(UISlider_obj,valueStart),HX_("valueStart",31,cb,a7,2b)},
	{::hx::fsFloat,(int)offsetof(UISlider_obj,valueEnd),HX_("valueEnd",ea,b8,46,ee)},
	{::hx::fsObject /*  ::peote::ui::interactive::UIElement */ ,(int)offsetof(UISlider_obj,dragger),HX_("dragger",20,45,53,f1)},
	{::hx::fsObject /*  ::peote::ui::interactive::UIElement */ ,(int)offsetof(UISlider_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsBool,(int)offsetof(UISlider_obj,isVertical),HX_("isVertical",80,ce,c4,e4)},
	{::hx::fsBool,(int)offsetof(UISlider_obj,reverse),HX_("reverse",22,39,fc,1a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(UISlider_obj,draggerLength),HX_("draggerLength",26,e6,df,80)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(UISlider_obj,draggerLengthPercent),HX_("draggerLengthPercent",3f,9d,31,ff)},
	{::hx::fsInt,(int)offsetof(UISlider_obj,draggSpaceStart),HX_("draggSpaceStart",8f,a5,dc,7a)},
	{::hx::fsInt,(int)offsetof(UISlider_obj,draggSpaceEnd),HX_("draggSpaceEnd",c8,9f,cd,60)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(UISlider_obj,_onChange),HX_("_onChange",4e,7f,b5,de)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(UISlider_obj,onDraggerPointerOver),HX_("onDraggerPointerOver",70,80,4c,1f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(UISlider_obj,onDraggerPointerOut),HX_("onDraggerPointerOut",f2,08,3c,75)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(UISlider_obj,onDraggerPointerDown),HX_("onDraggerPointerDown",7e,e7,01,18)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(UISlider_obj,onDraggerPointerUp),HX_("onDraggerPointerUp",77,16,73,0f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(UISlider_obj,onChange),HX_("onChange",ef,87,1f,97)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *UISlider_obj_sStaticStorageInfo = 0;
#endif

static ::String UISlider_obj_sMemberFields[] = {
	HX_("_percent",46,04,93,b2),
	HX_("valueStart",31,cb,a7,2b),
	HX_("valueEnd",ea,b8,46,ee),
	HX_("dragger",20,45,53,f1),
	HX_("background",ee,93,1d,26),
	HX_("isVertical",80,ce,c4,e4),
	HX_("reverse",22,39,fc,1a),
	HX_("draggerLength",26,e6,df,80),
	HX_("draggerLengthPercent",3f,9d,31,ff),
	HX_("draggSpaceStart",8f,a5,dc,7a),
	HX_("draggSpaceEnd",c8,9f,cd,60),
	HX_("onChangeZIndex",87,29,e9,29),
	HX_("updateVisibleLayout",f3,74,31,4b),
	HX_("updateVisible",69,dd,92,6e),
	HX_("onAddVisibleToDisplay",97,b1,8b,2f),
	HX_("onRemoveVisibleFromDisplay",49,22,35,f9),
	HX_("_onChange",4e,7f,b5,de),
	HX_("onDraggerPointerOver",70,80,4c,1f),
	HX_("onDraggerPointerOut",f2,08,3c,75),
	HX_("onDraggerPointerDown",7e,e7,01,18),
	HX_("onDraggerPointerUp",77,16,73,0f),
	HX_("onChange",ef,87,1f,97),
	::String(null()) };

::hx::Class UISlider_obj::__mClass;

void UISlider_obj::__register()
{
	UISlider_obj _hx_dummy;
	UISlider_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("peote.ui.interactive.UISlider",58,af,3c,66);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(UISlider_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< UISlider_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UISlider_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UISlider_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace peote
} // end namespace ui
} // end namespace interactive
