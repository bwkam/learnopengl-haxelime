// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__Float64Array_Float64Array_Impl_
#include <lime/utils/_Float64Array/Float64Array_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8b7b048dadc59c63_100__new,"lime.utils._Float64Array.Float64Array_Impl_","_new",0x269603ea,"lime.utils._Float64Array.Float64Array_Impl_._new","lime/utils/Float64Array.hx",100,0x73d83bc7)
HX_LOCAL_STACK_FRAME(_hx_pos_8b7b048dadc59c63_133_subarray,"lime.utils._Float64Array.Float64Array_Impl_","subarray",0x21ecbb22,"lime.utils._Float64Array.Float64Array_Impl_.subarray","lime/utils/Float64Array.hx",133,0x73d83bc7)
HX_LOCAL_STACK_FRAME(_hx_pos_8b7b048dadc59c63_138_fromBytes,"lime.utils._Float64Array.Float64Array_Impl_","fromBytes",0x75afb378,"lime.utils._Float64Array.Float64Array_Impl_.fromBytes","lime/utils/Float64Array.hx",138,0x73d83bc7)
HX_LOCAL_STACK_FRAME(_hx_pos_8b7b048dadc59c63_143_toBytes,"lime.utils._Float64Array.Float64Array_Impl_","toBytes",0xdbbc6207,"lime.utils._Float64Array.Float64Array_Impl_.toBytes","lime/utils/Float64Array.hx",143,0x73d83bc7)
HX_LOCAL_STACK_FRAME(_hx_pos_8b7b048dadc59c63_148_get_length,"lime.utils._Float64Array.Float64Array_Impl_","get_length",0xa8e8fff8,"lime.utils._Float64Array.Float64Array_Impl_.get_length","lime/utils/Float64Array.hx",148,0x73d83bc7)
HX_LOCAL_STACK_FRAME(_hx_pos_8b7b048dadc59c63_166_toString,"lime.utils._Float64Array.Float64Array_Impl_","toString",0x52da37b5,"lime.utils._Float64Array.Float64Array_Impl_.toString","lime/utils/Float64Array.hx",166,0x73d83bc7)
HX_LOCAL_STACK_FRAME(_hx_pos_8b7b048dadc59c63_93_boot,"lime.utils._Float64Array.Float64Array_Impl_","boot",0x289272bb,"lime.utils._Float64Array.Float64Array_Impl_.boot","lime/utils/Float64Array.hx",93,0x73d83bc7)
namespace lime{
namespace utils{
namespace _Float64Array{

void Float64Array_Impl__obj::__construct() { }

Dynamic Float64Array_Impl__obj::__CreateEmpty() { return new Float64Array_Impl__obj; }

void *Float64Array_Impl__obj::_hx_vtable = 0;

Dynamic Float64Array_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Float64Array_Impl__obj > _hx_result = new Float64Array_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Float64Array_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x60ed2601;
}

int Float64Array_Impl__obj::BYTES_PER_ELEMENT;

 ::lime::utils::ArrayBufferView Float64Array_Impl__obj::_new( ::Dynamic elements, ::haxe::io::Bytes buffer,::cpp::VirtualArray array, ::lime::utils::ArrayBufferView view, ::Dynamic __o_byteoffset, ::Dynamic len){
            		 ::Dynamic byteoffset = __o_byteoffset;
            		if (::hx::IsNull(__o_byteoffset)) byteoffset = 0;
            	HX_GC_STACKFRAME(&_hx_pos_8b7b048dadc59c63_100__new)
HXDLIN( 100)		 ::lime::utils::ArrayBufferView this1;
HXLINE( 103)		if (::hx::IsNotNull( elements )) {
HXLINE( 105)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,9);
            		}
            		else {
HXLINE( 107)			if (::hx::IsNotNull( array )) {
HXLINE( 109)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 109)				_this->byteOffset = 0;
HXDLIN( 109)				_this->length = array->get_length();
HXDLIN( 109)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 109)				_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 109)				_this->copyFromArray(array,null());
HXDLIN( 109)				this1 = _this;
            			}
            			else {
HXLINE( 117)				if (::hx::IsNotNull( view )) {
HXLINE( 119)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 119)					 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 119)					int srcLength = view->length;
HXDLIN( 119)					int srcByteOffset = view->byteOffset;
HXDLIN( 119)					int srcElementSize = view->bytesPerElement;
HXDLIN( 119)					int elementSize = _this1->bytesPerElement;
HXDLIN( 119)					if ((view->type == _this1->type)) {
HXLINE( 119)						int srcLength1 = srcData->length;
HXDLIN( 119)						int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 119)						_this1->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 119)						_this1->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            					}
            					else {
HXLINE( 119)						HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            					}
HXDLIN( 119)					_this1->byteLength = (_this1->bytesPerElement * srcLength);
HXDLIN( 119)					_this1->byteOffset = 0;
HXDLIN( 119)					_this1->length = srcLength;
HXDLIN( 119)					this1 = _this1;
            				}
            				else {
HXLINE( 121)					if (::hx::IsNotNull( buffer )) {
HXLINE( 123)						 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 123)						int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 123)						if ((in_byteOffset < 0)) {
HXLINE( 123)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 123)						if ((::hx::Mod(in_byteOffset,_this2->bytesPerElement) != 0)) {
HXLINE( 123)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 123)						int bufferByteLength = buffer->length;
HXDLIN( 123)						int elementSize1 = _this2->bytesPerElement;
HXDLIN( 123)						int newByteLength = bufferByteLength;
HXDLIN( 123)						if (::hx::IsNull( len )) {
HXLINE( 123)							newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 123)							if ((::hx::Mod(bufferByteLength,_this2->bytesPerElement) != 0)) {
HXLINE( 123)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN( 123)							if ((newByteLength < 0)) {
HXLINE( 123)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
            						}
            						else {
HXLINE( 123)							newByteLength = (( (int)(len) ) * _this2->bytesPerElement);
HXDLIN( 123)							int newRange = (in_byteOffset + newByteLength);
HXDLIN( 123)							if ((newRange > bufferByteLength)) {
HXLINE( 123)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
            						}
HXDLIN( 123)						_this2->buffer = buffer;
HXDLIN( 123)						_this2->byteOffset = in_byteOffset;
HXDLIN( 123)						_this2->byteLength = newByteLength;
HXDLIN( 123)						_this2->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this2->bytesPerElement) )));
HXDLIN( 123)						this1 = _this2;
            					}
            					else {
HXLINE( 127)						HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            					}
            				}
            			}
            		}
HXLINE( 100)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Float64Array_Impl__obj,_new,return )

 ::lime::utils::ArrayBufferView Float64Array_Impl__obj::subarray( ::lime::utils::ArrayBufferView this1,int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_8b7b048dadc59c63_133_subarray)
HXDLIN( 133)		 ::Dynamic end1 = end;
HXDLIN( 133)		if (::hx::IsNull( end1 )) {
HXDLIN( 133)			end1 = this1->length;
            		}
HXDLIN( 133)		int len = (( (int)(end1) ) - begin);
HXDLIN( 133)		int byte_offset = ((begin * this1->bytesPerElement) + this1->byteOffset);
HXDLIN( 133)		 ::lime::utils::ArrayBufferView view;
HXDLIN( 133)		switch((int)(this1->type)){
            			case (int)0: {
HXDLIN( 133)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXDLIN( 133)				 ::Dynamic elements = null();
HXDLIN( 133)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN( 133)				::cpp::VirtualArray array = null();
HXDLIN( 133)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN( 133)				 ::Dynamic byteoffset = byte_offset;
HXDLIN( 133)				if (::hx::IsNull( byteoffset )) {
HXDLIN( 133)					byteoffset = 0;
            				}
HXDLIN( 133)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 133)				if (::hx::IsNotNull( elements )) {
HXDLIN( 133)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,1);
            				}
            				else {
HXDLIN( 133)					if (::hx::IsNotNull( array )) {
HXDLIN( 133)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 133)						_this->byteOffset = 0;
HXDLIN( 133)						_this->length = array->get_length();
HXDLIN( 133)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 133)						_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 133)						_this->copyFromArray(array,null());
HXDLIN( 133)						this2 = _this;
            					}
            					else {
HXDLIN( 133)						if (::hx::IsNotNull( view1 )) {
HXDLIN( 133)							 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 133)							 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN( 133)							int srcLength = view1->length;
HXDLIN( 133)							int srcByteOffset = view1->byteOffset;
HXDLIN( 133)							int srcElementSize = view1->bytesPerElement;
HXDLIN( 133)							int elementSize = _this1->bytesPerElement;
HXDLIN( 133)							if ((view1->type == _this1->type)) {
HXDLIN( 133)								int srcLength1 = srcData->length;
HXDLIN( 133)								int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 133)								_this1->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 133)								_this1->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            							}
HXDLIN( 133)							_this1->byteLength = (_this1->bytesPerElement * srcLength);
HXDLIN( 133)							_this1->byteOffset = 0;
HXDLIN( 133)							_this1->length = srcLength;
HXDLIN( 133)							this2 = _this1;
            						}
            						else {
HXDLIN( 133)							if (::hx::IsNotNull( buffer )) {
HXDLIN( 133)								 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 133)								int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 133)								if ((in_byteOffset < 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								if ((::hx::Mod(in_byteOffset,_this2->bytesPerElement) != 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								int bufferByteLength = buffer->length;
HXDLIN( 133)								int elementSize1 = _this2->bytesPerElement;
HXDLIN( 133)								int newByteLength = bufferByteLength;
HXDLIN( 133)								if (::hx::IsNull( len )) {
HXDLIN( 133)									newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 133)									if ((::hx::Mod(bufferByteLength,_this2->bytesPerElement) != 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 133)									if ((newByteLength < 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXDLIN( 133)									newByteLength = (len * _this2->bytesPerElement);
HXDLIN( 133)									int newRange = (in_byteOffset + newByteLength);
HXDLIN( 133)									if ((newRange > bufferByteLength)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 133)								_this2->buffer = buffer;
HXDLIN( 133)								_this2->byteOffset = in_byteOffset;
HXDLIN( 133)								_this2->byteLength = newByteLength;
HXDLIN( 133)								_this2->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this2->bytesPerElement) )));
HXDLIN( 133)								this2 = _this2;
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            							}
            						}
            					}
            				}
HXDLIN( 133)				view = this2;
            			}
            			break;
            			case (int)2: {
HXDLIN( 133)				 ::Dynamic elements1 = null();
HXDLIN( 133)				 ::haxe::io::Bytes buffer1 = this1->buffer;
HXDLIN( 133)				::cpp::VirtualArray array1 = null();
HXDLIN( 133)				 ::lime::utils::ArrayBufferView view2 = null();
HXDLIN( 133)				 ::Dynamic byteoffset1 = byte_offset;
HXDLIN( 133)				if (::hx::IsNull( byteoffset1 )) {
HXDLIN( 133)					byteoffset1 = 0;
            				}
HXDLIN( 133)				 ::lime::utils::ArrayBufferView this3;
HXDLIN( 133)				if (::hx::IsNotNull( elements1 )) {
HXDLIN( 133)					this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements1,2);
            				}
            				else {
HXDLIN( 133)					if (::hx::IsNotNull( array1 )) {
HXDLIN( 133)						 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 133)						_this3->byteOffset = 0;
HXDLIN( 133)						_this3->length = array1->get_length();
HXDLIN( 133)						_this3->byteLength = (_this3->length * _this3->bytesPerElement);
HXDLIN( 133)						_this3->buffer = ::haxe::io::Bytes_obj::alloc(_this3->byteLength);
HXDLIN( 133)						_this3->copyFromArray(array1,null());
HXDLIN( 133)						this3 = _this3;
            					}
            					else {
HXDLIN( 133)						if (::hx::IsNotNull( view2 )) {
HXDLIN( 133)							 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 133)							 ::haxe::io::Bytes srcData1 = view2->buffer;
HXDLIN( 133)							int srcLength2 = view2->length;
HXDLIN( 133)							int srcByteOffset1 = view2->byteOffset;
HXDLIN( 133)							int srcElementSize1 = view2->bytesPerElement;
HXDLIN( 133)							int elementSize2 = _this4->bytesPerElement;
HXDLIN( 133)							if ((view2->type == _this4->type)) {
HXDLIN( 133)								int srcLength3 = srcData1->length;
HXDLIN( 133)								int cloneLength1 = (srcLength3 - srcByteOffset1);
HXDLIN( 133)								_this4->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength1);
HXDLIN( 133)								_this4->buffer->blit(0,srcData1,srcByteOffset1,cloneLength1);
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            							}
HXDLIN( 133)							_this4->byteLength = (_this4->bytesPerElement * srcLength2);
HXDLIN( 133)							_this4->byteOffset = 0;
HXDLIN( 133)							_this4->length = srcLength2;
HXDLIN( 133)							this3 = _this4;
            						}
            						else {
HXDLIN( 133)							if (::hx::IsNotNull( buffer1 )) {
HXDLIN( 133)								 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 133)								int in_byteOffset1 = ( (int)(byteoffset1) );
HXDLIN( 133)								if ((in_byteOffset1 < 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								if ((::hx::Mod(in_byteOffset1,_this5->bytesPerElement) != 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								int bufferByteLength1 = buffer1->length;
HXDLIN( 133)								int elementSize3 = _this5->bytesPerElement;
HXDLIN( 133)								int newByteLength1 = bufferByteLength1;
HXDLIN( 133)								if (::hx::IsNull( len )) {
HXDLIN( 133)									newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 133)									if ((::hx::Mod(bufferByteLength1,_this5->bytesPerElement) != 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 133)									if ((newByteLength1 < 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXDLIN( 133)									newByteLength1 = (len * _this5->bytesPerElement);
HXDLIN( 133)									int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 133)									if ((newRange1 > bufferByteLength1)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 133)								_this5->buffer = buffer1;
HXDLIN( 133)								_this5->byteOffset = in_byteOffset1;
HXDLIN( 133)								_this5->byteLength = newByteLength1;
HXDLIN( 133)								_this5->length = ::Std_obj::_hx_int((( (Float)(newByteLength1) ) / ( (Float)(_this5->bytesPerElement) )));
HXDLIN( 133)								this3 = _this5;
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            							}
            						}
            					}
            				}
HXDLIN( 133)				view = this3;
            			}
            			break;
            			case (int)3: {
HXDLIN( 133)				 ::Dynamic elements2 = null();
HXDLIN( 133)				 ::haxe::io::Bytes buffer2 = this1->buffer;
HXDLIN( 133)				::cpp::VirtualArray array2 = null();
HXDLIN( 133)				 ::lime::utils::ArrayBufferView view3 = null();
HXDLIN( 133)				 ::Dynamic byteoffset2 = byte_offset;
HXDLIN( 133)				if (::hx::IsNull( byteoffset2 )) {
HXDLIN( 133)					byteoffset2 = 0;
            				}
HXDLIN( 133)				 ::lime::utils::ArrayBufferView this4;
HXDLIN( 133)				if (::hx::IsNotNull( elements2 )) {
HXDLIN( 133)					this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements2,3);
            				}
            				else {
HXDLIN( 133)					if (::hx::IsNotNull( array2 )) {
HXDLIN( 133)						 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 133)						_this6->byteOffset = 0;
HXDLIN( 133)						_this6->length = array2->get_length();
HXDLIN( 133)						_this6->byteLength = (_this6->length * _this6->bytesPerElement);
HXDLIN( 133)						_this6->buffer = ::haxe::io::Bytes_obj::alloc(_this6->byteLength);
HXDLIN( 133)						_this6->copyFromArray(array2,null());
HXDLIN( 133)						this4 = _this6;
            					}
            					else {
HXDLIN( 133)						if (::hx::IsNotNull( view3 )) {
HXDLIN( 133)							 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 133)							 ::haxe::io::Bytes srcData2 = view3->buffer;
HXDLIN( 133)							int srcLength4 = view3->length;
HXDLIN( 133)							int srcByteOffset2 = view3->byteOffset;
HXDLIN( 133)							int srcElementSize2 = view3->bytesPerElement;
HXDLIN( 133)							int elementSize4 = _this7->bytesPerElement;
HXDLIN( 133)							if ((view3->type == _this7->type)) {
HXDLIN( 133)								int srcLength5 = srcData2->length;
HXDLIN( 133)								int cloneLength2 = (srcLength5 - srcByteOffset2);
HXDLIN( 133)								_this7->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength2);
HXDLIN( 133)								_this7->buffer->blit(0,srcData2,srcByteOffset2,cloneLength2);
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            							}
HXDLIN( 133)							_this7->byteLength = (_this7->bytesPerElement * srcLength4);
HXDLIN( 133)							_this7->byteOffset = 0;
HXDLIN( 133)							_this7->length = srcLength4;
HXDLIN( 133)							this4 = _this7;
            						}
            						else {
HXDLIN( 133)							if (::hx::IsNotNull( buffer2 )) {
HXDLIN( 133)								 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 133)								int in_byteOffset2 = ( (int)(byteoffset2) );
HXDLIN( 133)								if ((in_byteOffset2 < 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								if ((::hx::Mod(in_byteOffset2,_this8->bytesPerElement) != 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								int bufferByteLength2 = buffer2->length;
HXDLIN( 133)								int elementSize5 = _this8->bytesPerElement;
HXDLIN( 133)								int newByteLength2 = bufferByteLength2;
HXDLIN( 133)								if (::hx::IsNull( len )) {
HXDLIN( 133)									newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 133)									if ((::hx::Mod(bufferByteLength2,_this8->bytesPerElement) != 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 133)									if ((newByteLength2 < 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXDLIN( 133)									newByteLength2 = (len * _this8->bytesPerElement);
HXDLIN( 133)									int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 133)									if ((newRange2 > bufferByteLength2)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 133)								_this8->buffer = buffer2;
HXDLIN( 133)								_this8->byteOffset = in_byteOffset2;
HXDLIN( 133)								_this8->byteLength = newByteLength2;
HXDLIN( 133)								_this8->length = ::Std_obj::_hx_int((( (Float)(newByteLength2) ) / ( (Float)(_this8->bytesPerElement) )));
HXDLIN( 133)								this4 = _this8;
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            							}
            						}
            					}
            				}
HXDLIN( 133)				view = this4;
            			}
            			break;
            			case (int)4: {
HXDLIN( 133)				 ::Dynamic elements3 = null();
HXDLIN( 133)				 ::haxe::io::Bytes buffer3 = this1->buffer;
HXDLIN( 133)				::cpp::VirtualArray array3 = null();
HXDLIN( 133)				 ::lime::utils::ArrayBufferView view4 = null();
HXDLIN( 133)				 ::Dynamic byteoffset3 = byte_offset;
HXDLIN( 133)				if (::hx::IsNull( byteoffset3 )) {
HXDLIN( 133)					byteoffset3 = 0;
            				}
HXDLIN( 133)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 133)				if (::hx::IsNotNull( elements3 )) {
HXDLIN( 133)					this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements3,4);
            				}
            				else {
HXDLIN( 133)					if (::hx::IsNotNull( array3 )) {
HXDLIN( 133)						 ::lime::utils::ArrayBufferView _this9 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 133)						_this9->byteOffset = 0;
HXDLIN( 133)						_this9->length = array3->get_length();
HXDLIN( 133)						_this9->byteLength = (_this9->length * _this9->bytesPerElement);
HXDLIN( 133)						_this9->buffer = ::haxe::io::Bytes_obj::alloc(_this9->byteLength);
HXDLIN( 133)						_this9->copyFromArray(array3,null());
HXDLIN( 133)						this5 = _this9;
            					}
            					else {
HXDLIN( 133)						if (::hx::IsNotNull( view4 )) {
HXDLIN( 133)							 ::lime::utils::ArrayBufferView _this10 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 133)							 ::haxe::io::Bytes srcData3 = view4->buffer;
HXDLIN( 133)							int srcLength6 = view4->length;
HXDLIN( 133)							int srcByteOffset3 = view4->byteOffset;
HXDLIN( 133)							int srcElementSize3 = view4->bytesPerElement;
HXDLIN( 133)							int elementSize6 = _this10->bytesPerElement;
HXDLIN( 133)							if ((view4->type == _this10->type)) {
HXDLIN( 133)								int srcLength7 = srcData3->length;
HXDLIN( 133)								int cloneLength3 = (srcLength7 - srcByteOffset3);
HXDLIN( 133)								_this10->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength3);
HXDLIN( 133)								_this10->buffer->blit(0,srcData3,srcByteOffset3,cloneLength3);
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            							}
HXDLIN( 133)							_this10->byteLength = (_this10->bytesPerElement * srcLength6);
HXDLIN( 133)							_this10->byteOffset = 0;
HXDLIN( 133)							_this10->length = srcLength6;
HXDLIN( 133)							this5 = _this10;
            						}
            						else {
HXDLIN( 133)							if (::hx::IsNotNull( buffer3 )) {
HXDLIN( 133)								 ::lime::utils::ArrayBufferView _this11 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 133)								int in_byteOffset3 = ( (int)(byteoffset3) );
HXDLIN( 133)								if ((in_byteOffset3 < 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								if ((::hx::Mod(in_byteOffset3,_this11->bytesPerElement) != 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								int bufferByteLength3 = buffer3->length;
HXDLIN( 133)								int elementSize7 = _this11->bytesPerElement;
HXDLIN( 133)								int newByteLength3 = bufferByteLength3;
HXDLIN( 133)								if (::hx::IsNull( len )) {
HXDLIN( 133)									newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 133)									if ((::hx::Mod(bufferByteLength3,_this11->bytesPerElement) != 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 133)									if ((newByteLength3 < 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXDLIN( 133)									newByteLength3 = (len * _this11->bytesPerElement);
HXDLIN( 133)									int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 133)									if ((newRange3 > bufferByteLength3)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 133)								_this11->buffer = buffer3;
HXDLIN( 133)								_this11->byteOffset = in_byteOffset3;
HXDLIN( 133)								_this11->byteLength = newByteLength3;
HXDLIN( 133)								_this11->length = ::Std_obj::_hx_int((( (Float)(newByteLength3) ) / ( (Float)(_this11->bytesPerElement) )));
HXDLIN( 133)								this5 = _this11;
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            							}
            						}
            					}
            				}
HXDLIN( 133)				view = this5;
            			}
            			break;
            			case (int)5: {
HXDLIN( 133)				 ::Dynamic elements4 = null();
HXDLIN( 133)				 ::haxe::io::Bytes buffer4 = this1->buffer;
HXDLIN( 133)				::cpp::VirtualArray array4 = null();
HXDLIN( 133)				 ::lime::utils::ArrayBufferView view5 = null();
HXDLIN( 133)				 ::Dynamic byteoffset4 = byte_offset;
HXDLIN( 133)				if (::hx::IsNull( byteoffset4 )) {
HXDLIN( 133)					byteoffset4 = 0;
            				}
HXDLIN( 133)				 ::lime::utils::ArrayBufferView this6;
HXDLIN( 133)				if (::hx::IsNotNull( elements4 )) {
HXDLIN( 133)					this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements4,5);
            				}
            				else {
HXDLIN( 133)					if (::hx::IsNotNull( array4 )) {
HXDLIN( 133)						 ::lime::utils::ArrayBufferView _this12 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 133)						_this12->byteOffset = 0;
HXDLIN( 133)						_this12->length = array4->get_length();
HXDLIN( 133)						_this12->byteLength = (_this12->length * _this12->bytesPerElement);
HXDLIN( 133)						_this12->buffer = ::haxe::io::Bytes_obj::alloc(_this12->byteLength);
HXDLIN( 133)						_this12->copyFromArray(array4,null());
HXDLIN( 133)						this6 = _this12;
            					}
            					else {
HXDLIN( 133)						if (::hx::IsNotNull( view5 )) {
HXDLIN( 133)							 ::lime::utils::ArrayBufferView _this13 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 133)							 ::haxe::io::Bytes srcData4 = view5->buffer;
HXDLIN( 133)							int srcLength8 = view5->length;
HXDLIN( 133)							int srcByteOffset4 = view5->byteOffset;
HXDLIN( 133)							int srcElementSize4 = view5->bytesPerElement;
HXDLIN( 133)							int elementSize8 = _this13->bytesPerElement;
HXDLIN( 133)							if ((view5->type == _this13->type)) {
HXDLIN( 133)								int srcLength9 = srcData4->length;
HXDLIN( 133)								int cloneLength4 = (srcLength9 - srcByteOffset4);
HXDLIN( 133)								_this13->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength4);
HXDLIN( 133)								_this13->buffer->blit(0,srcData4,srcByteOffset4,cloneLength4);
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            							}
HXDLIN( 133)							_this13->byteLength = (_this13->bytesPerElement * srcLength8);
HXDLIN( 133)							_this13->byteOffset = 0;
HXDLIN( 133)							_this13->length = srcLength8;
HXDLIN( 133)							this6 = _this13;
            						}
            						else {
HXDLIN( 133)							if (::hx::IsNotNull( buffer4 )) {
HXDLIN( 133)								 ::lime::utils::ArrayBufferView _this14 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 133)								int in_byteOffset4 = ( (int)(byteoffset4) );
HXDLIN( 133)								if ((in_byteOffset4 < 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								if ((::hx::Mod(in_byteOffset4,_this14->bytesPerElement) != 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								int bufferByteLength4 = buffer4->length;
HXDLIN( 133)								int elementSize9 = _this14->bytesPerElement;
HXDLIN( 133)								int newByteLength4 = bufferByteLength4;
HXDLIN( 133)								if (::hx::IsNull( len )) {
HXDLIN( 133)									newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 133)									if ((::hx::Mod(bufferByteLength4,_this14->bytesPerElement) != 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 133)									if ((newByteLength4 < 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXDLIN( 133)									newByteLength4 = (len * _this14->bytesPerElement);
HXDLIN( 133)									int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 133)									if ((newRange4 > bufferByteLength4)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 133)								_this14->buffer = buffer4;
HXDLIN( 133)								_this14->byteOffset = in_byteOffset4;
HXDLIN( 133)								_this14->byteLength = newByteLength4;
HXDLIN( 133)								_this14->length = ::Std_obj::_hx_int((( (Float)(newByteLength4) ) / ( (Float)(_this14->bytesPerElement) )));
HXDLIN( 133)								this6 = _this14;
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            							}
            						}
            					}
            				}
HXDLIN( 133)				view = this6;
            			}
            			break;
            			case (int)6: {
HXDLIN( 133)				 ::Dynamic elements5 = null();
HXDLIN( 133)				 ::haxe::io::Bytes buffer5 = this1->buffer;
HXDLIN( 133)				::cpp::VirtualArray array5 = null();
HXDLIN( 133)				 ::lime::utils::ArrayBufferView view6 = null();
HXDLIN( 133)				 ::Dynamic byteoffset5 = byte_offset;
HXDLIN( 133)				if (::hx::IsNull( byteoffset5 )) {
HXDLIN( 133)					byteoffset5 = 0;
            				}
HXDLIN( 133)				 ::lime::utils::ArrayBufferView this7;
HXDLIN( 133)				if (::hx::IsNotNull( elements5 )) {
HXDLIN( 133)					this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements5,6);
            				}
            				else {
HXDLIN( 133)					if (::hx::IsNotNull( array5 )) {
HXDLIN( 133)						 ::lime::utils::ArrayBufferView _this15 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 133)						_this15->byteOffset = 0;
HXDLIN( 133)						_this15->length = array5->get_length();
HXDLIN( 133)						_this15->byteLength = (_this15->length * _this15->bytesPerElement);
HXDLIN( 133)						_this15->buffer = ::haxe::io::Bytes_obj::alloc(_this15->byteLength);
HXDLIN( 133)						_this15->copyFromArray(array5,null());
HXDLIN( 133)						this7 = _this15;
            					}
            					else {
HXDLIN( 133)						if (::hx::IsNotNull( view6 )) {
HXDLIN( 133)							 ::lime::utils::ArrayBufferView _this16 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 133)							 ::haxe::io::Bytes srcData5 = view6->buffer;
HXDLIN( 133)							int srcLength10 = view6->length;
HXDLIN( 133)							int srcByteOffset5 = view6->byteOffset;
HXDLIN( 133)							int srcElementSize5 = view6->bytesPerElement;
HXDLIN( 133)							int elementSize10 = _this16->bytesPerElement;
HXDLIN( 133)							if ((view6->type == _this16->type)) {
HXDLIN( 133)								int srcLength11 = srcData5->length;
HXDLIN( 133)								int cloneLength5 = (srcLength11 - srcByteOffset5);
HXDLIN( 133)								_this16->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength5);
HXDLIN( 133)								_this16->buffer->blit(0,srcData5,srcByteOffset5,cloneLength5);
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            							}
HXDLIN( 133)							_this16->byteLength = (_this16->bytesPerElement * srcLength10);
HXDLIN( 133)							_this16->byteOffset = 0;
HXDLIN( 133)							_this16->length = srcLength10;
HXDLIN( 133)							this7 = _this16;
            						}
            						else {
HXDLIN( 133)							if (::hx::IsNotNull( buffer5 )) {
HXDLIN( 133)								 ::lime::utils::ArrayBufferView _this17 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 133)								int in_byteOffset5 = ( (int)(byteoffset5) );
HXDLIN( 133)								if ((in_byteOffset5 < 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								if ((::hx::Mod(in_byteOffset5,_this17->bytesPerElement) != 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								int bufferByteLength5 = buffer5->length;
HXDLIN( 133)								int elementSize11 = _this17->bytesPerElement;
HXDLIN( 133)								int newByteLength5 = bufferByteLength5;
HXDLIN( 133)								if (::hx::IsNull( len )) {
HXDLIN( 133)									newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 133)									if ((::hx::Mod(bufferByteLength5,_this17->bytesPerElement) != 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 133)									if ((newByteLength5 < 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXDLIN( 133)									newByteLength5 = (len * _this17->bytesPerElement);
HXDLIN( 133)									int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 133)									if ((newRange5 > bufferByteLength5)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 133)								_this17->buffer = buffer5;
HXDLIN( 133)								_this17->byteOffset = in_byteOffset5;
HXDLIN( 133)								_this17->byteLength = newByteLength5;
HXDLIN( 133)								_this17->length = ::Std_obj::_hx_int((( (Float)(newByteLength5) ) / ( (Float)(_this17->bytesPerElement) )));
HXDLIN( 133)								this7 = _this17;
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            							}
            						}
            					}
            				}
HXDLIN( 133)				view = this7;
            			}
            			break;
            			case (int)7: {
HXDLIN( 133)				 ::Dynamic elements6 = null();
HXDLIN( 133)				 ::haxe::io::Bytes buffer6 = this1->buffer;
HXDLIN( 133)				::cpp::VirtualArray array6 = null();
HXDLIN( 133)				 ::lime::utils::ArrayBufferView view7 = null();
HXDLIN( 133)				 ::Dynamic byteoffset6 = byte_offset;
HXDLIN( 133)				if (::hx::IsNull( byteoffset6 )) {
HXDLIN( 133)					byteoffset6 = 0;
            				}
HXDLIN( 133)				 ::lime::utils::ArrayBufferView this8;
HXDLIN( 133)				if (::hx::IsNotNull( elements6 )) {
HXDLIN( 133)					this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements6,7);
            				}
            				else {
HXDLIN( 133)					if (::hx::IsNotNull( array6 )) {
HXDLIN( 133)						 ::lime::utils::ArrayBufferView _this18 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 133)						_this18->byteOffset = 0;
HXDLIN( 133)						_this18->length = array6->get_length();
HXDLIN( 133)						_this18->byteLength = (_this18->length * _this18->bytesPerElement);
HXDLIN( 133)						_this18->buffer = ::haxe::io::Bytes_obj::alloc(_this18->byteLength);
HXDLIN( 133)						_this18->copyFromArray(array6,null());
HXDLIN( 133)						this8 = _this18;
            					}
            					else {
HXDLIN( 133)						if (::hx::IsNotNull( view7 )) {
HXDLIN( 133)							 ::lime::utils::ArrayBufferView _this19 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 133)							 ::haxe::io::Bytes srcData6 = view7->buffer;
HXDLIN( 133)							int srcLength12 = view7->length;
HXDLIN( 133)							int srcByteOffset6 = view7->byteOffset;
HXDLIN( 133)							int srcElementSize6 = view7->bytesPerElement;
HXDLIN( 133)							int elementSize12 = _this19->bytesPerElement;
HXDLIN( 133)							if ((view7->type == _this19->type)) {
HXDLIN( 133)								int srcLength13 = srcData6->length;
HXDLIN( 133)								int cloneLength6 = (srcLength13 - srcByteOffset6);
HXDLIN( 133)								_this19->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength6);
HXDLIN( 133)								_this19->buffer->blit(0,srcData6,srcByteOffset6,cloneLength6);
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            							}
HXDLIN( 133)							_this19->byteLength = (_this19->bytesPerElement * srcLength12);
HXDLIN( 133)							_this19->byteOffset = 0;
HXDLIN( 133)							_this19->length = srcLength12;
HXDLIN( 133)							this8 = _this19;
            						}
            						else {
HXDLIN( 133)							if (::hx::IsNotNull( buffer6 )) {
HXDLIN( 133)								 ::lime::utils::ArrayBufferView _this20 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 133)								int in_byteOffset6 = ( (int)(byteoffset6) );
HXDLIN( 133)								if ((in_byteOffset6 < 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								if ((::hx::Mod(in_byteOffset6,_this20->bytesPerElement) != 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								int bufferByteLength6 = buffer6->length;
HXDLIN( 133)								int elementSize13 = _this20->bytesPerElement;
HXDLIN( 133)								int newByteLength6 = bufferByteLength6;
HXDLIN( 133)								if (::hx::IsNull( len )) {
HXDLIN( 133)									newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 133)									if ((::hx::Mod(bufferByteLength6,_this20->bytesPerElement) != 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 133)									if ((newByteLength6 < 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXDLIN( 133)									newByteLength6 = (len * _this20->bytesPerElement);
HXDLIN( 133)									int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 133)									if ((newRange6 > bufferByteLength6)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 133)								_this20->buffer = buffer6;
HXDLIN( 133)								_this20->byteOffset = in_byteOffset6;
HXDLIN( 133)								_this20->byteLength = newByteLength6;
HXDLIN( 133)								_this20->length = ::Std_obj::_hx_int((( (Float)(newByteLength6) ) / ( (Float)(_this20->bytesPerElement) )));
HXDLIN( 133)								this8 = _this20;
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            							}
            						}
            					}
            				}
HXDLIN( 133)				view = this8;
            			}
            			break;
            			case (int)8: {
HXDLIN( 133)				 ::Dynamic elements7 = null();
HXDLIN( 133)				 ::haxe::io::Bytes buffer7 = this1->buffer;
HXDLIN( 133)				::cpp::VirtualArray array7 = null();
HXDLIN( 133)				 ::lime::utils::ArrayBufferView view8 = null();
HXDLIN( 133)				 ::Dynamic byteoffset7 = byte_offset;
HXDLIN( 133)				if (::hx::IsNull( byteoffset7 )) {
HXDLIN( 133)					byteoffset7 = 0;
            				}
HXDLIN( 133)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 133)				if (::hx::IsNotNull( elements7 )) {
HXDLIN( 133)					this9 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements7,8);
            				}
            				else {
HXDLIN( 133)					if (::hx::IsNotNull( array7 )) {
HXDLIN( 133)						 ::lime::utils::ArrayBufferView _this21 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 133)						_this21->byteOffset = 0;
HXDLIN( 133)						_this21->length = array7->get_length();
HXDLIN( 133)						_this21->byteLength = (_this21->length * _this21->bytesPerElement);
HXDLIN( 133)						_this21->buffer = ::haxe::io::Bytes_obj::alloc(_this21->byteLength);
HXDLIN( 133)						_this21->copyFromArray(array7,null());
HXDLIN( 133)						this9 = _this21;
            					}
            					else {
HXDLIN( 133)						if (::hx::IsNotNull( view8 )) {
HXDLIN( 133)							 ::lime::utils::ArrayBufferView _this22 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 133)							 ::haxe::io::Bytes srcData7 = view8->buffer;
HXDLIN( 133)							int srcLength14 = view8->length;
HXDLIN( 133)							int srcByteOffset7 = view8->byteOffset;
HXDLIN( 133)							int srcElementSize7 = view8->bytesPerElement;
HXDLIN( 133)							int elementSize14 = _this22->bytesPerElement;
HXDLIN( 133)							if ((view8->type == _this22->type)) {
HXDLIN( 133)								int srcLength15 = srcData7->length;
HXDLIN( 133)								int cloneLength7 = (srcLength15 - srcByteOffset7);
HXDLIN( 133)								_this22->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength7);
HXDLIN( 133)								_this22->buffer->blit(0,srcData7,srcByteOffset7,cloneLength7);
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            							}
HXDLIN( 133)							_this22->byteLength = (_this22->bytesPerElement * srcLength14);
HXDLIN( 133)							_this22->byteOffset = 0;
HXDLIN( 133)							_this22->length = srcLength14;
HXDLIN( 133)							this9 = _this22;
            						}
            						else {
HXDLIN( 133)							if (::hx::IsNotNull( buffer7 )) {
HXDLIN( 133)								 ::lime::utils::ArrayBufferView _this23 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 133)								int in_byteOffset7 = ( (int)(byteoffset7) );
HXDLIN( 133)								if ((in_byteOffset7 < 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								if ((::hx::Mod(in_byteOffset7,_this23->bytesPerElement) != 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								int bufferByteLength7 = buffer7->length;
HXDLIN( 133)								int elementSize15 = _this23->bytesPerElement;
HXDLIN( 133)								int newByteLength7 = bufferByteLength7;
HXDLIN( 133)								if (::hx::IsNull( len )) {
HXDLIN( 133)									newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 133)									if ((::hx::Mod(bufferByteLength7,_this23->bytesPerElement) != 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 133)									if ((newByteLength7 < 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXDLIN( 133)									newByteLength7 = (len * _this23->bytesPerElement);
HXDLIN( 133)									int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 133)									if ((newRange7 > bufferByteLength7)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 133)								_this23->buffer = buffer7;
HXDLIN( 133)								_this23->byteOffset = in_byteOffset7;
HXDLIN( 133)								_this23->byteLength = newByteLength7;
HXDLIN( 133)								_this23->length = ::Std_obj::_hx_int((( (Float)(newByteLength7) ) / ( (Float)(_this23->bytesPerElement) )));
HXDLIN( 133)								this9 = _this23;
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            							}
            						}
            					}
            				}
HXDLIN( 133)				view = this9;
            			}
            			break;
            			case (int)9: {
HXDLIN( 133)				 ::Dynamic elements8 = null();
HXDLIN( 133)				 ::haxe::io::Bytes buffer8 = this1->buffer;
HXDLIN( 133)				::cpp::VirtualArray array8 = null();
HXDLIN( 133)				 ::lime::utils::ArrayBufferView view9 = null();
HXDLIN( 133)				 ::Dynamic byteoffset8 = byte_offset;
HXDLIN( 133)				if (::hx::IsNull( byteoffset8 )) {
HXDLIN( 133)					byteoffset8 = 0;
            				}
HXDLIN( 133)				 ::lime::utils::ArrayBufferView this10;
HXDLIN( 133)				if (::hx::IsNotNull( elements8 )) {
HXDLIN( 133)					this10 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements8,9);
            				}
            				else {
HXDLIN( 133)					if (::hx::IsNotNull( array8 )) {
HXDLIN( 133)						 ::lime::utils::ArrayBufferView _this24 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 133)						_this24->byteOffset = 0;
HXDLIN( 133)						_this24->length = array8->get_length();
HXDLIN( 133)						_this24->byteLength = (_this24->length * _this24->bytesPerElement);
HXDLIN( 133)						_this24->buffer = ::haxe::io::Bytes_obj::alloc(_this24->byteLength);
HXDLIN( 133)						_this24->copyFromArray(array8,null());
HXDLIN( 133)						this10 = _this24;
            					}
            					else {
HXDLIN( 133)						if (::hx::IsNotNull( view9 )) {
HXDLIN( 133)							 ::lime::utils::ArrayBufferView _this25 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 133)							 ::haxe::io::Bytes srcData8 = view9->buffer;
HXDLIN( 133)							int srcLength16 = view9->length;
HXDLIN( 133)							int srcByteOffset8 = view9->byteOffset;
HXDLIN( 133)							int srcElementSize8 = view9->bytesPerElement;
HXDLIN( 133)							int elementSize16 = _this25->bytesPerElement;
HXDLIN( 133)							if ((view9->type == _this25->type)) {
HXDLIN( 133)								int srcLength17 = srcData8->length;
HXDLIN( 133)								int cloneLength8 = (srcLength17 - srcByteOffset8);
HXDLIN( 133)								_this25->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength8);
HXDLIN( 133)								_this25->buffer->blit(0,srcData8,srcByteOffset8,cloneLength8);
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            							}
HXDLIN( 133)							_this25->byteLength = (_this25->bytesPerElement * srcLength16);
HXDLIN( 133)							_this25->byteOffset = 0;
HXDLIN( 133)							_this25->length = srcLength16;
HXDLIN( 133)							this10 = _this25;
            						}
            						else {
HXDLIN( 133)							if (::hx::IsNotNull( buffer8 )) {
HXDLIN( 133)								 ::lime::utils::ArrayBufferView _this26 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 133)								int in_byteOffset8 = ( (int)(byteoffset8) );
HXDLIN( 133)								if ((in_byteOffset8 < 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								if ((::hx::Mod(in_byteOffset8,_this26->bytesPerElement) != 0)) {
HXDLIN( 133)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 133)								int bufferByteLength8 = buffer8->length;
HXDLIN( 133)								int elementSize17 = _this26->bytesPerElement;
HXDLIN( 133)								int newByteLength8 = bufferByteLength8;
HXDLIN( 133)								if (::hx::IsNull( len )) {
HXDLIN( 133)									newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 133)									if ((::hx::Mod(bufferByteLength8,_this26->bytesPerElement) != 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 133)									if ((newByteLength8 < 0)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXDLIN( 133)									newByteLength8 = (len * _this26->bytesPerElement);
HXDLIN( 133)									int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 133)									if ((newRange8 > bufferByteLength8)) {
HXDLIN( 133)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 133)								_this26->buffer = buffer8;
HXDLIN( 133)								_this26->byteOffset = in_byteOffset8;
HXDLIN( 133)								_this26->byteLength = newByteLength8;
HXDLIN( 133)								_this26->length = ::Std_obj::_hx_int((( (Float)(newByteLength8) ) / ( (Float)(_this26->bytesPerElement) )));
HXDLIN( 133)								this10 = _this26;
            							}
            							else {
HXDLIN( 133)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            							}
            						}
            					}
            				}
HXDLIN( 133)				view = this10;
            			}
            			break;
            		}
HXDLIN( 133)		return view;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Float64Array_Impl__obj,subarray,return )

 ::lime::utils::ArrayBufferView Float64Array_Impl__obj::fromBytes( ::haxe::io::Bytes bytes, ::Dynamic __o_byteOffset, ::Dynamic len){
            		 ::Dynamic byteOffset = __o_byteOffset;
            		if (::hx::IsNull(__o_byteOffset)) byteOffset = 0;
            	HX_GC_STACKFRAME(&_hx_pos_8b7b048dadc59c63_138_fromBytes)
HXDLIN( 138)		 ::Dynamic elements = null();
HXDLIN( 138)		::cpp::VirtualArray array = null();
HXDLIN( 138)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 138)		 ::Dynamic byteoffset = byteOffset;
HXDLIN( 138)		if (::hx::IsNull( byteoffset )) {
HXDLIN( 138)			byteoffset = 0;
            		}
HXDLIN( 138)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 138)		if (::hx::IsNotNull( elements )) {
HXDLIN( 138)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,9);
            		}
            		else {
HXDLIN( 138)			if (::hx::IsNotNull( array )) {
HXDLIN( 138)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 138)				_this->byteOffset = 0;
HXDLIN( 138)				_this->length = array->get_length();
HXDLIN( 138)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 138)				_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 138)				_this->copyFromArray(array,null());
HXDLIN( 138)				this1 = _this;
            			}
            			else {
HXDLIN( 138)				if (::hx::IsNotNull( view )) {
HXDLIN( 138)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 138)					 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 138)					int srcLength = view->length;
HXDLIN( 138)					int srcByteOffset = view->byteOffset;
HXDLIN( 138)					int srcElementSize = view->bytesPerElement;
HXDLIN( 138)					int elementSize = _this1->bytesPerElement;
HXDLIN( 138)					if ((view->type == _this1->type)) {
HXDLIN( 138)						int srcLength1 = srcData->length;
HXDLIN( 138)						int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 138)						_this1->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 138)						_this1->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            					}
            					else {
HXDLIN( 138)						HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            					}
HXDLIN( 138)					_this1->byteLength = (_this1->bytesPerElement * srcLength);
HXDLIN( 138)					_this1->byteOffset = 0;
HXDLIN( 138)					_this1->length = srcLength;
HXDLIN( 138)					this1 = _this1;
            				}
            				else {
HXDLIN( 138)					if (::hx::IsNotNull( bytes )) {
HXDLIN( 138)						 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 138)						int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 138)						if ((in_byteOffset < 0)) {
HXDLIN( 138)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 138)						if ((::hx::Mod(in_byteOffset,_this2->bytesPerElement) != 0)) {
HXDLIN( 138)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 138)						int bufferByteLength = bytes->length;
HXDLIN( 138)						int elementSize1 = _this2->bytesPerElement;
HXDLIN( 138)						int newByteLength = bufferByteLength;
HXDLIN( 138)						if (::hx::IsNull( len )) {
HXDLIN( 138)							newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 138)							if ((::hx::Mod(bufferByteLength,_this2->bytesPerElement) != 0)) {
HXDLIN( 138)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN( 138)							if ((newByteLength < 0)) {
HXDLIN( 138)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
            						}
            						else {
HXDLIN( 138)							newByteLength = (( (int)(len) ) * _this2->bytesPerElement);
HXDLIN( 138)							int newRange = (in_byteOffset + newByteLength);
HXDLIN( 138)							if ((newRange > bufferByteLength)) {
HXDLIN( 138)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
            						}
HXDLIN( 138)						_this2->buffer = bytes;
HXDLIN( 138)						_this2->byteOffset = in_byteOffset;
HXDLIN( 138)						_this2->byteLength = newByteLength;
HXDLIN( 138)						_this2->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this2->bytesPerElement) )));
HXDLIN( 138)						this1 = _this2;
            					}
            					else {
HXDLIN( 138)						HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            					}
            				}
            			}
            		}
HXDLIN( 138)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Float64Array_Impl__obj,fromBytes,return )

 ::haxe::io::Bytes Float64Array_Impl__obj::toBytes( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_8b7b048dadc59c63_143_toBytes)
HXDLIN( 143)		return this1->buffer;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float64Array_Impl__obj,toBytes,return )

int Float64Array_Impl__obj::get_length( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_8b7b048dadc59c63_148_get_length)
HXDLIN( 148)		return this1->length;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float64Array_Impl__obj,get_length,return )

::String Float64Array_Impl__obj::toString( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_8b7b048dadc59c63_166_toString)
HXDLIN( 166)		if (::hx::IsNotNull( this1 )) {
HXDLIN( 166)			return ((((HX_("Float64Array [byteLength:",32,73,38,ac) + this1->byteLength) + HX_(", length:",a0,04,67,ef)) + this1->length) + HX_("]",5d,00,00,00));
            		}
            		else {
HXDLIN( 166)			return null();
            		}
HXDLIN( 166)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float64Array_Impl__obj,toString,return )


Float64Array_Impl__obj::Float64Array_Impl__obj()
{
}

bool Float64Array_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toBytes") ) { outValue = toBytes_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"subarray") ) { outValue = subarray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Float64Array_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Float64Array_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Float64Array_Impl__obj::BYTES_PER_ELEMENT,HX_("BYTES_PER_ELEMENT",a6,04,1d,cc)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Float64Array_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Float64Array_Impl__obj::BYTES_PER_ELEMENT,"BYTES_PER_ELEMENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Float64Array_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Float64Array_Impl__obj::BYTES_PER_ELEMENT,"BYTES_PER_ELEMENT");
};

#endif

::hx::Class Float64Array_Impl__obj::__mClass;

static ::String Float64Array_Impl__obj_sStaticFields[] = {
	HX_("BYTES_PER_ELEMENT",a6,04,1d,cc),
	HX_("_new",61,15,1f,3f),
	HX_("subarray",19,54,81,07),
	HX_("fromBytes",a1,f2,20,72),
	HX_("toBytes",f0,54,1c,8a),
	HX_("get_length",af,04,8f,8f),
	HX_("toString",ac,d0,6e,38),
	::String(null())
};

void Float64Array_Impl__obj::__register()
{
	Float64Array_Impl__obj _hx_dummy;
	Float64Array_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("lime.utils._Float64Array.Float64Array_Impl_",85,fe,f5,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Float64Array_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Float64Array_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Float64Array_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Float64Array_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Float64Array_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Float64Array_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Float64Array_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Float64Array_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_8b7b048dadc59c63_93_boot)
HXDLIN(  93)		BYTES_PER_ELEMENT = 8;
            	}
}

} // end namespace lime
} // end namespace utils
} // end namespace _Float64Array
