// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_MatrixUtils
#include <MatrixUtils.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_math__Matrix4_Matrix4_Impl_
#include <lime/math/_Matrix4/Matrix4_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e6c0ab85770aefb5_5_createLookAtMatrix,"MatrixUtils","createLookAtMatrix",0xf4e40bcd,"MatrixUtils.createLookAtMatrix","MatrixUtils.hx",5,0x35ef7cae)
HX_LOCAL_STACK_FRAME(_hx_pos_e6c0ab85770aefb5_35_createPerspective,"MatrixUtils","createPerspective",0x078a2002,"MatrixUtils.createPerspective","MatrixUtils.hx",35,0x35ef7cae)
HX_LOCAL_STACK_FRAME(_hx_pos_e6c0ab85770aefb5_52_vecToArray,"MatrixUtils","vecToArray",0x45efa1c8,"MatrixUtils.vecToArray","MatrixUtils.hx",52,0x35ef7cae)

void MatrixUtils_obj::__construct() { }

Dynamic MatrixUtils_obj::__CreateEmpty() { return new MatrixUtils_obj; }

void *MatrixUtils_obj::_hx_vtable = 0;

Dynamic MatrixUtils_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MatrixUtils_obj > _hx_result = new MatrixUtils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MatrixUtils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04c4fe30;
}

 ::lime::utils::ArrayBufferView MatrixUtils_obj::createLookAtMatrix( ::lime::math::Vector4 cameraPos, ::lime::math::Vector4 target, ::lime::math::Vector4 up){
            	HX_GC_STACKFRAME(&_hx_pos_e6c0ab85770aefb5_5_createLookAtMatrix)
HXLINE(   6)		 ::lime::math::Vector4 result = null();
HXDLIN(   6)		if (::hx::IsNull( result )) {
HXLINE(   6)			result =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXDLIN(   6)		{
HXLINE(   6)			result->x = (cameraPos->x - target->x);
HXDLIN(   6)			result->y = (cameraPos->y - target->y);
HXDLIN(   6)			result->z = (cameraPos->z - target->z);
            		}
HXDLIN(   6)		 ::lime::math::Vector4 cameraDir = result;
HXLINE(   7)		{
HXLINE(   7)			Float l = ::Math_obj::sqrt((((cameraDir->x * cameraDir->x) + (cameraDir->y * cameraDir->y)) + (cameraDir->z * cameraDir->z)));
HXDLIN(   7)			if ((l != 0)) {
HXLINE(   7)				 ::lime::math::Vector4 cameraDir1 = cameraDir;
HXDLIN(   7)				cameraDir1->x = (cameraDir1->x / l);
HXDLIN(   7)				 ::lime::math::Vector4 cameraDir2 = cameraDir;
HXDLIN(   7)				cameraDir2->y = (cameraDir2->y / l);
HXDLIN(   7)				 ::lime::math::Vector4 cameraDir3 = cameraDir;
HXDLIN(   7)				cameraDir3->z = (cameraDir3->z / l);
            			}
            		}
HXLINE(   8)		 ::lime::math::Vector4 result1 = null();
HXDLIN(   8)		if (::hx::IsNull( result1 )) {
HXLINE(   8)			result1 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXDLIN(   8)		{
HXLINE(   8)			Float ya = ((up->z * cameraDir->x) - (up->x * cameraDir->z));
HXDLIN(   8)			Float za = ((up->x * cameraDir->y) - (up->y * cameraDir->x));
HXDLIN(   8)			result1->x = ((up->y * cameraDir->z) - (up->z * cameraDir->y));
HXDLIN(   8)			result1->y = ya;
HXDLIN(   8)			result1->z = za;
            		}
HXDLIN(   8)		result1->w = ( (Float)(1) );
HXDLIN(   8)		 ::lime::math::Vector4 cameraRight = result1;
HXLINE(   9)		{
HXLINE(   9)			Float l1 = ::Math_obj::sqrt((((cameraRight->x * cameraRight->x) + (cameraRight->y * cameraRight->y)) + (cameraRight->z * cameraRight->z)));
HXDLIN(   9)			if ((l1 != 0)) {
HXLINE(   9)				 ::lime::math::Vector4 cameraRight1 = cameraRight;
HXDLIN(   9)				cameraRight1->x = (cameraRight1->x / l1);
HXDLIN(   9)				 ::lime::math::Vector4 cameraRight2 = cameraRight;
HXDLIN(   9)				cameraRight2->y = (cameraRight2->y / l1);
HXDLIN(   9)				 ::lime::math::Vector4 cameraRight3 = cameraRight;
HXDLIN(   9)				cameraRight3->z = (cameraRight3->z / l1);
            			}
            		}
HXLINE(  10)		 ::lime::math::Vector4 result2 = null();
HXDLIN(  10)		if (::hx::IsNull( result2 )) {
HXLINE(  10)			result2 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXDLIN(  10)		{
HXLINE(  10)			Float ya1 = ((cameraDir->z * cameraRight->x) - (cameraDir->x * cameraRight->z));
HXDLIN(  10)			Float za1 = ((cameraDir->x * cameraRight->y) - (cameraDir->y * cameraRight->x));
HXDLIN(  10)			result2->x = ((cameraDir->y * cameraRight->z) - (cameraDir->z * cameraRight->y));
HXDLIN(  10)			result2->y = ya1;
HXDLIN(  10)			result2->z = za1;
            		}
HXDLIN(  10)		result2->w = ( (Float)(1) );
HXDLIN(  10)		 ::lime::math::Vector4 cameraUp = result2;
HXLINE(  11)		{
HXLINE(  11)			Float l2 = ::Math_obj::sqrt((((cameraUp->x * cameraUp->x) + (cameraUp->y * cameraUp->y)) + (cameraUp->z * cameraUp->z)));
HXDLIN(  11)			if ((l2 != 0)) {
HXLINE(  11)				 ::lime::math::Vector4 cameraUp1 = cameraUp;
HXDLIN(  11)				cameraUp1->x = (cameraUp1->x / l2);
HXDLIN(  11)				 ::lime::math::Vector4 cameraUp2 = cameraUp;
HXDLIN(  11)				cameraUp2->y = (cameraUp2->y / l2);
HXDLIN(  11)				 ::lime::math::Vector4 cameraUp3 = cameraUp;
HXDLIN(  11)				cameraUp3->z = (cameraUp3->z / l2);
            			}
            		}
HXLINE(  12)		 ::lime::utils::ArrayBufferView cameraMat = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE(  14)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,0,cameraRight->x);
HXLINE(  15)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,1,cameraUp->x);
HXLINE(  16)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,2,cameraDir->x);
HXLINE(  17)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,3,((Float)0.0));
HXLINE(  18)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,4,cameraRight->y);
HXLINE(  19)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,5,cameraUp->y);
HXLINE(  20)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,6,cameraDir->y);
HXLINE(  21)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,7,((Float)0.0));
HXLINE(  22)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,8,cameraRight->z);
HXLINE(  23)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,9,cameraUp->z);
HXLINE(  24)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,10,cameraDir->z);
HXLINE(  25)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,11,((Float)0.0));
HXLINE(  26)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,12,-(cameraPos->x));
HXLINE(  27)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,13,-(cameraPos->y));
HXLINE(  28)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,14,-(cameraPos->z));
HXLINE(  29)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(cameraMat,15,((Float)1.0));
HXLINE(  31)		return cameraMat;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MatrixUtils_obj,createLookAtMatrix,return )

void MatrixUtils_obj::createPerspective( ::lime::utils::ArrayBufferView mat,Float fovy,Float aspect,Float zNear,Float zFar){
            	HX_STACKFRAME(&_hx_pos_e6c0ab85770aefb5_35_createPerspective)
HXDLIN(  35)		if ((::Math_obj::abs((aspect - ::Math_obj::pow(( (Float)(2) ),( (Float)(-23) )))) > ((Float)0.0))) {
HXLINE(  36)			Float top = (::Math_obj::tan(fovy) * zNear);
HXLINE(  37)			Float bottom = -(top);
HXLINE(  38)			Float right = (top * aspect);
HXLINE(  39)			Float left = -(right);
HXLINE(  41)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(mat,0,((((Float)2.0) * zNear) / (right - left)));
HXLINE(  42)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(mat,5,((((Float)2.0) * zNear) / (top - bottom)));
HXLINE(  43)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(mat,8,((right + left) / (right - left)));
HXLINE(  44)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(mat,9,((top + bottom) / (top - bottom)));
HXLINE(  45)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(mat,10,(-((zFar + zNear)) / (zFar - zNear)));
HXLINE(  46)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(mat,11,((Float)-1.0));
HXLINE(  47)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(mat,14,(((( (Float)(-2) ) * zFar) * zNear) / (zFar - zNear)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(MatrixUtils_obj,createPerspective,(void))

::Array< Float > MatrixUtils_obj::vecToArray( ::lime::math::Vector4 vec){
            	HX_STACKFRAME(&_hx_pos_e6c0ab85770aefb5_52_vecToArray)
HXDLIN(  52)		return ::Array_obj< Float >::__new(3)->init(0,vec->x)->init(1,vec->y)->init(2,vec->z);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MatrixUtils_obj,vecToArray,return )


MatrixUtils_obj::MatrixUtils_obj()
{
}

bool MatrixUtils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"vecToArray") ) { outValue = vecToArray_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"createPerspective") ) { outValue = createPerspective_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createLookAtMatrix") ) { outValue = createLookAtMatrix_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *MatrixUtils_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *MatrixUtils_obj_sStaticStorageInfo = 0;
#endif

::hx::Class MatrixUtils_obj::__mClass;

static ::String MatrixUtils_obj_sStaticFields[] = {
	HX_("createLookAtMatrix",2f,4e,67,70),
	HX_("createPerspective",e0,bf,92,13),
	HX_("vecToArray",2a,b2,78,b9),
	::String(null())
};

void MatrixUtils_obj::__register()
{
	MatrixUtils_obj _hx_dummy;
	MatrixUtils_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MatrixUtils",10,30,25,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MatrixUtils_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MatrixUtils_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< MatrixUtils_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MatrixUtils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MatrixUtils_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

