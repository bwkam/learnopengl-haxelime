// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_input2action_ActionState
#include <input2action/ActionState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_28349780f1f80ab2_284_new,"input2action.ActionState","new",0x458616fd,"input2action.ActionState.new","input2action/InputState.hx",284,0x5f7e1ce6)
namespace input2action{

void ActionState_obj::__construct( ::Dynamic up, ::Dynamic each, ::Dynamic repeatKeyboardDefault, ::Dynamic repeatDelay, ::Dynamic repeatRate,bool single, ::Dynamic action,int player){
            	HX_STACKFRAME(&_hx_pos_28349780f1f80ab2_284_new)
HXLINE( 299)		this->action = null();
HXLINE( 291)		this->repeatRate = 0;
HXLINE( 290)		this->repeatDelay = 0;
HXLINE( 289)		this->repeatKeyboardDefault = false;
HXLINE( 286)		this->each = false;
HXLINE( 285)		this->up = false;
HXLINE( 318)		if (::hx::IsNotNull( up )) {
HXLINE( 318)			this->up = ( (bool)(up) );
            		}
HXLINE( 319)		if (::hx::IsNotNull( each )) {
HXLINE( 319)			this->each = ( (bool)(each) );
            		}
HXLINE( 322)		if (::hx::IsNotNull( repeatKeyboardDefault )) {
HXLINE( 322)			this->repeatKeyboardDefault = ( (bool)(repeatKeyboardDefault) );
            		}
HXLINE( 323)		if (::hx::IsNotNull( repeatDelay )) {
HXLINE( 323)			this->repeatDelay = ( (int)(repeatDelay) );
            		}
HXLINE( 324)		if (::hx::IsNotNull( repeatRate )) {
HXLINE( 324)			this->repeatRate = ( (int)(repeatRate) );
            		}
HXLINE( 327)		this->single = single;
HXLINE( 328)		this->action = action;
HXLINE( 329)		this->player = player;
            	}

Dynamic ActionState_obj::__CreateEmpty() { return new ActionState_obj; }

void *ActionState_obj::_hx_vtable = 0;

Dynamic ActionState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ActionState_obj > _hx_result = new ActionState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool ActionState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x17622999;
}


ActionState_obj::ActionState_obj()
{
}

void ActionState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ActionState);
	HX_MARK_MEMBER_NAME(up,"up");
	HX_MARK_MEMBER_NAME(each,"each");
	HX_MARK_MEMBER_NAME(repeatKeyboardDefault,"repeatKeyboardDefault");
	HX_MARK_MEMBER_NAME(repeatDelay,"repeatDelay");
	HX_MARK_MEMBER_NAME(repeatRate,"repeatRate");
	HX_MARK_MEMBER_NAME(single,"single");
	HX_MARK_MEMBER_NAME(action,"action");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_END_CLASS();
}

void ActionState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(up,"up");
	HX_VISIT_MEMBER_NAME(each,"each");
	HX_VISIT_MEMBER_NAME(repeatKeyboardDefault,"repeatKeyboardDefault");
	HX_VISIT_MEMBER_NAME(repeatDelay,"repeatDelay");
	HX_VISIT_MEMBER_NAME(repeatRate,"repeatRate");
	HX_VISIT_MEMBER_NAME(single,"single");
	HX_VISIT_MEMBER_NAME(action,"action");
	HX_VISIT_MEMBER_NAME(player,"player");
}

::hx::Val ActionState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { return ::hx::Val( up ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"each") ) { return ::hx::Val( each ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"single") ) { return ::hx::Val( single ); }
		if (HX_FIELD_EQ(inName,"action") ) { return ::hx::Val( action ); }
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"repeatRate") ) { return ::hx::Val( repeatRate ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"repeatDelay") ) { return ::hx::Val( repeatDelay ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"repeatKeyboardDefault") ) { return ::hx::Val( repeatKeyboardDefault ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ActionState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { up=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"each") ) { each=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"single") ) { single=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"action") ) { action=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"repeatRate") ) { repeatRate=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"repeatDelay") ) { repeatDelay=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"repeatKeyboardDefault") ) { repeatKeyboardDefault=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ActionState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("up",5b,66,00,00));
	outFields->push(HX_("each",01,7e,0c,43));
	outFields->push(HX_("repeatKeyboardDefault",bf,25,b3,df));
	outFields->push(HX_("repeatDelay",28,26,4e,a8));
	outFields->push(HX_("repeatRate",db,5f,08,12));
	outFields->push(HX_("single",88,66,21,b9));
	outFields->push(HX_("player",61,eb,b8,37));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ActionState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(ActionState_obj,up),HX_("up",5b,66,00,00)},
	{::hx::fsBool,(int)offsetof(ActionState_obj,each),HX_("each",01,7e,0c,43)},
	{::hx::fsBool,(int)offsetof(ActionState_obj,repeatKeyboardDefault),HX_("repeatKeyboardDefault",bf,25,b3,df)},
	{::hx::fsInt,(int)offsetof(ActionState_obj,repeatDelay),HX_("repeatDelay",28,26,4e,a8)},
	{::hx::fsInt,(int)offsetof(ActionState_obj,repeatRate),HX_("repeatRate",db,5f,08,12)},
	{::hx::fsBool,(int)offsetof(ActionState_obj,single),HX_("single",88,66,21,b9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ActionState_obj,action),HX_("action",b6,3b,46,16)},
	{::hx::fsInt,(int)offsetof(ActionState_obj,player),HX_("player",61,eb,b8,37)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ActionState_obj_sStaticStorageInfo = 0;
#endif

static ::String ActionState_obj_sMemberFields[] = {
	HX_("up",5b,66,00,00),
	HX_("each",01,7e,0c,43),
	HX_("repeatKeyboardDefault",bf,25,b3,df),
	HX_("repeatDelay",28,26,4e,a8),
	HX_("repeatRate",db,5f,08,12),
	HX_("single",88,66,21,b9),
	HX_("action",b6,3b,46,16),
	HX_("player",61,eb,b8,37),
	::String(null()) };

::hx::Class ActionState_obj::__mClass;

void ActionState_obj::__register()
{
	ActionState_obj _hx_dummy;
	ActionState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("input2action.ActionState",8b,d4,9d,18);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ActionState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ActionState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ActionState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ActionState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace input2action
