// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_input2action_ActionConfigItem
#include <input2action/ActionConfigItem.h>
#endif
#ifndef INCLUDED_input2action_ActionState
#include <input2action/ActionState.h>
#endif
#ifndef INCLUDED_input2action_Input2Action
#include <input2action/Input2Action.h>
#endif
#ifndef INCLUDED_input2action__InputState_InputState_Impl_
#include <input2action/_InputState/InputState_Impl_.h>
#endif
#ifndef INCLUDED_input2action__InputState_KeyCombo
#include <input2action/_InputState/KeyCombo.h>
#endif
#ifndef INCLUDED_input2action__InputState_KeyState
#include <input2action/_InputState/KeyState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c2587fc9c5219800_29_new,"input2action.Input2Action","new",0x1c0992a0,"input2action.Input2Action.new","input2action/Input2Action.hx",29,0x7dd7c9ef)
HX_LOCAL_STACK_FRAME(_hx_pos_c2587fc9c5219800_65_getOrCreateActionState,"input2action.Input2Action","getOrCreateActionState",0x8b2f4b06,"input2action.Input2Action.getOrCreateActionState","input2action/Input2Action.hx",65,0x7dd7c9ef)
HX_LOCAL_STACK_FRAME(_hx_pos_c2587fc9c5219800_115_setKeyboard,"input2action.Input2Action","setKeyboard",0x9f2c88a9,"input2action.Input2Action.setKeyboard","input2action/Input2Action.hx",115,0x7dd7c9ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8c236397d6731f_33_boot,"input2action.Input2Action","boot",0x646fb9f2,"input2action.Input2Action.boot","input2action/util/EnumMacros.hx",33,0xd14468da)
namespace input2action{

void Input2Action_obj::__construct(::Array< ::Dynamic> actionConfig, ::haxe::ds::StringMap actionMap){
            	HX_STACKFRAME(&_hx_pos_c2587fc9c5219800_29_new)
HXLINE(  63)		this->actionStatePlayers = ::Array_obj< ::Dynamic>::__new(8);
HXLINE(  36)		this->actionMap = actionMap;
HXLINE(  37)		this->actionConfigDefault = actionConfig;
            	}

Dynamic Input2Action_obj::__CreateEmpty() { return new Input2Action_obj; }

void *Input2Action_obj::_hx_vtable = 0;

Dynamic Input2Action_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Input2Action_obj > _hx_result = new Input2Action_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Input2Action_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x477219e0;
}

 ::input2action::ActionState Input2Action_obj::getOrCreateActionState( ::Dynamic actionMapItem, ::input2action::ActionConfigItem actionConfigItem,int player){
            	HX_GC_STACKFRAME(&_hx_pos_c2587fc9c5219800_65_getOrCreateActionState)
HXLINE(  66)		 ::haxe::ds::StringMap actionStatePlayer = ( ( ::haxe::ds::StringMap)(_hx_array_unsafe_get(this->actionStatePlayers,player)) );
HXLINE(  67)		if (::hx::IsNull( actionStatePlayer )) {
HXLINE(  68)			actionStatePlayer =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  69)			this->actionStatePlayers->__unsafe_set(player,actionStatePlayer);
            		}
HXLINE(  71)		 ::input2action::ActionState actionState = ( ( ::input2action::ActionState)(actionStatePlayer->get(actionConfigItem->action)) );
HXLINE(  72)		if (::hx::IsNull( actionState )) {
HXLINE(  74)			actionState =  ::input2action::ActionState_obj::__alloc( HX_CTX ,actionMapItem->__Field(HX_("up",5b,66,00,00),::hx::paccDynamic),actionMapItem->__Field(HX_("each",01,7e,0c,43),::hx::paccDynamic),actionMapItem->__Field(HX_("repeatKeyboardDefault",bf,25,b3,df),::hx::paccDynamic),actionMapItem->__Field(HX_("repeatDelay",28,26,4e,a8),::hx::paccDynamic),actionMapItem->__Field(HX_("repeatRate",db,5f,08,12),::hx::paccDynamic),actionConfigItem->single,actionMapItem->__Field(HX_("action",b6,3b,46,16),::hx::paccDynamic),player);
HXLINE(  84)			actionStatePlayer->set(actionConfigItem->action,actionState);
            		}
HXLINE(  86)		return actionState;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Input2Action_obj,getOrCreateActionState,return )

void Input2Action_obj::setKeyboard(::hx::Null< int >  __o_player,::Array< ::Dynamic> actionConfig){
            		int player = __o_player.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_c2587fc9c5219800_115_setKeyboard)
HXLINE( 117)		if (::hx::IsNull( actionConfig )) {
HXLINE( 117)			actionConfig = this->actionConfigDefault;
            		}
HXLINE( 122)		 ::Dynamic actionMapItem;
HXLINE( 123)		int key;
HXLINE( 124)		int modkey;
HXLINE( 126)		if (::hx::IsNull( this->keyboardState )) {
HXLINE( 126)			this->keyboardState = ::Array_obj< ::Dynamic>::__new(354);
            		}
HXLINE( 128)		{
HXLINE( 128)			int _g = 0;
HXDLIN( 128)			::Array< ::Dynamic> _g1 = actionConfig;
HXDLIN( 128)			while((_g < _g1->length)){
HXLINE( 128)				 ::input2action::ActionConfigItem actionConfigItem = _g1->__get(_g).StaticCast<  ::input2action::ActionConfigItem >();
HXDLIN( 128)				_g = (_g + 1);
HXLINE( 130)				bool _hx_tmp;
HXDLIN( 130)				if (::hx::IsNotNull( actionConfigItem->keyboard )) {
HXLINE( 130)					_hx_tmp = (actionConfigItem->keyboard->length != 0);
            				}
            				else {
HXLINE( 130)					_hx_tmp = false;
            				}
HXDLIN( 130)				if (_hx_tmp) {
HXLINE( 132)					actionMapItem = this->actionMap->get(actionConfigItem->action);
HXLINE( 133)					bool _hx_tmp1;
HXDLIN( 133)					if (::hx::IsNotNull( actionMapItem )) {
HXLINE( 133)						_hx_tmp1 = ::hx::IsNotNull( actionMapItem->__Field(HX_("action",b6,3b,46,16),::hx::paccDynamic) );
            					}
            					else {
HXLINE( 133)						_hx_tmp1 = false;
            					}
HXDLIN( 133)					if (_hx_tmp1) {
HXLINE( 135)						 ::input2action::ActionState actionState = this->getOrCreateActionState(actionMapItem,actionConfigItem,player);
HXLINE( 137)						{
HXLINE( 137)							int _g2 = 0;
HXDLIN( 137)							::Array< ::Dynamic> _g3 = actionConfigItem->keyboard;
HXDLIN( 137)							while((_g2 < _g3->length)){
HXLINE( 137)								::Array< int > keys = _g3->__get(_g2).StaticCast< ::Array< int > >();
HXDLIN( 137)								_g2 = (_g2 + 1);
HXLINE( 138)								switch((int)(keys->length)){
            									case (int)1: {
HXLINE( 140)										int k = keys->__get(0);
HXDLIN( 140)										if ((k < (int)1073741881)) {
HXLINE( 140)											key = k;
            										}
            										else {
HXLINE( 140)											key = ((k - (int)1073741881) + (127 + 1));
            										}
HXDLIN( 140)										modkey = -1;
            									}
            									break;
            									case (int)2: {
HXLINE( 145)										int k1 = keys->__get(1);
HXDLIN( 145)										if ((k1 < (int)1073741881)) {
HXLINE( 145)											key = k1;
            										}
            										else {
HXLINE( 145)											key = ((k1 - (int)1073741881) + (127 + 1));
            										}
HXDLIN( 145)										int k2 = keys->__get(0);
HXDLIN( 145)										if ((k2 < (int)1073741881)) {
HXLINE( 145)											modkey = k2;
            										}
            										else {
HXLINE( 145)											modkey = ((k2 - (int)1073741881) + (127 + 1));
            										}
            									}
            									break;
            									default:{
HXLINE( 147)										HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,HX_("Only one modifier per key-combination is allowed for.",36,88,2b,8d),null(),null()));
            									}
            								}
HXLINE( 150)								{
HXLINE( 150)									::Array< ::Dynamic> this1 = this->keyboardState;
HXDLIN( 150)									 ::input2action::_InputState::KeyState keyState = ( ( ::input2action::_InputState::KeyState)(_hx_array_unsafe_get(this1,key)) );
HXDLIN( 150)									if (::hx::IsNull( keyState )) {
HXLINE( 150)										keyState =  ::input2action::_InputState::KeyState_obj::__alloc( HX_CTX );
HXDLIN( 150)										this1->__unsafe_set(key,keyState);
            									}
HXDLIN( 150)									if (::hx::IsNull( keyState->keyCombo )) {
HXLINE( 150)										keyState->keyCombo = ::Array_obj< ::Dynamic>::__new();
            									}
            									else {
HXLINE( 150)										int _g4 = 0;
HXDLIN( 150)										::Array< ::Dynamic> _g5 = keyState->keyCombo;
HXDLIN( 150)										while((_g4 < _g5->length)){
HXLINE( 150)											 ::input2action::_InputState::KeyCombo ma = _g5->__get(_g4).StaticCast<  ::input2action::_InputState::KeyCombo >();
HXDLIN( 150)											_g4 = (_g4 + 1);
HXDLIN( 150)											if ((ma->keyCode == modkey)) {
HXLINE( 150)												::String modKeyCodeName;
HXDLIN( 150)												if ((modkey > -1)) {
HXLINE( 150)													::String modKeyCodeName1 = ((HX_("",00,00,00,00) + ::input2action::_InputState::InputState_Impl__obj::keyCodeName(this1,modkey)) + HX_(" + ",b5,6d,18,00));
HXDLIN( 150)													modKeyCodeName = (modKeyCodeName1 + ::input2action::_InputState::InputState_Impl__obj::keyCodeName(this1,key));
            												}
            												else {
HXLINE( 150)													modKeyCodeName = ::input2action::_InputState::InputState_Impl__obj::keyCodeName(this1,key);
            												}
HXDLIN( 150)												 ::input2action::ActionState actionStateAlready = ma->actionState;
HXDLIN( 150)												HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,((HX_("",00,00,00,00) + modKeyCodeName) + HX_(" is already defined for an action",fd,16,4c,78)),null(),null()));
            											}
            										}
            									}
HXDLIN( 150)									bool _hx_tmp2;
HXDLIN( 150)									if ((modkey > -1)) {
HXLINE( 150)										_hx_tmp2 = ::hx::IsNull( ( ( ::input2action::_InputState::KeyState)(_hx_array_unsafe_get(this1,modkey)) ) );
            									}
            									else {
HXLINE( 150)										_hx_tmp2 = false;
            									}
HXDLIN( 150)									if (_hx_tmp2) {
HXLINE( 150)										 ::input2action::_InputState::KeyState val =  ::input2action::_InputState::KeyState_obj::__alloc( HX_CTX );
HXDLIN( 150)										this1->__unsafe_set(modkey,val);
            									}
HXDLIN( 150)									if ((modkey > -1)) {
HXLINE( 150)										int insertPos = 0;
HXDLIN( 150)										{
HXLINE( 150)											int _g6 = 0;
HXDLIN( 150)											::Array< ::Dynamic> _g7 = keyState->keyCombo;
HXDLIN( 150)											while((_g6 < _g7->length)){
HXLINE( 150)												 ::input2action::_InputState::KeyCombo ma1 = _g7->__get(_g6).StaticCast<  ::input2action::_InputState::KeyCombo >();
HXDLIN( 150)												_g6 = (_g6 + 1);
HXDLIN( 150)												bool _hx_tmp3;
HXDLIN( 150)												bool _hx_tmp4;
HXDLIN( 150)												if (!(actionState->single)) {
HXLINE( 150)													_hx_tmp4 = ma1->actionState->single;
            												}
            												else {
HXLINE( 150)													_hx_tmp4 = false;
            												}
HXDLIN( 150)												if (!(_hx_tmp4)) {
HXLINE( 150)													if ((ma1->keyCode == -1)) {
HXLINE( 150)														if (!(ma1->actionState->single)) {
HXLINE( 150)															_hx_tmp3 = actionState->single;
            														}
            														else {
HXLINE( 150)															_hx_tmp3 = true;
            														}
            													}
            													else {
HXLINE( 150)														_hx_tmp3 = false;
            													}
            												}
            												else {
HXLINE( 150)													_hx_tmp3 = true;
            												}
HXDLIN( 150)												if (_hx_tmp3) {
HXLINE( 150)													goto _hx_goto_5;
            												}
HXDLIN( 150)												insertPos = (insertPos + 1);
            											}
            											_hx_goto_5:;
            										}
HXDLIN( 150)										::Array< ::Dynamic> keyState1 = keyState->keyCombo;
HXDLIN( 150)										keyState1->insert(insertPos, ::input2action::_InputState::KeyCombo_obj::__alloc( HX_CTX ,modkey,actionState,null()));
            									}
            									else {
HXLINE( 150)										::Array< ::Dynamic> keyState2 = keyState->keyCombo;
HXDLIN( 150)										keyState2->push( ::input2action::_InputState::KeyCombo_obj::__alloc( HX_CTX ,modkey,actionState,null()));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input2Action_obj,setKeyboard,(void))

 ::haxe::ds::IntMap Input2Action_obj::keyCodeName;

 ::haxe::ds::IntMap Input2Action_obj::gamepadButtonName;


::hx::ObjectPtr< Input2Action_obj > Input2Action_obj::__new(::Array< ::Dynamic> actionConfig, ::haxe::ds::StringMap actionMap) {
	::hx::ObjectPtr< Input2Action_obj > __this = new Input2Action_obj();
	__this->__construct(actionConfig,actionMap);
	return __this;
}

::hx::ObjectPtr< Input2Action_obj > Input2Action_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> actionConfig, ::haxe::ds::StringMap actionMap) {
	Input2Action_obj *__this = (Input2Action_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Input2Action_obj), true, "input2action.Input2Action"));
	*(void **)__this = Input2Action_obj::_hx_vtable;
	__this->__construct(actionConfig,actionMap);
	return __this;
}

Input2Action_obj::Input2Action_obj()
{
}

void Input2Action_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Input2Action);
	HX_MARK_MEMBER_NAME(actionMap,"actionMap");
	HX_MARK_MEMBER_NAME(actionConfigDefault,"actionConfigDefault");
	HX_MARK_MEMBER_NAME(actionStatePlayers,"actionStatePlayers");
	HX_MARK_MEMBER_NAME(keyboardState,"keyboardState");
	HX_MARK_END_CLASS();
}

void Input2Action_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(actionMap,"actionMap");
	HX_VISIT_MEMBER_NAME(actionConfigDefault,"actionConfigDefault");
	HX_VISIT_MEMBER_NAME(actionStatePlayers,"actionStatePlayers");
	HX_VISIT_MEMBER_NAME(keyboardState,"keyboardState");
}

::hx::Val Input2Action_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"actionMap") ) { return ::hx::Val( actionMap ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setKeyboard") ) { return ::hx::Val( setKeyboard_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"keyboardState") ) { return ::hx::Val( keyboardState ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"actionStatePlayers") ) { return ::hx::Val( actionStatePlayers ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"actionConfigDefault") ) { return ::hx::Val( actionConfigDefault ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"getOrCreateActionState") ) { return ::hx::Val( getOrCreateActionState_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Input2Action_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"keyCodeName") ) { outValue = ( keyCodeName ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"gamepadButtonName") ) { outValue = ( gamepadButtonName ); return true; }
	}
	return false;
}

::hx::Val Input2Action_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"actionMap") ) { actionMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"keyboardState") ) { keyboardState=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"actionStatePlayers") ) { actionStatePlayers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"actionConfigDefault") ) { actionConfigDefault=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Input2Action_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"keyCodeName") ) { keyCodeName=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"gamepadButtonName") ) { gamepadButtonName=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

void Input2Action_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("actionMap",86,3c,98,11));
	outFields->push(HX_("actionConfigDefault",89,60,6e,01));
	outFields->push(HX_("actionStatePlayers",b7,50,cd,6a));
	outFields->push(HX_("keyboardState",ea,eb,de,57));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Input2Action_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Input2Action_obj,actionMap),HX_("actionMap",86,3c,98,11)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Input2Action_obj,actionConfigDefault),HX_("actionConfigDefault",89,60,6e,01)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Input2Action_obj,actionStatePlayers),HX_("actionStatePlayers",b7,50,cd,6a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Input2Action_obj,keyboardState),HX_("keyboardState",ea,eb,de,57)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Input2Action_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &Input2Action_obj::keyCodeName,HX_("keyCodeName",d7,66,76,c5)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &Input2Action_obj::gamepadButtonName,HX_("gamepadButtonName",5e,39,26,d5)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Input2Action_obj_sMemberFields[] = {
	HX_("actionMap",86,3c,98,11),
	HX_("actionConfigDefault",89,60,6e,01),
	HX_("actionStatePlayers",b7,50,cd,6a),
	HX_("getOrCreateActionState",46,a5,da,83),
	HX_("keyboardState",ea,eb,de,57),
	HX_("setKeyboard",69,86,8a,98),
	::String(null()) };

static void Input2Action_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Input2Action_obj::keyCodeName,"keyCodeName");
	HX_MARK_MEMBER_NAME(Input2Action_obj::gamepadButtonName,"gamepadButtonName");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Input2Action_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Input2Action_obj::keyCodeName,"keyCodeName");
	HX_VISIT_MEMBER_NAME(Input2Action_obj::gamepadButtonName,"gamepadButtonName");
};

#endif

::hx::Class Input2Action_obj::__mClass;

static ::String Input2Action_obj_sStaticFields[] = {
	HX_("keyCodeName",d7,66,76,c5),
	HX_("gamepadButtonName",5e,39,26,d5),
	::String(null())
};

void Input2Action_obj::__register()
{
	Input2Action_obj _hx_dummy;
	Input2Action_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("input2action.Input2Action",ae,02,6c,5a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Input2Action_obj::__GetStatic;
	__mClass->mSetStaticField = &Input2Action_obj::__SetStatic;
	__mClass->mMarkFunc = Input2Action_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Input2Action_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Input2Action_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Input2Action_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Input2Action_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Input2Action_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Input2Action_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Input2Action_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::IntMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bf8c236397d6731f_33_boot)
HXDLIN(  33)			 ::haxe::ds::IntMap _g =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN(  33)			_g->set(0,HX_("UNKNOWN",6a,f7,4e,61));
HXDLIN(  33)			_g->set(8,HX_("BACKSPACE",1f,f5,42,c6));
HXDLIN(  33)			_g->set(9,HX_("TAB",35,f6,3f,00));
HXDLIN(  33)			_g->set(13,HX_("RETURN",b0,50,b0,bb));
HXDLIN(  33)			_g->set(27,HX_("ESCAPE",81,ef,5c,8d));
HXDLIN(  33)			_g->set(32,HX_("SPACE",a6,c4,54,ff));
HXDLIN(  33)			_g->set(33,HX_("EXCLAMATION",cd,b3,eb,02));
HXDLIN(  33)			_g->set(34,HX_("QUOTE",1c,5b,e0,db));
HXDLIN(  33)			_g->set(35,HX_("HASH",ce,f7,c8,2f));
HXDLIN(  33)			_g->set(36,HX_("DOLLAR",7c,78,62,df));
HXDLIN(  33)			_g->set(37,HX_("PERCENT",a5,7e,ae,f8));
HXDLIN(  33)			_g->set(38,HX_("AMPERSAND",15,dc,b6,c6));
HXDLIN(  33)			_g->set(39,HX_("SINGLE_QUOTE",e5,4a,2c,30));
HXDLIN(  33)			_g->set(40,HX_("LEFT_PARENTHESIS",3e,7b,45,c7));
HXDLIN(  33)			_g->set(41,HX_("RIGHT_PARENTHESIS",73,2a,20,13));
HXDLIN(  33)			_g->set(42,HX_("ASTERISK",72,fc,4f,88));
HXDLIN(  33)			_g->set(43,HX_("PLUS",5a,07,1b,35));
HXDLIN(  33)			_g->set(44,HX_("COMMA",b5,69,4b,c8));
HXDLIN(  33)			_g->set(45,HX_("MINUS",50,b8,56,86));
HXDLIN(  33)			_g->set(46,HX_("PERIOD",01,0d,9e,ed));
HXDLIN(  33)			_g->set(47,HX_("SLASH",1d,f8,af,fc));
HXDLIN(  33)			_g->set(48,HX_("NUMBER_0",fa,89,c6,33));
HXDLIN(  33)			_g->set(49,HX_("NUMBER_1",fb,89,c6,33));
HXDLIN(  33)			_g->set(50,HX_("NUMBER_2",fc,89,c6,33));
HXDLIN(  33)			_g->set(51,HX_("NUMBER_3",fd,89,c6,33));
HXDLIN(  33)			_g->set(52,HX_("NUMBER_4",fe,89,c6,33));
HXDLIN(  33)			_g->set(53,HX_("NUMBER_5",ff,89,c6,33));
HXDLIN(  33)			_g->set(54,HX_("NUMBER_6",00,8a,c6,33));
HXDLIN(  33)			_g->set(55,HX_("NUMBER_7",01,8a,c6,33));
HXDLIN(  33)			_g->set(56,HX_("NUMBER_8",02,8a,c6,33));
HXDLIN(  33)			_g->set(57,HX_("NUMBER_9",03,8a,c6,33));
HXDLIN(  33)			_g->set(58,HX_("COLON",3f,a9,4a,c8));
HXDLIN(  33)			_g->set(59,HX_("SEMICOLON",11,86,2a,49));
HXDLIN(  33)			_g->set(60,HX_("LESS_THAN",47,45,26,a0));
HXDLIN(  33)			_g->set(61,HX_("EQUALS",3f,9a,75,72));
HXDLIN(  33)			_g->set(62,HX_("GREATER_THAN",26,a8,9b,94));
HXDLIN(  33)			_g->set(63,HX_("QUESTION",26,2b,36,80));
HXDLIN(  33)			_g->set(64,HX_("AT",f3,38,00,00));
HXDLIN(  33)			_g->set(91,HX_("LEFT_BRACKET",90,62,6d,61));
HXDLIN(  33)			_g->set(92,HX_("BACKSLASH",96,28,9e,c3));
HXDLIN(  33)			_g->set(93,HX_("RIGHT_BRACKET",45,13,29,76));
HXDLIN(  33)			_g->set(94,HX_("CARET",63,31,0e,bf));
HXDLIN(  33)			_g->set(95,HX_("UNDERSCORE",3a,5f,02,45));
HXDLIN(  33)			_g->set(96,HX_("GRAVE",65,4c,d8,17));
HXDLIN(  33)			_g->set(97,HX_("A",41,00,00,00));
HXDLIN(  33)			_g->set(98,HX_("B",42,00,00,00));
HXDLIN(  33)			_g->set(99,HX_("C",43,00,00,00));
HXDLIN(  33)			_g->set(100,HX_("D",44,00,00,00));
HXDLIN(  33)			_g->set(101,HX_("E",45,00,00,00));
HXDLIN(  33)			_g->set(102,HX_("F",46,00,00,00));
HXDLIN(  33)			_g->set(103,HX_("G",47,00,00,00));
HXDLIN(  33)			_g->set(104,HX_("H",48,00,00,00));
HXDLIN(  33)			_g->set(105,HX_("I",49,00,00,00));
HXDLIN(  33)			_g->set(106,HX_("J",4a,00,00,00));
HXDLIN(  33)			_g->set(107,HX_("K",4b,00,00,00));
HXDLIN(  33)			_g->set(108,HX_("L",4c,00,00,00));
HXDLIN(  33)			_g->set(109,HX_("M",4d,00,00,00));
HXDLIN(  33)			_g->set(110,HX_("N",4e,00,00,00));
HXDLIN(  33)			_g->set(111,HX_("O",4f,00,00,00));
HXDLIN(  33)			_g->set(112,HX_("P",50,00,00,00));
HXDLIN(  33)			_g->set(113,HX_("Q",51,00,00,00));
HXDLIN(  33)			_g->set(114,HX_("R",52,00,00,00));
HXDLIN(  33)			_g->set(115,HX_("S",53,00,00,00));
HXDLIN(  33)			_g->set(116,HX_("T",54,00,00,00));
HXDLIN(  33)			_g->set(117,HX_("U",55,00,00,00));
HXDLIN(  33)			_g->set(118,HX_("V",56,00,00,00));
HXDLIN(  33)			_g->set(119,HX_("W",57,00,00,00));
HXDLIN(  33)			_g->set(120,HX_("X",58,00,00,00));
HXDLIN(  33)			_g->set(121,HX_("Y",59,00,00,00));
HXDLIN(  33)			_g->set(122,HX_("Z",5a,00,00,00));
HXDLIN(  33)			_g->set(127,HX_("DELETE",2b,6c,5b,1d));
HXDLIN(  33)			_g->set((int)1073741881,HX_("CAPS_LOCK",09,04,db,ce));
HXDLIN(  33)			_g->set((int)1073741882,HX_("F1",2b,3d,00,00));
HXDLIN(  33)			_g->set((int)1073741883,HX_("F2",2c,3d,00,00));
HXDLIN(  33)			_g->set((int)1073741884,HX_("F3",2d,3d,00,00));
HXDLIN(  33)			_g->set((int)1073741885,HX_("F4",2e,3d,00,00));
HXDLIN(  33)			_g->set((int)1073741886,HX_("F5",2f,3d,00,00));
HXDLIN(  33)			_g->set((int)1073741887,HX_("F6",30,3d,00,00));
HXDLIN(  33)			_g->set((int)1073741888,HX_("F7",31,3d,00,00));
HXDLIN(  33)			_g->set((int)1073741889,HX_("F8",32,3d,00,00));
HXDLIN(  33)			_g->set((int)1073741890,HX_("F9",33,3d,00,00));
HXDLIN(  33)			_g->set((int)1073741891,HX_("F10",a5,48,35,00));
HXDLIN(  33)			_g->set((int)1073741892,HX_("F11",a6,48,35,00));
HXDLIN(  33)			_g->set((int)1073741893,HX_("F12",a7,48,35,00));
HXDLIN(  33)			_g->set((int)1073741894,HX_("PRINT_SCREEN",9e,34,bf,1a));
HXDLIN(  33)			_g->set((int)1073741895,HX_("SCROLL_LOCK",9d,2c,87,f4));
HXDLIN(  33)			_g->set((int)1073741896,HX_("PAUSE",d6,0e,46,3b));
HXDLIN(  33)			_g->set((int)1073741897,HX_("INSERT",39,ef,5f,50));
HXDLIN(  33)			_g->set((int)1073741898,HX_("HOME",1f,92,d3,2f));
HXDLIN(  33)			_g->set((int)1073741899,HX_("PAGE_UP",8b,d9,3e,0b));
HXDLIN(  33)			_g->set((int)1073741901,HX_("END",bb,9f,34,00));
HXDLIN(  33)			_g->set((int)1073741902,HX_("PAGE_DOWN",92,7b,93,70));
HXDLIN(  33)			_g->set((int)1073741903,HX_("RIGHT",bc,43,52,67));
HXDLIN(  33)			_g->set((int)1073741904,HX_("LEFT",07,d0,70,32));
HXDLIN(  33)			_g->set((int)1073741905,HX_("DOWN",62,c0,2e,2d));
HXDLIN(  33)			_g->set((int)1073741906,HX_("UP",5b,4a,00,00));
HXDLIN(  33)			_g->set((int)1073741907,HX_("NUM_LOCK",e4,7b,03,eb));
HXDLIN(  33)			_g->set((int)1073741908,HX_("NUMPAD_DIVIDE",eb,41,1f,90));
HXDLIN(  33)			_g->set((int)1073741909,HX_("NUMPAD_MULTIPLY",16,d9,d8,96));
HXDLIN(  33)			_g->set((int)1073741910,HX_("NUMPAD_MINUS",1e,66,c4,a7));
HXDLIN(  33)			_g->set((int)1073741911,HX_("NUMPAD_PLUS",4c,8d,42,16));
HXDLIN(  33)			_g->set((int)1073741912,HX_("NUMPAD_ENTER",c6,52,e2,0f));
HXDLIN(  33)			_g->set((int)1073741913,HX_("NUMPAD_1",ff,2e,b3,40));
HXDLIN(  33)			_g->set((int)1073741914,HX_("NUMPAD_2",00,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073741915,HX_("NUMPAD_3",01,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073741916,HX_("NUMPAD_4",02,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073741917,HX_("NUMPAD_5",03,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073741918,HX_("NUMPAD_6",04,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073741919,HX_("NUMPAD_7",05,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073741920,HX_("NUMPAD_8",06,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073741921,HX_("NUMPAD_9",07,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073741922,HX_("NUMPAD_0",fe,2e,b3,40));
HXDLIN(  33)			_g->set((int)1073741923,HX_("NUMPAD_PERIOD",73,73,28,0c));
HXDLIN(  33)			_g->set((int)1073741925,HX_("APPLICATION",30,b7,7a,00));
HXDLIN(  33)			_g->set((int)1073741926,HX_("POWER",e5,83,88,44));
HXDLIN(  33)			_g->set((int)1073741927,HX_("NUMPAD_EQUALS",b1,00,00,91));
HXDLIN(  33)			_g->set((int)1073741928,HX_("F13",a8,48,35,00));
HXDLIN(  33)			_g->set((int)1073741929,HX_("F14",a9,48,35,00));
HXDLIN(  33)			_g->set((int)1073741930,HX_("F15",aa,48,35,00));
HXDLIN(  33)			_g->set((int)1073741931,HX_("F16",ab,48,35,00));
HXDLIN(  33)			_g->set((int)1073741932,HX_("F17",ac,48,35,00));
HXDLIN(  33)			_g->set((int)1073741933,HX_("F18",ad,48,35,00));
HXDLIN(  33)			_g->set((int)1073741934,HX_("F19",ae,48,35,00));
HXDLIN(  33)			_g->set((int)1073741935,HX_("F20",84,49,35,00));
HXDLIN(  33)			_g->set((int)1073741936,HX_("F21",85,49,35,00));
HXDLIN(  33)			_g->set((int)1073741937,HX_("F22",86,49,35,00));
HXDLIN(  33)			_g->set((int)1073741938,HX_("F23",87,49,35,00));
HXDLIN(  33)			_g->set((int)1073741939,HX_("F24",88,49,35,00));
HXDLIN(  33)			_g->set((int)1073741940,HX_("EXECUTE",15,de,e0,4b));
HXDLIN(  33)			_g->set((int)1073741941,HX_("HELP",c1,fa,cb,2f));
HXDLIN(  33)			_g->set((int)1073741942,HX_("MENU",9f,0d,1a,33));
HXDLIN(  33)			_g->set((int)1073741943,HX_("SELECT",fc,c6,b5,1c));
HXDLIN(  33)			_g->set((int)1073741944,HX_("STOP",02,b8,1c,37));
HXDLIN(  33)			_g->set((int)1073741945,HX_("AGAIN",40,6d,2b,9c));
HXDLIN(  33)			_g->set((int)1073741946,HX_("UNDO",24,8e,6a,38));
HXDLIN(  33)			_g->set((int)1073741947,HX_("CUT",62,21,33,00));
HXDLIN(  33)			_g->set((int)1073741948,HX_("COPY",b5,83,85,2c));
HXDLIN(  33)			_g->set((int)1073741949,HX_("PASTE",33,8b,44,3b));
HXDLIN(  33)			_g->set((int)1073741950,HX_("FIND",39,98,7c,2e));
HXDLIN(  33)			_g->set((int)1073741951,HX_("MUTE",d9,36,26,33));
HXDLIN(  33)			_g->set((int)1073741952,HX_("VOLUME_UP",e0,2e,1e,5c));
HXDLIN(  33)			_g->set((int)1073741953,HX_("VOLUME_DOWN",27,90,f2,37));
HXDLIN(  33)			_g->set((int)1073741957,HX_("NUMPAD_COMMA",83,17,b9,e9));
HXDLIN(  33)			_g->set((int)1073741977,HX_("ALT_ERASE",d0,e9,42,1c));
HXDLIN(  33)			_g->set((int)1073741978,HX_("SYSTEM_REQUEST",9f,56,e9,3c));
HXDLIN(  33)			_g->set((int)1073741979,HX_("CANCEL",7a,99,b6,6a));
HXDLIN(  33)			_g->set((int)1073741980,HX_("CLEAR",6d,a9,49,c6));
HXDLIN(  33)			_g->set((int)1073741981,HX_("PRIOR",ea,90,79,46));
HXDLIN(  33)			_g->set((int)1073741982,HX_("RETURN2",82,49,96,7e));
HXDLIN(  33)			_g->set((int)1073741983,HX_("SEPARATOR",45,d0,d7,2c));
HXDLIN(  33)			_g->set((int)1073741984,HX_("OUT",6e,3c,3c,00));
HXDLIN(  33)			_g->set((int)1073741985,HX_("OPER",ce,cb,74,34));
HXDLIN(  33)			_g->set((int)1073741986,HX_("CLEAR_AGAIN",ae,ad,24,1b));
HXDLIN(  33)			_g->set((int)1073741987,HX_("CRSEL",2b,94,4b,ca));
HXDLIN(  33)			_g->set((int)1073741988,HX_("EXSEL",e7,04,10,f5));
HXDLIN(  33)			_g->set((int)1073742000,HX_("NUMPAD_00",72,ef,15,5c));
HXDLIN(  33)			_g->set((int)1073742001,HX_("NUMPAD_000",7e,94,1b,37));
HXDLIN(  33)			_g->set((int)1073742002,HX_("THOUSAND_SEPARATOR",64,42,ba,6c));
HXDLIN(  33)			_g->set((int)1073742003,HX_("DECIMAL_SEPARATOR",b7,2b,09,71));
HXDLIN(  33)			_g->set((int)1073742004,HX_("CURRENCY_UNIT",72,f1,d5,a0));
HXDLIN(  33)			_g->set((int)1073742005,HX_("CURRENCY_SUBUNIT",b6,31,7c,dc));
HXDLIN(  33)			_g->set((int)1073742006,HX_("NUMPAD_LEFT_PARENTHESIS",30,24,17,38));
HXDLIN(  33)			_g->set((int)1073742007,HX_("NUMPAD_RIGHT_PARENTHESIS",41,55,c2,59));
HXDLIN(  33)			_g->set((int)1073742008,HX_("NUMPAD_LEFT_BRACE",4d,33,25,1b));
HXDLIN(  33)			_g->set((int)1073742009,HX_("NUMPAD_RIGHT_BRACE",9e,51,1b,74));
HXDLIN(  33)			_g->set((int)1073742010,HX_("NUMPAD_TAB",83,f4,36,37));
HXDLIN(  33)			_g->set((int)1073742011,HX_("NUMPAD_BACKSPACE",ed,a1,16,91));
HXDLIN(  33)			_g->set((int)1073742012,HX_("NUMPAD_A",0f,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073742013,HX_("NUMPAD_B",10,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073742014,HX_("NUMPAD_C",11,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073742015,HX_("NUMPAD_D",12,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073742016,HX_("NUMPAD_E",13,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073742017,HX_("NUMPAD_F",14,2f,b3,40));
HXDLIN(  33)			_g->set((int)1073742018,HX_("NUMPAD_XOR",c9,09,3a,37));
HXDLIN(  33)			_g->set((int)1073742019,HX_("NUMPAD_POWER",b3,31,f6,65));
HXDLIN(  33)			_g->set((int)1073742020,HX_("NUMPAD_PERCENT",f3,bb,3d,93));
HXDLIN(  33)			_g->set((int)1073742021,HX_("NUMPAD_LESS_THAN",15,f2,f9,6a));
HXDLIN(  33)			_g->set((int)1073742022,HX_("NUMPAD_GREATER_THAN",18,70,85,48));
HXDLIN(  33)			_g->set((int)1073742023,HX_("NUMPAD_AMPERSAND",e3,88,8a,91));
HXDLIN(  33)			_g->set((int)1073742024,HX_("NUMPAD_DOUBLE_AMPERSAND",19,b7,90,55));
HXDLIN(  33)			_g->set((int)1073742025,HX_("NUMPAD_VERTICAL_BAR",1c,1a,61,85));
HXDLIN(  33)			_g->set((int)1073742026,HX_("NUMPAD_DOUBLE_VERTICAL_BAR",a6,31,9d,14));
HXDLIN(  33)			_g->set((int)1073742027,HX_("NUMPAD_COLON",0d,57,b8,e9));
HXDLIN(  33)			_g->set((int)1073742028,HX_("NUMPAD_HASH",c0,7d,f0,10));
HXDLIN(  33)			_g->set((int)1073742029,HX_("NUMPAD_SPACE",74,72,c2,20));
HXDLIN(  33)			_g->set((int)1073742030,HX_("NUMPAD_AT",65,fe,15,5c));
HXDLIN(  33)			_g->set((int)1073742031,HX_("NUMPAD_EXCLAMATION",1b,b0,9e,eb));
HXDLIN(  33)			_g->set((int)1073742032,HX_("NUMPAD_MEM_STORE",85,4f,e9,27));
HXDLIN(  33)			_g->set((int)1073742033,HX_("NUMPAD_MEM_RECALL",8d,c5,e2,b2));
HXDLIN(  33)			_g->set((int)1073742034,HX_("NUMPAD_MEM_CLEAR",31,ad,2e,ec));
HXDLIN(  33)			_g->set((int)1073742035,HX_("NUMPAD_MEM_ADD",c5,58,fb,47));
HXDLIN(  33)			_g->set((int)1073742036,HX_("NUMPAD_MEM_SUBTRACT",d0,b3,03,a6));
HXDLIN(  33)			_g->set((int)1073742037,HX_("NUMPAD_MEM_MULTIPLY",e0,20,7f,48));
HXDLIN(  33)			_g->set((int)1073742038,HX_("NUMPAD_MEM_DIVIDE",35,23,13,74));
HXDLIN(  33)			_g->set((int)1073742039,HX_("NUMPAD_PLUS_MINUS",dd,8d,c7,60));
HXDLIN(  33)			_g->set((int)1073742040,HX_("NUMPAD_CLEAR",3b,57,b7,e7));
HXDLIN(  33)			_g->set((int)1073742041,HX_("NUMPAD_CLEAR_ENTRY",0e,ed,20,56));
HXDLIN(  33)			_g->set((int)1073742042,HX_("NUMPAD_BINARY",73,ce,18,be));
HXDLIN(  33)			_g->set((int)1073742043,HX_("NUMPAD_OCTAL",79,c3,9e,ca));
HXDLIN(  33)			_g->set((int)1073742044,HX_("NUMPAD_DECIMAL",bf,c5,36,01));
HXDLIN(  33)			_g->set((int)1073742045,HX_("NUMPAD_HEXADECIMAL",59,10,c6,6a));
HXDLIN(  33)			_g->set((int)1073742048,HX_("LEFT_CTRL",23,23,b7,de));
HXDLIN(  33)			_g->set((int)1073742049,HX_("LEFT_SHIFT",ea,7a,fb,2f));
HXDLIN(  33)			_g->set((int)1073742050,HX_("LEFT_ALT",91,b9,e3,c9));
HXDLIN(  33)			_g->set((int)1073742051,HX_("LEFT_META",3d,e5,47,e5));
HXDLIN(  33)			_g->set((int)1073742052,HX_("RIGHT_CTRL",4e,1f,4d,c3));
HXDLIN(  33)			_g->set((int)1073742053,HX_("RIGHT_SHIFT",5f,24,a2,4e));
HXDLIN(  33)			_g->set((int)1073742054,HX_("RIGHT_ALT",c6,ab,81,cf));
HXDLIN(  33)			_g->set((int)1073742055,HX_("RIGHT_META",68,e1,dd,c9));
HXDLIN(  33)			_g->set((int)1073742081,HX_("MODE",63,9b,21,33));
HXDLIN(  33)			_g->set((int)1073742082,HX_("AUDIO_NEXT",5c,64,1b,67));
HXDLIN(  33)			_g->set((int)1073742083,HX_("AUDIO_PREVIOUS",20,cc,f8,e8));
HXDLIN(  33)			_g->set((int)1073742084,HX_("AUDIO_STOP",6b,cf,74,6a));
HXDLIN(  33)			_g->set((int)1073742085,HX_("AUDIO_PLAY",5d,0d,73,68));
HXDLIN(  33)			_g->set((int)1073742086,HX_("AUDIO_MUTE",42,4e,7e,66));
HXDLIN(  33)			_g->set((int)1073742087,HX_("MEDIA_SELECT",57,7c,21,ce));
HXDLIN(  33)			_g->set((int)1073742088,HX_("WWW",37,50,42,00));
HXDLIN(  33)			_g->set((int)1073742089,HX_("MAIL",37,00,17,33));
HXDLIN(  33)			_g->set((int)1073742090,HX_("CALCULATOR",02,a1,e1,a9));
HXDLIN(  33)			_g->set((int)1073742091,HX_("COMPUTER",1b,d1,4b,df));
HXDLIN(  33)			_g->set((int)1073742092,HX_("APP_CONTROL_SEARCH",a8,98,55,1a));
HXDLIN(  33)			_g->set((int)1073742093,HX_("APP_CONTROL_HOME",5f,0f,65,0f));
HXDLIN(  33)			_g->set((int)1073742094,HX_("APP_CONTROL_BACK",67,1f,63,0b));
HXDLIN(  33)			_g->set((int)1073742095,HX_("APP_CONTROL_FORWARD",65,00,a7,a0));
HXDLIN(  33)			_g->set((int)1073742096,HX_("APP_CONTROL_STOP",42,35,ae,16));
HXDLIN(  33)			_g->set((int)1073742097,HX_("APP_CONTROL_REFRESH",7b,f8,fc,a7));
HXDLIN(  33)			_g->set((int)1073742098,HX_("APP_CONTROL_BOOKMARKS",9d,7d,82,a1));
HXDLIN(  33)			_g->set((int)1073742099,HX_("BRIGHTNESS_DOWN",d0,a4,d7,76));
HXDLIN(  33)			_g->set((int)1073742100,HX_("BRIGHTNESS_UP",49,97,09,7b));
HXDLIN(  33)			_g->set((int)1073742101,HX_("DISPLAY_SWITCH",b1,f1,e3,9e));
HXDLIN(  33)			_g->set((int)1073742102,HX_("BACKLIGHT_TOGGLE",e4,97,a8,f2));
HXDLIN(  33)			_g->set((int)1073742103,HX_("BACKLIGHT_DOWN",b2,38,06,1f));
HXDLIN(  33)			_g->set((int)1073742104,HX_("BACKLIGHT_UP",ab,0e,a2,b2));
HXDLIN(  33)			_g->set((int)1073742105,HX_("EJECT",f1,66,c4,eb));
HXDLIN(  33)			_g->set((int)1073742106,HX_("SLEEP",f7,f4,b2,fc));
HXDLIN(  33)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_bf8c236397d6731f_33_boot)
HXDLIN(  33)		keyCodeName = ( ( ::haxe::ds::IntMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::IntMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bf8c236397d6731f_33_boot)
HXDLIN(  33)			 ::haxe::ds::IntMap _g =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN(  33)			_g->set(0,HX_("A",41,00,00,00));
HXDLIN(  33)			_g->set(1,HX_("B",42,00,00,00));
HXDLIN(  33)			_g->set(2,HX_("X",58,00,00,00));
HXDLIN(  33)			_g->set(3,HX_("Y",59,00,00,00));
HXDLIN(  33)			_g->set(4,HX_("BACK",27,a2,d1,2b));
HXDLIN(  33)			_g->set(5,HX_("GUIDE",9c,f2,d9,19));
HXDLIN(  33)			_g->set(6,HX_("START",42,ac,f9,01));
HXDLIN(  33)			_g->set(7,HX_("LEFT_STICK",b8,07,ea,37));
HXDLIN(  33)			_g->set(8,HX_("RIGHT_STICK",2d,b1,90,56));
HXDLIN(  33)			_g->set(9,HX_("LEFT_SHOULDER",d8,b1,a9,01));
HXDLIN(  33)			_g->set(10,HX_("RIGHT_SHOULDER",83,9f,28,11));
HXDLIN(  33)			_g->set(11,HX_("DPAD_UP",6b,00,87,a2));
HXDLIN(  33)			_g->set(12,HX_("DPAD_DOWN",72,1a,5b,87));
HXDLIN(  33)			_g->set(13,HX_("DPAD_LEFT",17,2a,9d,8c));
HXDLIN(  33)			_g->set(14,HX_("DPAD_RIGHT",ac,b7,f4,f3));
HXDLIN(  33)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_bf8c236397d6731f_33_boot)
HXDLIN(  33)		gamepadButtonName = ( ( ::haxe::ds::IntMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace input2action
