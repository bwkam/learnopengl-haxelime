// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_input2action__InputState_KeyCombo
#include <input2action/_InputState/KeyCombo.h>
#endif
#ifndef INCLUDED_input2action__InputState_KeyState
#include <input2action/_InputState/KeyState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c6b650f781a2063a_257_new,"input2action._InputState.KeyState","new",0xf5e3ac5c,"input2action._InputState.KeyState.new","input2action/InputState.hx",257,0x5f7e1ce6)
namespace input2action{
namespace _InputState{

void KeyState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c6b650f781a2063a_257_new)
HXDLIN( 257)		this->keyCombo = null();
            	}

Dynamic KeyState_obj::__CreateEmpty() { return new KeyState_obj; }

void *KeyState_obj::_hx_vtable = 0;

Dynamic KeyState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyState_obj > _hx_result = new KeyState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool KeyState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x75ed84da;
}


::hx::ObjectPtr< KeyState_obj > KeyState_obj::__new() {
	::hx::ObjectPtr< KeyState_obj > __this = new KeyState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< KeyState_obj > KeyState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	KeyState_obj *__this = (KeyState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KeyState_obj), true, "input2action._InputState.KeyState"));
	*(void **)__this = KeyState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

KeyState_obj::KeyState_obj()
{
}

void KeyState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KeyState);
	HX_MARK_MEMBER_NAME(keyCombo,"keyCombo");
	HX_MARK_END_CLASS();
}

void KeyState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyCombo,"keyCombo");
}

::hx::Val KeyState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"keyCombo") ) { return ::hx::Val( keyCombo ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val KeyState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"keyCombo") ) { keyCombo=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("keyCombo",2f,ce,c6,8e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo KeyState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(KeyState_obj,keyCombo),HX_("keyCombo",2f,ce,c6,8e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *KeyState_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyState_obj_sMemberFields[] = {
	HX_("keyCombo",2f,ce,c6,8e),
	::String(null()) };

::hx::Class KeyState_obj::__mClass;

void KeyState_obj::__register()
{
	KeyState_obj _hx_dummy;
	KeyState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("input2action._InputState.KeyState",6a,8e,cf,d4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KeyState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KeyState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace input2action
} // end namespace _InputState
