// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_input2action_Input2Action
#include <input2action/Input2Action.h>
#endif
#ifndef INCLUDED_input2action__InputState_InputState_Impl_
#include <input2action/_InputState/InputState_Impl_.h>
#endif
#ifndef INCLUDED_input2action__InputState_KeyState
#include <input2action/_InputState/KeyState.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a384fcc7a8903b66_200_keyCodeName,"input2action._InputState.InputState_Impl_","keyCodeName",0xe816f7e8,"input2action._InputState.InputState_Impl_.keyCodeName","input2action/InputState.hx",200,0x5f7e1ce6)
namespace input2action{
namespace _InputState{

void InputState_Impl__obj::__construct() { }

Dynamic InputState_Impl__obj::__CreateEmpty() { return new InputState_Impl__obj; }

void *InputState_Impl__obj::_hx_vtable = 0;

Dynamic InputState_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InputState_Impl__obj > _hx_result = new InputState_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool InputState_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2803426f;
}

::String InputState_Impl__obj::keyCodeName(::Array< ::Dynamic> this1,int key){
            	HX_STACKFRAME(&_hx_pos_a384fcc7a8903b66_200_keyCodeName)
HXDLIN( 200)		if ((354 == this1->length)) {
HXLINE( 201)			int _hx_tmp;
HXDLIN( 201)			if ((key < (127 + 1))) {
HXLINE( 201)				_hx_tmp = key;
            			}
            			else {
HXLINE( 201)				_hx_tmp = ((key + (int)1073741881) - (127 + 1));
            			}
HXDLIN( 201)			return ::input2action::Input2Action_obj::keyCodeName->get_string(_hx_tmp);
            		}
            		else {
HXLINE( 202)			return ::input2action::Input2Action_obj::gamepadButtonName->get_string(key);
            		}
HXLINE( 200)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(InputState_Impl__obj,keyCodeName,return )


InputState_Impl__obj::InputState_Impl__obj()
{
}

bool InputState_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"keyCodeName") ) { outValue = keyCodeName_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *InputState_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *InputState_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class InputState_Impl__obj::__mClass;

static ::String InputState_Impl__obj_sStaticFields[] = {
	HX_("keyCodeName",d7,66,76,c5),
	::String(null())
};

void InputState_Impl__obj::__register()
{
	InputState_Impl__obj _hx_dummy;
	InputState_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("input2action._InputState.InputState_Impl_",ff,5b,61,5d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &InputState_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(InputState_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< InputState_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InputState_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InputState_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace input2action
} // end namespace _InputState
