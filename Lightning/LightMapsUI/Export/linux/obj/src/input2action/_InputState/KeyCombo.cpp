// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_input2action_ActionState
#include <input2action/ActionState.h>
#endif
#ifndef INCLUDED_input2action__InputState_KeyCombo
#include <input2action/_InputState/KeyCombo.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9f90636a727a9991_274_new,"input2action._InputState.KeyCombo","new",0x2b67c119,"input2action._InputState.KeyCombo.new","input2action/InputState.hx",274,0x5f7e1ce6)
namespace input2action{
namespace _InputState{

void KeyCombo_obj::__construct(int keyCode, ::input2action::ActionState actionState,::hx::Null< int >  __o_deviceID){
            		int deviceID = __o_deviceID.Default(0);
            	HX_STACKFRAME(&_hx_pos_9f90636a727a9991_274_new)
HXLINE( 275)		this->keyCode = keyCode;
HXLINE( 276)		this->actionState = actionState;
HXLINE( 277)		this->deviceID = deviceID;
            	}

Dynamic KeyCombo_obj::__CreateEmpty() { return new KeyCombo_obj; }

void *KeyCombo_obj::_hx_vtable = 0;

Dynamic KeyCombo_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyCombo_obj > _hx_result = new KeyCombo_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool KeyCombo_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3c3f3717;
}


::hx::ObjectPtr< KeyCombo_obj > KeyCombo_obj::__new(int keyCode, ::input2action::ActionState actionState,::hx::Null< int >  __o_deviceID) {
	::hx::ObjectPtr< KeyCombo_obj > __this = new KeyCombo_obj();
	__this->__construct(keyCode,actionState,__o_deviceID);
	return __this;
}

::hx::ObjectPtr< KeyCombo_obj > KeyCombo_obj::__alloc(::hx::Ctx *_hx_ctx,int keyCode, ::input2action::ActionState actionState,::hx::Null< int >  __o_deviceID) {
	KeyCombo_obj *__this = (KeyCombo_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KeyCombo_obj), true, "input2action._InputState.KeyCombo"));
	*(void **)__this = KeyCombo_obj::_hx_vtable;
	__this->__construct(keyCode,actionState,__o_deviceID);
	return __this;
}

KeyCombo_obj::KeyCombo_obj()
{
}

void KeyCombo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KeyCombo);
	HX_MARK_MEMBER_NAME(keyCode,"keyCode");
	HX_MARK_MEMBER_NAME(deviceID,"deviceID");
	HX_MARK_MEMBER_NAME(actionState,"actionState");
	HX_MARK_END_CLASS();
}

void KeyCombo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyCode,"keyCode");
	HX_VISIT_MEMBER_NAME(deviceID,"deviceID");
	HX_VISIT_MEMBER_NAME(actionState,"actionState");
}

::hx::Val KeyCombo_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"keyCode") ) { return ::hx::Val( keyCode ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deviceID") ) { return ::hx::Val( deviceID ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"actionState") ) { return ::hx::Val( actionState ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val KeyCombo_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"keyCode") ) { keyCode=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deviceID") ) { deviceID=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"actionState") ) { actionState=inValue.Cast<  ::input2action::ActionState >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyCombo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("keyCode",6c,22,9e,9b));
	outFields->push(HX_("deviceID",f1,ed,98,a4));
	outFields->push(HX_("actionState",7b,76,70,56));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo KeyCombo_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(KeyCombo_obj,keyCode),HX_("keyCode",6c,22,9e,9b)},
	{::hx::fsInt,(int)offsetof(KeyCombo_obj,deviceID),HX_("deviceID",f1,ed,98,a4)},
	{::hx::fsObject /*  ::input2action::ActionState */ ,(int)offsetof(KeyCombo_obj,actionState),HX_("actionState",7b,76,70,56)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *KeyCombo_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyCombo_obj_sMemberFields[] = {
	HX_("keyCode",6c,22,9e,9b),
	HX_("deviceID",f1,ed,98,a4),
	HX_("actionState",7b,76,70,56),
	::String(null()) };

::hx::Class KeyCombo_obj::__mClass;

void KeyCombo_obj::__register()
{
	KeyCombo_obj _hx_dummy;
	KeyCombo_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("input2action._InputState.KeyCombo",a7,40,21,9b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KeyCombo_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KeyCombo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyCombo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyCombo_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace input2action
} // end namespace _InputState
