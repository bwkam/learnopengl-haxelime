// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_Program
#include <Program.h>
#endif
#ifndef INCLUDED__OpenGLUtils_OpenGLUtils_Fields_
#include <_OpenGLUtils/OpenGLUtils_Fields_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_27dd8ccd2570d3c5_126_new,"Program","new",0x8f391556,"Program.new","Program.hx",126,0x458566da)
HX_LOCAL_STACK_FRAME(_hx_pos_27dd8ccd2570d3c5_133_use,"Program","use",0x8f3e713d,"Program.use","Program.hx",133,0x458566da)
HX_LOCAL_STACK_FRAME(_hx_pos_27dd8ccd2570d3c5_141_createGLSLProgram,"Program","createGLSLProgram",0x58a2be20,"Program.createGLSLProgram","Program.hx",141,0x458566da)

void Program_obj::__construct( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl){
            	HX_STACKFRAME(&_hx_pos_27dd8ccd2570d3c5_126_new)
HXDLIN( 126)		this->_gl = gl;
            	}

bool Program_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x12dc3730;
}

void Program_obj::use(){
            	HX_STACKFRAME(&_hx_pos_27dd8ccd2570d3c5_133_use)
HXDLIN( 133)		this->_gl->useProgram(this->_glProgram);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program_obj,use,(void))

void Program_obj::createGLSLProgram(::String vertexSource,::String fragmentSource){
            	HX_GC_STACKFRAME(&_hx_pos_27dd8ccd2570d3c5_141_createGLSLProgram)
HXLINE( 142)		this->_glProgram = ::_OpenGLUtils::OpenGLUtils_Fields__obj::glCreateProgram(this->_gl,vertexSource,fragmentSource);
HXLINE( 143)		if (::hx::IsNull( this->_glProgram )) {
HXLINE( 144)			HX_STACK_DO_THROW( ::haxe::ValueException_obj::__alloc( HX_CTX ,HX_("compilation failed, check accompanying errors",fe,57,19,b6),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Program_obj,createGLSLProgram,(void))


Program_obj::Program_obj()
{
}

void Program_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Program);
	HX_MARK_MEMBER_NAME(_gl,"_gl");
	HX_MARK_MEMBER_NAME(_glProgram,"_glProgram");
	HX_MARK_END_CLASS();
}

void Program_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_gl,"_gl");
	HX_VISIT_MEMBER_NAME(_glProgram,"_glProgram");
}

::hx::Val Program_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_gl") ) { return ::hx::Val( _gl ); }
		if (HX_FIELD_EQ(inName,"use") ) { return ::hx::Val( use_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_glProgram") ) { return ::hx::Val( _glProgram ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"createGLSLProgram") ) { return ::hx::Val( createGLSLProgram_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Program_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_gl") ) { _gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_glProgram") ) { _glProgram=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Program_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_gl",44,70,48,00));
	outFields->push(HX_("_glProgram",a0,52,56,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Program_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::lime::_internal::backend::native::NativeOpenGLRenderContext */ ,(int)offsetof(Program_obj,_gl),HX_("_gl",44,70,48,00)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Program_obj,_glProgram),HX_("_glProgram",a0,52,56,1d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Program_obj_sStaticStorageInfo = 0;
#endif

static ::String Program_obj_sMemberFields[] = {
	HX_("_gl",44,70,48,00),
	HX_("_glProgram",a0,52,56,1d),
	HX_("use",47,2c,59,00),
	HX_("createGLSLProgram",aa,f6,c2,62),
	::String(null()) };

::hx::Class Program_obj::__mClass;

void Program_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Program",64,72,4a,c1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Program_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Program_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Program_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Program_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

