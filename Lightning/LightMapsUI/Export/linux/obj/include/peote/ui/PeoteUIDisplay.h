// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#ifndef INCLUDED_peote_ui_PeoteUIDisplay
#define INCLUDED_peote_ui_PeoteUIDisplay

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_peote_view_Display
#include <peote/view/Display.h>
#endif
HX_DECLARE_CLASS2(lime,graphics,RenderContext)
HX_DECLARE_CLASS2(lime,ui,MouseWheelMode)
HX_DECLARE_CLASS2(lime,ui,Touch)
HX_DECLARE_CLASS2(lime,ui,Window)
HX_DECLARE_CLASS2(peote,ui,PeoteUIDisplay)
HX_DECLARE_CLASS3(peote,ui,interactive,Interactive)
HX_DECLARE_CLASS4(peote,ui,interactive,interfaces,InputFocus)
HX_DECLARE_CLASS4(peote,ui,interactive,interfaces,InputText)
HX_DECLARE_CLASS4(peote,ui,style,interfaces,StyleID)
HX_DECLARE_CLASS2(peote,view,BufferInterface)
HX_DECLARE_CLASS2(peote,view,Buffer_Pickable)
HX_DECLARE_CLASS2(peote,view,Display)
HX_DECLARE_CLASS2(peote,view,PeoteView)
HX_DECLARE_CLASS2(peote,view,Program)

namespace peote{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES PeoteUIDisplay_obj : public  ::peote::view::Display_obj
{
	public:
		typedef  ::peote::view::Display_obj super;
		typedef PeoteUIDisplay_obj OBJ_;
		PeoteUIDisplay_obj();

	public:
		enum { _hx_ClassId = 0x4746cda2 };

		void __construct(int x,int y,int width,int height,::hx::Null< int >  __o_color,::hx::Null< int >  __o_maxTouchpoints,::Array< ::Dynamic> availableStyles, ::Dynamic autoAddStyles);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="peote.ui.PeoteUIDisplay")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"peote.ui.PeoteUIDisplay"); }
		static ::hx::ObjectPtr< PeoteUIDisplay_obj > __new(int x,int y,int width,int height,::hx::Null< int >  __o_color,::hx::Null< int >  __o_maxTouchpoints,::Array< ::Dynamic> availableStyles, ::Dynamic autoAddStyles);
		static ::hx::ObjectPtr< PeoteUIDisplay_obj > __alloc(::hx::Ctx *_hx_ctx,int x,int y,int width,int height,::hx::Null< int >  __o_color,::hx::Null< int >  __o_maxTouchpoints,::Array< ::Dynamic> availableStyles, ::Dynamic autoAddStyles);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PeoteUIDisplay_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PeoteUIDisplay",43,b8,6b,01); }

		static void __boot();
		static int AVAILABLE_NUMBER;
		static int getFreeNumber();
		static ::Dynamic getFreeNumber_dyn();

		static  ::peote::ui::PeoteUIDisplay inputFocusUIDisplay;
		static ::Dynamic intoSelectionTextLine;
		static int maxActiveIndex;
		static ::Array< ::Dynamic> activeUIDisplay;
		static ::Array< ::Dynamic> draggingMouseDisplays;
		static ::Array< ::Dynamic> draggingTouchDisplays;
		static void mouseDownActive(Float mouseX,Float mouseY,int button);
		static ::Dynamic mouseDownActive_dyn();

		static void mouseUpActive(Float mouseX,Float mouseY,int button);
		static ::Dynamic mouseUpActive_dyn();

		static void mouseWheelActive(Float dx,Float dy, ::lime::ui::MouseWheelMode mode);
		static ::Dynamic mouseWheelActive_dyn();

		static void touchMoveActive( ::lime::ui::Touch touch);
		static ::Dynamic touchMoveActive_dyn();

		static void touchStartActive( ::lime::ui::Touch touch);
		static ::Dynamic touchStartActive_dyn();

		static void touchEndActive( ::lime::ui::Touch touch);
		static ::Dynamic touchEndActive_dyn();

		static void touchCancelActive( ::lime::ui::Touch touch);
		static ::Dynamic touchCancelActive_dyn();

		static void keyDownActive(int keyCode,int modifier);
		static ::Dynamic keyDownActive_dyn();

		static void keyUpActive(int keyCode,int modifier);
		static ::Dynamic keyUpActive_dyn();

		static void textInputActive(::String text);
		static ::Dynamic textInputActive_dyn();

		static void registerEvents( ::lime::ui::Window window);
		static ::Dynamic registerEvents_dyn();

		static bool isMouseMove;
		static Float lastMouseMoveX;
		static Float lastMouseMoveY;
		static void _mouseMove(Float x,Float y);
		static ::Dynamic _mouseMove_dyn();

		static void _mouseMoveFrameSynced( ::lime::graphics::RenderContext context);
		static ::Dynamic _mouseMoveFrameSynced_dyn();

		static void _windowLeave();
		static ::Dynamic _windowLeave_dyn();

		int number;
		bool overOutEventsBubble;
		bool moveEventsBubble;
		bool upDownEventsBubble;
		::Array< ::Dynamic> uiElements;
		 ::peote::view::Buffer_Pickable movePickBuffer;
		 ::peote::view::Program movePickProgram;
		 ::peote::view::Buffer_Pickable clickPickBuffer;
		 ::peote::view::Program clickPickProgram;
		::Array< ::Dynamic> draggingMouseElements;
		::Array< ::Dynamic> draggingTouchElements;
		int maxTouchpoints;
		::Array< ::Dynamic> usedStyleProgram;
		::Array< int > usedStyleID;
		int stylePosBeforeFont;
		bool autoAddStyles;
		void addToPeoteView( ::peote::view::PeoteView peoteView, ::peote::view::Display atDisplay,::hx::Null< bool >  addBefore);

		void add( ::peote::ui::interactive::Interactive uiElement);
		::Dynamic add_dyn();

		void remove( ::peote::ui::interactive::Interactive uiElement);
		::Dynamic remove_dyn();

		void update( ::peote::ui::interactive::Interactive uiElement);
		::Dynamic update_dyn();

		void startDraggingElement( ::peote::ui::interactive::Interactive uiElement, ::Dynamic e);
		::Dynamic startDraggingElement_dyn();

		void stopDraggingElement( ::peote::ui::interactive::Interactive uiElement, ::Dynamic e);
		::Dynamic stopDraggingElement_dyn();

		bool mouseEnabled;
		bool touchEnabled;
		::Array< int > lastTouchOverIndex;
		::Array< int > lastTouchDownIndex;
		int lockTouchDown;
		int lastMouseOverIndex;
		::Array< int > lastMouseDownIndex;
		int lockMouseDown;
		 ::Dynamic onPointerOver;
		Dynamic onPointerOver_dyn() { return onPointerOver;}
		 ::Dynamic onPointerOut;
		Dynamic onPointerOut_dyn() { return onPointerOut;}
		 ::Dynamic onPointerDown;
		Dynamic onPointerDown_dyn() { return onPointerDown;}
		 ::Dynamic onPointerUp;
		Dynamic onPointerUp_dyn() { return onPointerUp;}
		 ::Dynamic onPointerClick;
		Dynamic onPointerClick_dyn() { return onPointerClick;}
		 ::Dynamic onPointerMove;
		Dynamic onPointerMove_dyn() { return onPointerMove;}
		bool isMouseInside;
		bool isMouseOver;
		Float lastMouseX;
		Float lastMouseY;
		bool isTriggerMouse;
		bool isTouchInside;
		bool isTouchOver;
		int isMouseDown;
		int isTouchDown;
		::Dynamic inputFocusElement;
		int dragMinX;
		int dragMinY;
		int dragMaxX;
		int dragMaxY;
		int dragOriginX;
		int dragOriginY;
		int activeIndex;
};

} // end namespace peote
} // end namespace ui

#endif /* INCLUDED_peote_ui_PeoteUIDisplay */ 
