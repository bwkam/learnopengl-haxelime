// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#ifndef INCLUDED_peote_view_Texture
#define INCLUDED_peote_view_Texture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS2(peote,view,Display)
HX_DECLARE_CLASS2(peote,view,Program)
HX_DECLARE_CLASS2(peote,view,Texture)
HX_DECLARE_CLASS3(peote,view,_TextureData,TextureDataImpl)

namespace peote{
namespace view{


class HXCPP_CLASS_ATTRIBUTES Texture_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Texture_obj OBJ_;
		Texture_obj();

	public:
		enum { _hx_ClassId = 0x074ad0b7 };

		void __construct(int slotWidth,int slotHeight,::hx::Null< int >  __o_imageSlots,::hx::Null< int >  __o_colorChannels,::hx::Null< bool >  __o_createMipmaps,::hx::Null< int >  __o_minFilter,::hx::Null< int >  __o_magFilter,::hx::Null< bool >  __o_useFloat,::hx::Null< int >  __o_maxTextureSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="peote.view.Texture")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"peote.view.Texture"); }
		static ::hx::ObjectPtr< Texture_obj > __new(int slotWidth,int slotHeight,::hx::Null< int >  __o_imageSlots,::hx::Null< int >  __o_colorChannels,::hx::Null< bool >  __o_createMipmaps,::hx::Null< int >  __o_minFilter,::hx::Null< int >  __o_magFilter,::hx::Null< bool >  __o_useFloat,::hx::Null< int >  __o_maxTextureSize);
		static ::hx::ObjectPtr< Texture_obj > __alloc(::hx::Ctx *_hx_ctx,int slotWidth,int slotHeight,::hx::Null< int >  __o_imageSlots,::hx::Null< int >  __o_colorChannels,::hx::Null< bool >  __o_createMipmaps,::hx::Null< int >  __o_minFilter,::hx::Null< int >  __o_magFilter,::hx::Null< bool >  __o_useFloat,::hx::Null< int >  __o_maxTextureSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Texture_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Texture",bb,f0,31,6c); }

		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl;
		 ::lime::graphics::opengl::GLObject glTexture;
		 ::lime::graphics::opengl::GLObject framebuffer;
		 ::lime::graphics::opengl::GLObject glDepthBuffer;
		bool clearOnRenderInto;
		int colorChannels;
		int width;
		int height;
		int imageSlots;
		int freeSlots;
		int slotsX;
		int slotsY;
		int slotWidth;
		int slotHeight;
		int tilesX;
		int tilesY;
		 ::haxe::ds::ObjectMap images;
		bool createMipmaps;
		int magFilter;
		int minFilter;
		bool useFloat;
		bool updated;
		::Array< ::Dynamic> programs;
		::Array< ::Dynamic> displays;
		void bufferImage( ::peote::view::_TextureData::TextureDataImpl image, ::Dynamic imgProp);
		::Dynamic bufferImage_dyn();

};

} // end namespace peote
} // end namespace view

#endif /* INCLUDED_peote_view_Texture */ 
