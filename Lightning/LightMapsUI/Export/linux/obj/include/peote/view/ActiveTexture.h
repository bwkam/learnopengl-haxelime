// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#ifndef INCLUDED_peote_view_ActiveTexture
#define INCLUDED_peote_view_ActiveTexture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(peote,view,ActiveTexture)
HX_DECLARE_CLASS2(peote,view,Texture)

namespace peote{
namespace view{


class HXCPP_CLASS_ATTRIBUTES ActiveTexture_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ActiveTexture_obj OBJ_;
		ActiveTexture_obj();

	public:
		enum { _hx_ClassId = 0x1e8f4bc9 };

		void __construct(int unit, ::peote::view::Texture texture,int uniformLoc);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="peote.view.ActiveTexture")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"peote.view.ActiveTexture"); }
		static ::hx::ObjectPtr< ActiveTexture_obj > __new(int unit, ::peote::view::Texture texture,int uniformLoc);
		static ::hx::ObjectPtr< ActiveTexture_obj > __alloc(::hx::Ctx *_hx_ctx,int unit, ::peote::view::Texture texture,int uniformLoc);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ActiveTexture_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ActiveTexture",95,63,9a,9e); }

		int unit;
		 ::peote::view::Texture texture;
		int uniformLoc;
};

} // end namespace peote
} // end namespace view

#endif /* INCLUDED_peote_view_ActiveTexture */ 
