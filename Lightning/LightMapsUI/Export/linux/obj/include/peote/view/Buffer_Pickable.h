// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#ifndef INCLUDED_peote_view_Buffer_Pickable
#define INCLUDED_peote_view_Buffer_Pickable

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_peote_view_BufferInterface
#include <peote/view/BufferInterface.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS3(peote,ui,interactive,Pickable)
HX_DECLARE_CLASS2(peote,view,BufferInterface)
HX_DECLARE_CLASS2(peote,view,Buffer_Pickable)
HX_DECLARE_CLASS2(peote,view,Display)
HX_DECLARE_CLASS2(peote,view,PeoteView)
HX_DECLARE_CLASS2(peote,view,Program)

namespace peote{
namespace view{


class HXCPP_CLASS_ATTRIBUTES Buffer_Pickable_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Buffer_Pickable_obj OBJ_;
		Buffer_Pickable_obj();

	public:
		enum { _hx_ClassId = 0x6d5c272a };

		void __construct(int minSize,::hx::Null< int >  __o_growSize,::hx::Null< bool >  __o_autoShrink);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="peote.view.Buffer_Pickable")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"peote.view.Buffer_Pickable"); }
		static ::hx::ObjectPtr< Buffer_Pickable_obj > __new(int minSize,::hx::Null< int >  __o_growSize,::hx::Null< bool >  __o_autoShrink);
		static ::hx::ObjectPtr< Buffer_Pickable_obj > __alloc(::hx::Ctx *_hx_ctx,int minSize,::hx::Null< int >  __o_growSize,::hx::Null< bool >  __o_autoShrink);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Buffer_Pickable_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("Buffer_Pickable",5a,39,3c,7f); }

		 ::lime::_internal::backend::native::NativeOpenGLRenderContext _gl;
		 ::lime::graphics::opengl::GLObject _glBuffer;
		::Array< ::Dynamic> _elements;
		int _maxElements;
		int _elemBuffSize;
		int _minSize;
		int _growSize;
		int _shrinkAtSize;
		 ::haxe::io::Bytes _bytes;
		void setNewGLContext( ::lime::_internal::backend::native::NativeOpenGLRenderContext newGl);
		::Dynamic setNewGLContext_dyn();

		void updateElement( ::peote::ui::interactive::Pickable element);
		::Dynamic updateElement_dyn();

		void addElement( ::peote::ui::interactive::Pickable element);
		::Dynamic addElement_dyn();

		void removeElement( ::peote::ui::interactive::Pickable element);
		::Dynamic removeElement_dyn();

		 ::peote::ui::interactive::Pickable getElement(int elementIndex);
		::Dynamic getElement_dyn();

		int getElementIndex( ::peote::ui::interactive::Pickable element);
		::Dynamic getElementIndex_dyn();

		::String getVertexShader();
		::Dynamic getVertexShader_dyn();

		::String getFragmentShader();
		::Dynamic getFragmentShader_dyn();

		::Array< ::String > getTextureIdentifiers();
		::Dynamic getTextureIdentifiers_dyn();

		::Array< ::String > getColorIdentifiers();
		::Dynamic getColorIdentifiers_dyn();

		::Array< ::String > getCustomIdentifiers();
		::Dynamic getCustomIdentifiers_dyn();

		::Array< ::String > getCustomVaryings();
		::Dynamic getCustomVaryings_dyn();

		::String getDefaultColorFormula();
		::Dynamic getDefaultColorFormula_dyn();

		 ::haxe::ds::StringMap getDefaultFormulaVars();
		::Dynamic getDefaultFormulaVars_dyn();

		 ::haxe::ds::StringMap getFormulas();
		::Dynamic getFormulas_dyn();

		 ::haxe::ds::StringMap getAttributes();
		::Dynamic getAttributes_dyn();

		 ::haxe::ds::StringMap getFormulaNames();
		::Dynamic getFormulaNames_dyn();

		::Array< ::String > getFormulaVaryings();
		::Dynamic getFormulaVaryings_dyn();

		::Array< ::String > getFormulaConstants();
		::Dynamic getFormulaConstants_dyn();

		int getMaxZindex();
		::Dynamic getMaxZindex_dyn();

		bool hasAlpha();
		::Dynamic hasAlpha_dyn();

		bool hasZindex();
		::Dynamic hasZindex_dyn();

		bool hasPicking();
		::Dynamic hasPicking_dyn();

		bool needFragmentPrecision();
		::Dynamic needFragmentPrecision_dyn();

		void bindAttribLocations( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl, ::lime::graphics::opengl::GLObject glProgram);
		::Dynamic bindAttribLocations_dyn();

		void render( ::peote::view::PeoteView peoteView, ::peote::view::Display display, ::peote::view::Program program);
		::Dynamic render_dyn();

		void pick( ::peote::view::PeoteView peoteView, ::peote::view::Display display, ::peote::view::Program program,int toElement);
		::Dynamic pick_dyn();

};

} // end namespace peote
} // end namespace view

#endif /* INCLUDED_peote_view_Buffer_Pickable */ 
