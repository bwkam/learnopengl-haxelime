// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#ifndef INCLUDED_peote_view_Program
#define INCLUDED_peote_view_Program

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS2(peote,view,BufferInterface)
HX_DECLARE_CLASS2(peote,view,Display)
HX_DECLARE_CLASS2(peote,view,Program)
HX_DECLARE_CLASS2(peote,view,Texture)
HX_DECLARE_CLASS2(peote,view,UniformFloat)
HX_DECLARE_CLASS3(peote,view,utils,RenderListItem_peote_view_ActiveTexture)
HX_DECLARE_CLASS3(peote,view,utils,RenderList_peote_view_ActiveTexture)

namespace peote{
namespace view{


class HXCPP_CLASS_ATTRIBUTES Program_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Program_obj OBJ_;
		Program_obj();

	public:
		enum { _hx_ClassId = 0x20e01034 };

		void __construct(::Dynamic buffer);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="peote.view.Program")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"peote.view.Program"); }
		static ::hx::ObjectPtr< Program_obj > __new(::Dynamic buffer);
		static ::hx::ObjectPtr< Program_obj > __alloc(::hx::Ctx *_hx_ctx,::Dynamic buffer);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Program_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Program",64,72,4a,c1); }

		bool colorEnabled;
		bool alphaEnabled;
		bool zIndexEnabled;
		int mask;
		bool clearMask;
		bool autoUpdateTextures;
		bool isVisible;
		::Array< ::Dynamic> displays;
		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl;
		 ::lime::graphics::opengl::GLObject glProgram;
		 ::lime::graphics::opengl::GLObject glProgramPicking;
		 ::lime::graphics::opengl::GLObject glVertexShader;
		 ::lime::graphics::opengl::GLObject glFragmentShader;
		 ::lime::graphics::opengl::GLObject glVertexShaderPicking;
		 ::lime::graphics::opengl::GLObject glFragmentShaderPicking;
		::Dynamic buffer;
		 ::Dynamic glShaderConfig;
		 ::peote::view::utils::RenderList_peote_view_ActiveTexture textureList;
		 ::peote::view::utils::RenderList_peote_view_ActiveTexture textureListPicking;
		 ::haxe::ds::IntMap textureLayers;
		::Array< ::Dynamic> activeTextures;
		::Array< int > activeUnits;
		::Array< ::String > colorIdentifiers;
		::Array< ::String > customIdentifiers;
		::Array< ::String > customVaryings;
		::Array< ::String > textureIdentifiers;
		::Array< ::String > customTextureIdentifiers;
		::Array< ::Dynamic> textureID_Defaults;
		int used_by_ColorFormula;
		int usedID_by_ColorFormula;
		 ::haxe::ds::StringMap defaultFormulaVars;
		::String defaultColorFormula;
		::String colorFormula;
		 ::haxe::ds::StringMap formula;
		bool formulaHasChanged;
		::String fragmentFloatPrecision;
		bool hasFragmentInjection;
		void addToDisplay( ::peote::view::Display display, ::peote::view::Program atProgram,::hx::Null< bool >  addBefore);
		::Dynamic addToDisplay_dyn();

		bool ready;
		void createProg(::hx::Null< bool >  isPicking);
		::Dynamic createProg_dyn();

		int uRESOLUTION;
		int uZOOM;
		int uOFFSET;
		int uTIME;
		int uRESOLUTION_PICK;
		int uZOOM_PICK;
		int uOFFSET_PICK;
		int uTIME_PICK;
		::Array< ::Dynamic> uniformFloatsVertex;
		::Array< ::Dynamic> uniformFloatsFragment;
		::Array< ::Dynamic> uniformFloats;
		::Array< int > uniformFloatLocations;
		::Array< int > uniformFloatPickLocations;
		void parseColorFormula();
		::Dynamic parseColorFormula_dyn();

		void setColorFormula(::String formula, ::haxe::ds::StringMap varDefaults, ::Dynamic autoUpdateTextures);
		::Dynamic setColorFormula_dyn();

		void injectIntoFragmentShader(::String glslCode,::hx::Null< bool >  uTimeUniformEnabled,::Array< ::Dynamic> uniformFloats, ::Dynamic autoUpdateTextures);
		::Dynamic injectIntoFragmentShader_dyn();

		::String generateUniformFloatsGLSL(::Array< ::Dynamic> uniformFloats);
		::Dynamic generateUniformFloatsGLSL_dyn();

		void accumulateUniformsFloat();
		::Dynamic accumulateUniformsFloat_dyn();

		void parseAndResolveFormulas();
		::Dynamic parseAndResolveFormulas_dyn();

		void updateTextures();
		::Dynamic updateTextures_dyn();

		 ::peote::view::utils::RenderListItem_peote_view_ActiveTexture textureListItem;
};

} // end namespace peote
} // end namespace view

#endif /* INCLUDED_peote_view_Program */ 
