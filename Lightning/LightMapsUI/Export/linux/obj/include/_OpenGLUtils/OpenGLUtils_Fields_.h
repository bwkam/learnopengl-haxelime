// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#ifndef INCLUDED__OpenGLUtils_OpenGLUtils_Fields_
#define INCLUDED__OpenGLUtils_OpenGLUtils_Fields_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(_OpenGLUtils,OpenGLUtils_Fields_)
HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)

namespace _OpenGLUtils{


class HXCPP_CLASS_ATTRIBUTES OpenGLUtils_Fields__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef OpenGLUtils_Fields__obj OBJ_;
		OpenGLUtils_Fields__obj();

	public:
		enum { _hx_ClassId = 0x2aa3ece2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="_OpenGLUtils.OpenGLUtils_Fields_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"_OpenGLUtils.OpenGLUtils_Fields_"); }

		inline static ::hx::ObjectPtr< OpenGLUtils_Fields__obj > __new() {
			::hx::ObjectPtr< OpenGLUtils_Fields__obj > __this = new OpenGLUtils_Fields__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< OpenGLUtils_Fields__obj > __alloc(::hx::Ctx *_hx_ctx) {
			OpenGLUtils_Fields__obj *__this = (OpenGLUtils_Fields__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OpenGLUtils_Fields__obj), false, "_OpenGLUtils.OpenGLUtils_Fields_"));
			*(void **)__this = OpenGLUtils_Fields__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~OpenGLUtils_Fields__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("OpenGLUtils_Fields_",49,06,d9,ac); }

		static  ::lime::graphics::opengl::GLObject glCreateShader( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl,::String source,int type);
		static ::Dynamic glCreateShader_dyn();

		static  ::lime::graphics::opengl::GLObject glCreateProgram( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl,::String vertexSource,::String fragmentSource);
		static ::Dynamic glCreateProgram_dyn();

};

} // end namespace _OpenGLUtils

#endif /* INCLUDED__OpenGLUtils_OpenGLUtils_Fields_ */ 
