// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#define INCLUDED_lime_graphics_cairo_Cairo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,graphics,cairo,Cairo)

namespace lime{
namespace graphics{
namespace cairo{


class HXCPP_CLASS_ATTRIBUTES Cairo_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Cairo_obj OBJ_;
		Cairo_obj();

	public:
		enum { _hx_ClassId = 0x0bd6c148 };

		void __construct( ::Dynamic surface);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.graphics.cairo.Cairo")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"lime.graphics.cairo.Cairo"); }
		static ::hx::ObjectPtr< Cairo_obj > __new( ::Dynamic surface);
		static ::hx::ObjectPtr< Cairo_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic surface);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Cairo_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Cairo",68,a0,46,d4); }

		 ::Dynamic handle;
		void recreate( ::Dynamic surface);
		::Dynamic recreate_dyn();

};

} // end namespace lime
} // end namespace graphics
} // end namespace cairo

#endif /* INCLUDED_lime_graphics_cairo_Cairo */ 
