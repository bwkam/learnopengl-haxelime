// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#ifndef INCLUDED_Program
#define INCLUDED_Program

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Program)
HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)



class HXCPP_CLASS_ATTRIBUTES Program_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Program_obj OBJ_;
		Program_obj();

	public:
		enum { _hx_ClassId = 0x12dc3730 };

		void __construct( ::lime::_internal::backend::native::NativeOpenGLRenderContext gl);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Program")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Program"); }

		//~Program_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Program",64,72,4a,c1); }

		 ::lime::_internal::backend::native::NativeOpenGLRenderContext _gl;
		 ::lime::graphics::opengl::GLObject _glProgram;
		void use();
		::Dynamic use_dyn();

		void createGLSLProgram(::String vertexSource,::String fragmentSource);
		::Dynamic createGLSLProgram_dyn();

};


#endif /* INCLUDED_Program */ 
