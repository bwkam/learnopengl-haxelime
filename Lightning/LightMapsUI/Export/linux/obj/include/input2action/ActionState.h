// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#ifndef INCLUDED_input2action_ActionState
#define INCLUDED_input2action_ActionState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_28349780f1f80ab2_284_new)
HX_DECLARE_CLASS1(input2action,ActionState)

namespace input2action{


class HXCPP_CLASS_ATTRIBUTES ActionState_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ActionState_obj OBJ_;
		ActionState_obj();

	public:
		enum { _hx_ClassId = 0x17622999 };

		void __construct( ::Dynamic up, ::Dynamic each, ::Dynamic repeatKeyboardDefault, ::Dynamic repeatDelay, ::Dynamic repeatRate,bool single, ::Dynamic action,int player);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="input2action.ActionState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"input2action.ActionState"); }

		inline static ::hx::ObjectPtr< ActionState_obj > __new( ::Dynamic up, ::Dynamic each, ::Dynamic repeatKeyboardDefault, ::Dynamic repeatDelay, ::Dynamic repeatRate,bool single, ::Dynamic action,int player) {
			::hx::ObjectPtr< ActionState_obj > __this = new ActionState_obj();
			__this->__construct(up,each,repeatKeyboardDefault,repeatDelay,repeatRate,single,action,player);
			return __this;
		}

		inline static ::hx::ObjectPtr< ActionState_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic up, ::Dynamic each, ::Dynamic repeatKeyboardDefault, ::Dynamic repeatDelay, ::Dynamic repeatRate,bool single, ::Dynamic action,int player) {
			ActionState_obj *__this = (ActionState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ActionState_obj), true, "input2action.ActionState"));
			*(void **)__this = ActionState_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_28349780f1f80ab2_284_new)
HXLINE( 299)		( ( ::input2action::ActionState)(__this) )->action = null();
HXLINE( 291)		( ( ::input2action::ActionState)(__this) )->repeatRate = 0;
HXLINE( 290)		( ( ::input2action::ActionState)(__this) )->repeatDelay = 0;
HXLINE( 289)		( ( ::input2action::ActionState)(__this) )->repeatKeyboardDefault = false;
HXLINE( 286)		( ( ::input2action::ActionState)(__this) )->each = false;
HXLINE( 285)		( ( ::input2action::ActionState)(__this) )->up = false;
HXLINE( 318)		if (::hx::IsNotNull( up )) {
HXLINE( 318)			( ( ::input2action::ActionState)(__this) )->up = ( (bool)(up) );
            		}
HXLINE( 319)		if (::hx::IsNotNull( each )) {
HXLINE( 319)			( ( ::input2action::ActionState)(__this) )->each = ( (bool)(each) );
            		}
HXLINE( 322)		if (::hx::IsNotNull( repeatKeyboardDefault )) {
HXLINE( 322)			( ( ::input2action::ActionState)(__this) )->repeatKeyboardDefault = ( (bool)(repeatKeyboardDefault) );
            		}
HXLINE( 323)		if (::hx::IsNotNull( repeatDelay )) {
HXLINE( 323)			( ( ::input2action::ActionState)(__this) )->repeatDelay = ( (int)(repeatDelay) );
            		}
HXLINE( 324)		if (::hx::IsNotNull( repeatRate )) {
HXLINE( 324)			( ( ::input2action::ActionState)(__this) )->repeatRate = ( (int)(repeatRate) );
            		}
HXLINE( 327)		( ( ::input2action::ActionState)(__this) )->single = single;
HXLINE( 328)		( ( ::input2action::ActionState)(__this) )->action = action;
HXLINE( 329)		( ( ::input2action::ActionState)(__this) )->player = player;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ActionState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ActionState",5b,0e,a3,3a); }

		bool up;
		bool each;
		bool repeatKeyboardDefault;
		int repeatDelay;
		int repeatRate;
		bool single;
		 ::Dynamic action;
		Dynamic action_dyn() { return action;}
		int player;
};

} // end namespace input2action

#endif /* INCLUDED_input2action_ActionState */ 
