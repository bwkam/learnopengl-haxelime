// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#ifndef INCLUDED_input2action_Input2Action
#define INCLUDED_input2action_Input2Action

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(input2action,ActionConfigItem)
HX_DECLARE_CLASS1(input2action,ActionState)
HX_DECLARE_CLASS1(input2action,Input2Action)
HX_DECLARE_CLASS2(input2action,_InputState,KeyState)

namespace input2action{


class HXCPP_CLASS_ATTRIBUTES Input2Action_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Input2Action_obj OBJ_;
		Input2Action_obj();

	public:
		enum { _hx_ClassId = 0x477219e0 };

		void __construct(::Array< ::Dynamic> actionConfig, ::haxe::ds::StringMap actionMap);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="input2action.Input2Action")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"input2action.Input2Action"); }
		static ::hx::ObjectPtr< Input2Action_obj > __new(::Array< ::Dynamic> actionConfig, ::haxe::ds::StringMap actionMap);
		static ::hx::ObjectPtr< Input2Action_obj > __alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> actionConfig, ::haxe::ds::StringMap actionMap);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Input2Action_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Input2Action",de,5e,f9,fc); }

		static void __boot();
		static  ::haxe::ds::IntMap keyCodeName;
		static  ::haxe::ds::IntMap gamepadButtonName;
		 ::haxe::ds::StringMap actionMap;
		::Array< ::Dynamic> actionConfigDefault;
		::Array< ::Dynamic> actionStatePlayers;
		 ::input2action::ActionState getOrCreateActionState( ::Dynamic actionMapItem, ::input2action::ActionConfigItem actionConfigItem,int player);
		::Dynamic getOrCreateActionState_dyn();

		::Array< ::Dynamic> keyboardState;
		void setKeyboard(::hx::Null< int >  player,::Array< ::Dynamic> actionConfig);
		::Dynamic setKeyboard_dyn();

};

} // end namespace input2action

#endif /* INCLUDED_input2action_Input2Action */ 
