// Generated by Haxe 5.0.0-alpha.1+2f4b99d
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_math__RGBA_RGBA_Impl_
#include <lime/math/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7fcfbbd74e9c398a_51___init__,"::lime::math::_RGBA::RGBA_Impl__obj","__init__",0x1ae221dc,"::lime::math::_RGBA::RGBA_Impl__obj.__init__","lime/math/RGBA.hx",51,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_104__new,"lime.math._RGBA.RGBA_Impl_","_new",0x44207173,"lime.math._RGBA.RGBA_Impl_._new","lime/math/RGBA.hx",104,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_118_create,"lime.math._RGBA.RGBA_Impl_","create",0xc92d6b8e,"lime.math._RGBA.RGBA_Impl_.create","lime/math/RGBA.hx",118,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_129_multiplyAlpha,"lime.math._RGBA.RGBA_Impl_","multiplyAlpha",0x864c8448,"lime.math._RGBA.RGBA_Impl_.multiplyAlpha","lime/math/RGBA.hx",129,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_151_readUInt8,"lime.math._RGBA.RGBA_Impl_","readUInt8",0x9e5b3ef6,"lime.math._RGBA.RGBA_Impl_.readUInt8","lime/math/RGBA.hx",151,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_179_set,"lime.math._RGBA.RGBA_Impl_","set",0x1878e7d0,"lime.math._RGBA.RGBA_Impl_.set","lime/math/RGBA.hx",179,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_187_unmultiplyAlpha,"lime.math._RGBA.RGBA_Impl_","unmultiplyAlpha",0x1c10a1cf,"lime.math._RGBA.RGBA_Impl_.unmultiplyAlpha","lime/math/RGBA.hx",187,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_202_writeUInt8,"lime.math._RGBA.RGBA_Impl_","writeUInt8",0x0228ffb1,"lime.math._RGBA.RGBA_Impl_.writeUInt8","lime/math/RGBA.hx",202,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_232___fromARGB,"lime.math._RGBA.RGBA_Impl_","__fromARGB",0x20512068,"lime.math._RGBA.RGBA_Impl_.__fromARGB","lime/math/RGBA.hx",232,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_237___fromBGRA,"lime.math._RGBA.RGBA_Impl_","__fromBGRA",0x20f207d0,"lime.math._RGBA.RGBA_Impl_.__fromBGRA","lime/math/RGBA.hx",237,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_243_get_a,"lime.math._RGBA.RGBA_Impl_","get_a",0xed8fd8e6,"lime.math._RGBA.RGBA_Impl_.get_a","lime/math/RGBA.hx",243,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_247_set_a,"lime.math._RGBA.RGBA_Impl_","set_a",0xd65ecef2,"lime.math._RGBA.RGBA_Impl_.set_a","lime/math/RGBA.hx",247,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_254_get_b,"lime.math._RGBA.RGBA_Impl_","get_b",0xed8fd8e7,"lime.math._RGBA.RGBA_Impl_.get_b","lime/math/RGBA.hx",254,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_258_set_b,"lime.math._RGBA.RGBA_Impl_","set_b",0xd65ecef3,"lime.math._RGBA.RGBA_Impl_.set_b","lime/math/RGBA.hx",258,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_265_get_g,"lime.math._RGBA.RGBA_Impl_","get_g",0xed8fd8ec,"lime.math._RGBA.RGBA_Impl_.get_g","lime/math/RGBA.hx",265,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_269_set_g,"lime.math._RGBA.RGBA_Impl_","set_g",0xd65ecef8,"lime.math._RGBA.RGBA_Impl_.set_g","lime/math/RGBA.hx",269,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_276_get_r,"lime.math._RGBA.RGBA_Impl_","get_r",0xed8fd8f7,"lime.math._RGBA.RGBA_Impl_.get_r","lime/math/RGBA.hx",276,0x0518ba7d)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d9611196b7dff8_280_set_r,"lime.math._RGBA.RGBA_Impl_","set_r",0xd65ecf03,"lime.math._RGBA.RGBA_Impl_.set_r","lime/math/RGBA.hx",280,0x0518ba7d)
namespace lime{
namespace math{
namespace _RGBA{

void RGBA_Impl__obj::__construct() { }

Dynamic RGBA_Impl__obj::__CreateEmpty() { return new RGBA_Impl__obj; }

void *RGBA_Impl__obj::_hx_vtable = 0;

Dynamic RGBA_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RGBA_Impl__obj > _hx_result = new RGBA_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RGBA_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4bfe0b6a;
}

void RGBA_Impl__obj::__init__(){
            	HX_GC_STACKFRAME(&_hx_pos_7fcfbbd74e9c398a_51___init__)
HXLINE(  55)		 ::haxe::io::Bytes buffer = null();
HXDLIN(  55)		::cpp::VirtualArray array = null();
HXDLIN(  55)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN(  55)		 ::Dynamic len = null();
HXDLIN(  55)		::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,256,7);
HXLINE(  57)		{
HXLINE(  57)			int _g = 0;
HXDLIN(  57)			while((_g < 256)){
HXLINE(  57)				_g = (_g + 1);
HXDLIN(  57)				int i = (_g - 1);
HXLINE(  59)				{
HXLINE(  59)					 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(  59)					int val = ::Math_obj::ceil((( (Float)(i) ) * ((Float)257.003921568627447)));
HXDLIN(  59)					 ::__hxcpp_memory_set_ui32(this1->buffer->b,(this1->byteOffset + (i * 4)),val);
            				}
            			}
            		}
HXLINE(  62)		 ::haxe::io::Bytes buffer1 = null();
HXDLIN(  62)		::cpp::VirtualArray array1 = null();
HXDLIN(  62)		 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  62)		 ::Dynamic len1 = null();
HXDLIN(  62)		::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,511,4);
HXLINE(  64)		{
HXLINE(  64)			int _g1 = 0;
HXDLIN(  64)			while((_g1 < 255)){
HXLINE(  64)				_g1 = (_g1 + 1);
HXDLIN(  64)				int i1 = (_g1 - 1);
HXLINE(  66)				{
HXLINE(  66)					 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  66)					 ::__hxcpp_memory_set_byte(this2->buffer->b,(this2->byteOffset + i1),i1);
            				}
            			}
            		}
HXLINE(  69)		{
HXLINE(  69)			int _g2 = 255;
HXDLIN(  69)			int _g3 = 511;
HXDLIN(  69)			while((_g2 < _g3)){
HXLINE(  69)				_g2 = (_g2 + 1);
HXDLIN(  69)				int i2 = (_g2 - 1);
HXLINE(  71)				{
HXLINE(  71)					 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  71)					 ::__hxcpp_memory_set_byte(this3->buffer->b,(this3->byteOffset + i2),255);
            				}
            			}
            		}
            	}


 ::lime::utils::ArrayBufferView RGBA_Impl__obj::_hx___alpha16;

 ::lime::utils::ArrayBufferView RGBA_Impl__obj::_hx___clamp;

int RGBA_Impl__obj::a16;

Float RGBA_Impl__obj::unmult;

int RGBA_Impl__obj::_new(::hx::Null< int >  __o_rgba){
            		int rgba = __o_rgba.Default(0);
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_104__new)
HXDLIN( 104)		return rgba;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,_new,return )

int RGBA_Impl__obj::create(int r,int g,int b,int a){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_118_create)
HXLINE( 119)		int rgba = 0;
HXLINE( 120)		rgba = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (a & 255));
HXLINE( 121)		return rgba;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(RGBA_Impl__obj,create,return )

void RGBA_Impl__obj::multiplyAlpha(int this1){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_129_multiplyAlpha)
HXDLIN( 129)		if (((this1 & 255) == 0)) {
HXLINE( 131)			if ((this1 != 0)) {
HXLINE( 133)				this1 = 0;
            			}
            		}
            		else {
HXLINE( 136)			if (((this1 & 255) != 255)) {
HXLINE( 138)				 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 138)				::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this2->buffer->b,(this2->byteOffset + ((this1 & 255) * 4)))) );
HXLINE( 139)				this1 = ((((((((::hx::UShr(this1,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(this1,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(this1,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((this1 & 255) & 255));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,multiplyAlpha,(void))

void RGBA_Impl__obj::readUInt8(int this1, ::lime::utils::ArrayBufferView data,int offset,::hx::Null< int >  __o_format,::hx::Null< bool >  __o_premultiplied){
            		int format = __o_format.Default(0);
            		bool premultiplied = __o_premultiplied.Default(false);
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_151_readUInt8)
HXLINE( 152)		switch((int)(format)){
            			case (int)0: {
HXLINE( 158)				int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 158)				int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 158)				int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 158)				this1 = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            			}
            			break;
            			case (int)1: {
HXLINE( 161)				int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 161)				int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 161)				int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 161)				this1 = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            			}
            			break;
            			case (int)2: {
HXLINE( 155)				int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 155)				int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 155)				int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 155)				this1 = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            			}
            			break;
            		}
HXLINE( 164)		if (premultiplied) {
HXLINE( 166)			bool _hx_tmp;
HXDLIN( 166)			if (((this1 & 255) != 0)) {
HXLINE( 166)				_hx_tmp = ((this1 & 255) != 255);
            			}
            			else {
HXLINE( 166)				_hx_tmp = false;
            			}
HXDLIN( 166)			if (_hx_tmp) {
HXLINE( 166)				::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((this1 & 255)) ));
HXDLIN( 166)				{
HXLINE( 166)					 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 166)					int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(this1,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 166)					 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 166)					int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(this1,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 166)					 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 166)					this1 = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(this1,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((this1 & 255) & 255));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(RGBA_Impl__obj,readUInt8,(void))

void RGBA_Impl__obj::set(int this1,int r,int g,int b,int a){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_179_set)
HXDLIN( 179)		this1 = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (a & 255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(RGBA_Impl__obj,set,(void))

void RGBA_Impl__obj::unmultiplyAlpha(int this1){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_187_unmultiplyAlpha)
HXDLIN( 187)		bool _hx_tmp;
HXDLIN( 187)		if (((this1 & 255) != 0)) {
HXDLIN( 187)			_hx_tmp = ((this1 & 255) != 255);
            		}
            		else {
HXDLIN( 187)			_hx_tmp = false;
            		}
HXDLIN( 187)		if (_hx_tmp) {
HXLINE( 189)			::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((this1 & 255)) ));
HXLINE( 190)			{
HXLINE( 190)				 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 190)				int r = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(this1,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 190)				 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 190)				int g = ( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(this1,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 190)				 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 190)				this1 = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(this1,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((this1 & 255) & 255));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,unmultiplyAlpha,(void))

void RGBA_Impl__obj::writeUInt8(int this1, ::lime::utils::ArrayBufferView data,int offset,::hx::Null< int >  __o_format,::hx::Null< bool >  __o_premultiplied){
            		int format = __o_format.Default(0);
            		bool premultiplied = __o_premultiplied.Default(false);
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_202_writeUInt8)
HXLINE( 203)		if (premultiplied) {
HXLINE( 205)			if (((this1 & 255) == 0)) {
HXLINE( 205)				if ((this1 != 0)) {
HXLINE( 205)					this1 = 0;
            				}
            			}
            			else {
HXLINE( 205)				if (((this1 & 255) != 255)) {
HXLINE( 205)					 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 205)					::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this2->buffer->b,(this2->byteOffset + ((this1 & 255) * 4)))) );
HXDLIN( 205)					this1 = ((((((((::hx::UShr(this1,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(this1,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(this1,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((this1 & 255) & 255));
            				}
            			}
            		}
HXLINE( 208)		switch((int)(format)){
            			case (int)0: {
HXLINE( 217)				{
HXLINE( 217)					int val = (::hx::UShr(this1,24) & 255);
HXDLIN( 217)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            				}
HXLINE( 218)				{
HXLINE( 218)					int val1 = (::hx::UShr(this1,16) & 255);
HXDLIN( 218)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            				}
HXLINE( 219)				{
HXLINE( 219)					int val2 = (::hx::UShr(this1,8) & 255);
HXDLIN( 219)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            				}
HXLINE( 220)				{
HXLINE( 220)					int val3 = (this1 & 255);
HXDLIN( 220)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 223)				{
HXLINE( 223)					int val4 = (this1 & 255);
HXDLIN( 223)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            				}
HXLINE( 224)				{
HXLINE( 224)					int val5 = (::hx::UShr(this1,24) & 255);
HXDLIN( 224)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val5);
            				}
HXLINE( 225)				{
HXLINE( 225)					int val6 = (::hx::UShr(this1,16) & 255);
HXDLIN( 225)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val6);
            				}
HXLINE( 226)				{
HXLINE( 226)					int val7 = (::hx::UShr(this1,8) & 255);
HXDLIN( 226)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val7);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 211)				{
HXLINE( 211)					int val8 = (::hx::UShr(this1,8) & 255);
HXDLIN( 211)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            				}
HXLINE( 212)				{
HXLINE( 212)					int val9 = (::hx::UShr(this1,16) & 255);
HXDLIN( 212)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val9);
            				}
HXLINE( 213)				{
HXLINE( 213)					int val10 = (::hx::UShr(this1,24) & 255);
HXDLIN( 213)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val10);
            				}
HXLINE( 214)				{
HXLINE( 214)					int val11 = (this1 & 255);
HXDLIN( 214)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val11);
            				}
            			}
            			break;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(RGBA_Impl__obj,writeUInt8,(void))

int RGBA_Impl__obj::_hx___fromARGB(int argb){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_232___fromARGB)
HXDLIN( 232)		int rgba = 0;
HXDLIN( 232)		rgba = ((((((::hx::UShr(argb,16) & 255) & 255) << 24) | (((::hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((::hx::UShr(argb,24) & 255) & 255));
HXDLIN( 232)		return rgba;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,_hx___fromARGB,return )

int RGBA_Impl__obj::_hx___fromBGRA(int bgra){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_237___fromBGRA)
HXDLIN( 237)		int rgba = 0;
HXDLIN( 237)		rgba = ((((((::hx::UShr(bgra,8) & 255) & 255) << 24) | (((::hx::UShr(bgra,16) & 255) & 255) << 16)) | (((::hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN( 237)		return rgba;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,_hx___fromBGRA,return )

int RGBA_Impl__obj::get_a(int this1){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_243_get_a)
HXDLIN( 243)		return (this1 & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,get_a,return )

int RGBA_Impl__obj::set_a(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_247_set_a)
HXLINE( 248)		this1 = ((((((::hx::UShr(this1,24) & 255) & 255) << 24) | (((::hx::UShr(this1,16) & 255) & 255) << 16)) | (((::hx::UShr(this1,8) & 255) & 255) << 8)) | (value & 255));
HXLINE( 249)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGBA_Impl__obj,set_a,return )

int RGBA_Impl__obj::get_b(int this1){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_254_get_b)
HXDLIN( 254)		return (::hx::UShr(this1,8) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,get_b,return )

int RGBA_Impl__obj::set_b(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_258_set_b)
HXLINE( 259)		this1 = ((((((::hx::UShr(this1,24) & 255) & 255) << 24) | (((::hx::UShr(this1,16) & 255) & 255) << 16)) | ((value & 255) << 8)) | ((this1 & 255) & 255));
HXLINE( 260)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGBA_Impl__obj,set_b,return )

int RGBA_Impl__obj::get_g(int this1){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_265_get_g)
HXDLIN( 265)		return (::hx::UShr(this1,16) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,get_g,return )

int RGBA_Impl__obj::set_g(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_269_set_g)
HXLINE( 270)		this1 = ((((((::hx::UShr(this1,24) & 255) & 255) << 24) | ((value & 255) << 16)) | (((::hx::UShr(this1,8) & 255) & 255) << 8)) | ((this1 & 255) & 255));
HXLINE( 271)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGBA_Impl__obj,set_g,return )

int RGBA_Impl__obj::get_r(int this1){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_276_get_r)
HXDLIN( 276)		return (::hx::UShr(this1,24) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,get_r,return )

int RGBA_Impl__obj::set_r(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_d0d9611196b7dff8_280_set_r)
HXLINE( 281)		this1 = (((((value & 255) << 24) | (((::hx::UShr(this1,16) & 255) & 255) << 16)) | (((::hx::UShr(this1,8) & 255) & 255) << 8)) | ((this1 & 255) & 255));
HXLINE( 282)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGBA_Impl__obj,set_r,return )


RGBA_Impl__obj::RGBA_Impl__obj()
{
}

bool RGBA_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_a") ) { outValue = get_a_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_a") ) { outValue = set_a_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_b") ) { outValue = get_b_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_b") ) { outValue = set_b_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_g") ) { outValue = get_g_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_g") ) { outValue = set_g_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_r") ) { outValue = get_r_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_r") ) { outValue = set_r_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readUInt8") ) { outValue = readUInt8_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeUInt8") ) { outValue = writeUInt8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__fromARGB") ) { outValue = _hx___fromARGB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__fromBGRA") ) { outValue = _hx___fromBGRA_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *RGBA_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo RGBA_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(void *) &RGBA_Impl__obj::_hx___alpha16,HX_("__alpha16",a3,36,64,33)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(void *) &RGBA_Impl__obj::_hx___clamp,HX_("__clamp",db,cb,b6,b2)},
	{::hx::fsInt,(void *) &RGBA_Impl__obj::a16,HX_("a16",86,c5,49,00)},
	{::hx::fsFloat,(void *) &RGBA_Impl__obj::unmult,HX_("unmult",c9,6e,3a,66)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void RGBA_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RGBA_Impl__obj::_hx___alpha16,"__alpha16");
	HX_MARK_MEMBER_NAME(RGBA_Impl__obj::_hx___clamp,"__clamp");
	HX_MARK_MEMBER_NAME(RGBA_Impl__obj::a16,"a16");
	HX_MARK_MEMBER_NAME(RGBA_Impl__obj::unmult,"unmult");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RGBA_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RGBA_Impl__obj::_hx___alpha16,"__alpha16");
	HX_VISIT_MEMBER_NAME(RGBA_Impl__obj::_hx___clamp,"__clamp");
	HX_VISIT_MEMBER_NAME(RGBA_Impl__obj::a16,"a16");
	HX_VISIT_MEMBER_NAME(RGBA_Impl__obj::unmult,"unmult");
};

#endif

::hx::Class RGBA_Impl__obj::__mClass;

static ::String RGBA_Impl__obj_sStaticFields[] = {
	HX_("__alpha16",a3,36,64,33),
	HX_("__clamp",db,cb,b6,b2),
	HX_("a16",86,c5,49,00),
	HX_("unmult",c9,6e,3a,66),
	HX_("_new",61,15,1f,3f),
	HX_("create",fc,66,0f,7c),
	HX_("multiplyAlpha",9a,f2,1c,6b),
	HX_("readUInt8",48,9c,5d,5f),
	HX_("set",a2,9b,57,00),
	HX_("unmultiplyAlpha",a1,c8,96,28),
	HX_("writeUInt8",1f,4a,38,23),
	HX_("__fromARGB",d6,6a,60,41),
	HX_("__fromBGRA",3e,52,01,42),
	HX_("get_a",38,a5,60,91),
	HX_("set_a",44,9b,2f,7a),
	HX_("get_b",39,a5,60,91),
	HX_("set_b",45,9b,2f,7a),
	HX_("get_g",3e,a5,60,91),
	HX_("set_g",4a,9b,2f,7a),
	HX_("get_r",49,a5,60,91),
	HX_("set_r",55,9b,2f,7a),
	::String(null())
};

void RGBA_Impl__obj::__register()
{
	RGBA_Impl__obj _hx_dummy;
	RGBA_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("lime.math._RGBA.RGBA_Impl_",9c,7d,b4,a6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RGBA_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RGBA_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(RGBA_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< RGBA_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RGBA_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RGBA_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RGBA_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RGBA_Impl__obj::__boot()
{
}

} // end namespace lime
} // end namespace math
} // end namespace _RGBA
